cscope 15 /run/media/lixing/works/src/gui/task-timer -q 0000023489 0001764516
	@Fl_Drable_Window.cxx

2 
	~"Fl_DøbÀ_Wödow.h
"

5 
	gFl_DøbÀ_Wödow
::
	$Inô
()

11 
	}
}

13 
Fl_DøbÀ_Wödow
::
	$Fl_DøbÀ_Wödow
(
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_DoubÀ_Wödow
(
w
,
h
,
tôÀ
)

16 
	}
}

19 
	gFl_DøbÀ_Wödow
::
	$Fl_DøbÀ_Wödow
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 ):
	$Fl_DoubÀ_Wödow
(
x
,
y
,
w
,
h
,
tôÀ
)

21 
	}
}

23 
	gFl_DøbÀ_Wödow
::~
	$Fl_DøbÀ_Wödow
()

26 
	}
}

	@Fl_Drable_Window.h

2 #¥agm®
⁄˚


3 
	~<FL/Fl.H
>

4 
	~<FL/Fl_Box.H
>

5 
	~<FL/Fl_Wödow.H
>

6 
	~<FL/Fl_DoubÀ_Wödow.H
>

9 ˛as†
	cdøgbox
 : 
public
 
Fl_Box
 {

10 
public
:

11 
	$døgbox
(
x
, 
y
, 
w
, 
h
, c⁄° *
t
=0Ë: 
	$Fl_Box
(
x
,
y
,
w
,
h
,
t
) {};

12 
	$h™dÀ
(
evít
) {

13 
‰omx
, 
‰omy
, 
wöx
, 
wöy
;

14 i‡(
evít
 =
FL_PUSH
) {

15 
‰omx
 = 
Fl
::
	`evít_x_roŸ
();

16 
‰omy
 = 
Fl
::
	`evít_y_roŸ
();

17 
wöx
 = 
	`wödow
()->
	`x_roŸ
();

18 
wöy
 = 
	`wödow
()->
	`y_roŸ
();

21 i‡(
evít
 =
FL_DRAG
) {

22 
dñèx
 = 
Fl
::
	`evít_x_roŸ
(Ë- 
‰omx
;

23 
dñèy
 = 
Fl
::
	`evít_y_roŸ
(Ë- 
‰omy
;

24 
	`wödow
()->
	`ªsize
(
wöx
 + 
dñèx
, 
wöy
 + 
dñèy
, wödow()->
	`w
(), wödow()->
	`h
());

27  
Fl_Box
::
	`h™dÀ
(
evít
);

28 
	}
}

29 
	$døw
()

31  
Fl_Box
::
	`døw
();

32 
	}
}

35 ˛as†
	cFl_DøbÀ_Wödow
:
public
 
Fl_DoubÀ_Wödow


37 
public
:

38 
Fl_DøbÀ_Wödow
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

39 
Fl_DøbÀ_Wödow
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

40 
Inô
();

41 ~
Fl_DøbÀ_Wödow
();

	@about_panel.cxx

21 
	~"about_∑√l.h
"

22 
	~"FL/Fl_PNG_Image.H
"

23 
	~"FL/Fl_Sh¨ed_Image.H
"

25 
	$show_hñp
(c⁄° *
«me
){
	}
};

27 
Fl_DoubÀ_Wödow
 *
	gabout_∑√l
=(Fl_Double_Window *)0;

29 
	~<FL/Fl_Pixm≠.H
>

31 c⁄° *
	gid©a_Êuid
[] = {

258 
Fl_Pixm≠
 
image_Êuid
(
id©a_Êuid
);

260 
	$cb_Võw
(
Fl_Buâ⁄
*, *) {

261 
	`show_hñp
("license.html");

262 
	}
}

264 
	$cb_Clo£
(
Fl_Rëu∫_Buâ⁄
* 
o
, *) {

265 ((
Fl_Wödow
*)(
o
->
	`∑ª¡
()))->
	`hide
();

266 
	}
}

268 
	~"ui/imgd©a.h
"

269 
Fl_DoubÀ_Wödow
* 
	$make_about_∑√l
() {

271 
about_∑√l
 = 
√w
 
	`Fl_DoubÀ_Wödow
(345, 180, "About ‰ªñÂ±±ÂÆöÊó∂");

272 
about_∑√l
->
	`cﬁ‹
(
FL_LIGHT1
);

273 
about_∑√l
->
	`£À˘i⁄_cﬁ‹
(
FL_DARK1
);

274 
about_∑√l
->
	`hŸ•Ÿ
(about_panel);

276 
Fl_Box
* 
o
 = 
√w
 
	`Fl_Box
(10, 10, 115, 120);

279 
Fl_PNG_Image
 *
≤g
 = 0;

281 i‡(!
≤g
)

282 
≤g
 = 
√w
 
	`Fl_PNG_Image
("embedded:/maö.≤g", 
maö_≤g
, (main_png));

284 
≤g
 = (
Fl_PNG_Image
*)
√w
 
	`Fl_RGB_Image
(
maö_≤g
,96,96,4);

285 
o
->
	`image
(
≤g
);

287 { 
Fl_Box
* 
o
 = 
√w
 
	`Fl_Box
(135, 10, 205, 75,0);

288 
o
->
	`cﬁ‹
((
Fl_Cﬁ‹
)12);

289 
o
->
	`£À˘i⁄_cﬁ‹
(
FL_DARK1
);

290 
o
->
	`œbñf⁄t
(1);

291 
o
->
	`œbñsize
(18);

292 
o
->
	`Æign
(
	`Fl_Align
(
FL_ALIGN_TOP_LEFT
|
FL_ALIGN_INSIDE
));

293 
about
[80];

294 
	`¢¥ötf
(
about
,(about),"Ë∑®Âπ≥Âè∞ÂÆöÊó∂ËΩØ‰ª∂\nVer 1.0.0.7");

295 
o
->
	`c›y_œbñ
(
about
);

297 { 
Fl_Box
* 
o
 = 
√w
 
	`Fl_Box
(135, 90, 200, 45, "ByÜixing yao\n2016");

298 
o
->
	`Æign
(
	`Fl_Align
(132|
FL_ALIGN_INSIDE
));

305 { 
Fl_Rëu∫_Buâ⁄
* 
o
 = 
√w
 
	`Fl_Rëu∫_Buâ⁄
(250, 145, 83, 25, "Close");

306 
o
->
	`ˇŒback
((
Fl_CÆlback
*)
cb_Clo£
);

308 
about_∑√l
->
	`£t_n⁄_modÆ
();

309 
about_∑√l
->
	`íd
();

311  
about_∑√l
;

312 
	}
}

	@about_panel.h

21 #i‚de‡
about_∑√l_h


22 
	#about_∑√l_h


	)

23 
	~<FL/Fl.H
>

24 
show_hñp
(c⁄° *
«me
);

25 
	~<FL/Fl_DoubÀ_Wödow.H
>

26 
	~<§c/Ê°rög.h
>

27 
Fl_DoubÀ_Wödow
 *
about_∑√l
;

28 
	~<FL/Fl_Box.H
>

29 
	~<FL/Fl_Buâ⁄.H
>

30 
	~<FL/Fl_Rëu∫_Buâ⁄.H
>

31 
Fl_DoubÀ_Wödow
* 
make_about_∑√l
();

32 
Êuid_‹g_≤g
[12690];

	@childframe.cxx

2 
	~"chûd‰ame.h
"

4 
	gCChûdFøme
::
	$CChûdFøme
(
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_Wödow
(
w
,
h
,
tôÀ
)

7 
	}
}

9 
	gCChûdFøme
::
	$CChûdFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 ):
	$Fl_Wödow
(
x
,
y
,
w
,
h
,
tôÀ
)

12 
	}
}

14 
	gCChûdFøme
::
	$h™dÀ
(
evít
)

17  
Fl_Wödow
::
	`h™dÀ
(
evít
);

18 
	}
}

20 
	gCChûdFøme
::
	$døw
()

23 
Fl_Wödow
::
	`døw
();

24 
	}
}

	@childframe.h

2 #¥agm®
⁄˚


3 
	~<FL/Fl.H
>

4 
	~<FL/gl.h
>

5 
	~<FL/glu.h
>

6 
	~<FL/glut.H
>

7 
	~<FL/Fl_Wödow.H
>

8 
	~<FL/Fl_Míu_B¨.H
>

9 
	~<FL/Fl_Buâ⁄.H
>

10 
	~<FL/Fl_Box.H
>

11 
	~<FL/Fl_DoubÀ_Wödow.H
>

12 
	~<FL/Fl_Image.H
>

13 
	~<FL/Fl_Tûed_Image.H
>

14 
	~<FL/Fl_Image_SurÁ˚.H
>

15 
	~<FL/Fl_Gl_Wödow.H
>

17 ˛as†
	cCChûdFøme
:
public
 
Fl_Wödow
{

18 
public
:

19 
CChûdFøme
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

20 
CChûdFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

21 
døw
();

22 
h™dÀ
(
evít
);

	@cubebox.cxx

2 
	~"cubebox.h
"

3 
	~<GL/gl.h
>

4 
	~<GL/glu.h
>

5 
	~<GL/glut.h
>

6 
	~<FL/Ê_døw.H
>

7 
	~<FL/Fl_Text_Di•œy.H
>

10 #i‡
HAVE_GL


11 
	gcube_box
::
	$cube_box
(
l
, 
t
, 
w
, 
h
, c⁄° * 
«me
)

12 :
	$Fl_Gl_Wödow
(
l
,
t
,
w
,
h
,
«me
)

14 
	`öô
();

15 
	}
}

17 
	gcube_box
::~
	$cube_box
()

19 
	}
}

21 
	$cb00
(
Fl_Widgë
 *
w
, *) {

22 
w
->
	`wödow
()->
	`hide
();

23 
	}
}

25 
	gs
[255];

26 
	$myDi•œy2
()

28 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

29 
	`glCﬁ‹3f
( 0.0, 1.0, 0.0 );

30 
	`glRe˘f
(-0.5f,-0.5f,0.5f,0.5f);

31 
	`glFlush
();

32 
	}
}

33 
	gcube_box
::
	$öô
()

37 
	`whí
(
FL_WHEN_RELEASE
);

38 
œ°time
 = 0.0;

39 
Fl_Group
 *
g
 = 
√w
 
	`Fl_Group
(10, 8, 80, 20);

40 
g
->
	`box
(
FL_NO_BOX
);

41 
Fl_Buâ⁄
 *
b
 = 
√w
 
	`Fl_Buâ⁄
(10, 8, 
g
->
	`w
(), g->
	`h
(), "Close");

44 
g
->
	`íd
();

45 
g
->
	`ªsizabÀ
(
NULL
);

46 
	`mode
(
FL_RGB
 | 
FL_ALPHA
 | 
FL_DEPTH
 | 
FL_DOUBLE
);

48 
	}
}

51 
	gcube_box
::
	$InôülizeGL
()

53 
	`glCÀ¨Cﬁ‹
(.1f, .1f, .1f, 1);

54 
	`glE«bÀ
(
GL_DEPTH_TEST
);

56 
	`glCÀ¨Cﬁ‹
(0.5f,0.5f,1.0f,0.0f);

58 
	}
}

59 
	gcube_box
::
	$DøwCube
()

61 
	`glBegö
(
GL_QUADS
);

63 
	`glCﬁ‹3f
(1, 0, 0);

64 
	`glVîãx3f
(-1, 1, 1);

65 
	`glVîãx3f
(-1, -1, 1);

66 
	`glVîãx3f
(1, -1, 1);

67 
	`glVîãx3f
(1, 1, 1);

70 
	`glCﬁ‹3f
(0, 1, 0);

71 
	`glVîãx3f
(-1, 1, -1);

72 
	`glVîãx3f
(1, 1, -1);

73 
	`glVîãx3f
(1, -1, -1);

74 
	`glVîãx3f
(-1, -1, -1);

77 
	`glCﬁ‹3f
(0, 0, 1);

78 
	`glVîãx3f
(-1, 1, -1);

79 
	`glVîãx3f
(-1, 1, 1);

80 
	`glVîãx3f
(1, 1, 1);

81 
	`glVîãx3f
(1, 1, -1);

84 
	`glCﬁ‹3f
(1, 1, 0);

85 
	`glVîãx3f
(-1, -1, -1);

86 
	`glVîãx3f
(1, -1, -1);

87 
	`glVîãx3f
(1, -1, 1);

88 
	`glVîãx3f
(-1, -1, 1);

91 
	`glCﬁ‹3f
(0, 1, 1);

92 
	`glVîãx3f
(-1, 1, -1);

93 
	`glVîãx3f
(-1, -1, -1);

94 
	`glVîãx3f
(-1, -1, 1);

95 
	`glVîãx3f
(-1, 1, 1);

98 
	`glCﬁ‹3f
(1, 0, 1);

99 
	`glVîãx3f
(1, 1, 1);

100 
	`glVîãx3f
(1, -1, 1);

101 
	`glVîãx3f
(1, -1, -1);

102 
	`glVîãx3f
(1, 1, -1);

103 
	`glEnd
();

104 
	}
}

106 
	gcube_box
::
	$døw_ovîœy
()

108 
	`¢¥ötf
(
s
, 255,"‰∏ñÁïå‰Ω†Â•ΩÔºÅ");

109 
	`Ê_cﬁ‹
(
FL_BLUE
);

110 
	`Ê_f⁄t
(
FL_HELVETICA
, 14);

111 
	`Ê_døw
(
s
, 0, 20, 
	`w
(Ë- 40, 20, 
FL_ALIGN_LEFT
);

112 
	}
}

114 
	gcube_box
::
	$døw
()

116 
boﬁ
 
fú°Time
 = 
åue
;

117 i‡(
fú°Time
)

120 
fú°Time
 = 
Ál£
;

122 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

123 
	`glBegö
(
GL_TRIANGLES
);

135 
	`glEnd
();

136 
	`glFlush
();

137 
	}
}

139 
	gcube_box
::
	$h™dÀ
(
e
) {

140 
e
) {

141 
FL_ENTER
: 
	`curs‹
(
FL_CURSOR_CROSS
); ;

142 
FL_LEAVE
: 
	`curs‹
(
FL_CURSOR_DEFAULT
); ;

144  
Fl_Gl_Wödow
::
	`h™dÀ
(
e
);

145 
	}
}

	@cubebox.h

2 #¥agm®
⁄˚


3 
	~<c⁄fig.h
>

5 
	~<FL/Fl.H
>

6 
	~<FL/Fl_Wödow.H
>

7 
	~<FL/Fl_Box.H
>

8 
	~<FL/Fl_Buâ⁄.H
>

9 
	~<FL/Fl_Radio_Light_Buâ⁄.H
>

10 
	~<FL/Fl_Slidî.H
>

11 
	~<°dlib.h
>

13 #i‡!
HAVE_GL


14 ˛as†
	ccube_box
 : 
public
 
Fl_Box
 {

15 
public
:

16 
œ°time
;

17 
	mwúe
;

18 
	msize
;

19 
	m•ìd
;

20 
	$cube_box
(
x
,
y
,
w
,
h
,c⁄° *
l
=0)

21 :
	$Fl_Box
(
FL_DOWN_BOX
,
x
,
y
,
w
,
h
,
l
){

22 
	`œbñ
("This demo does\nnot work without GL");

24 
	}
};

26 
	~<FL/Fl_Gl_Wödow.H
>

27 
	~<FL/gl.h
>

29 ˛as†
	ccube_box
 : 
public
 
Fl_Gl_Wödow
 {

30 
døw
();

31 
h™dÀ
();

32 
InôülizeGL
();

33 
DøwCube
();

34 
	mpublic
:

35 
œ°time
;

36 
	mwúe
;

37 
	msize
;

38 
	m•ìd
;

39 
cube_box
(
x
,
y
,
w
,
h
,c⁄° *
l
=0);

40 
døw_ovîœy
();

41 
	mvútuÆ
 ~
cube_box
();

42 
öô
();

47 
	#v3f
(
x
Ë
	`glVîãx3fv
(x)

	)

	@flstring.c

19 
	~"Ê°rög.h
"

26 
size_t


27 
	$Ê_°æˇt
(*
d°
,

28 c⁄° *
§c
,

29 
size_t
 
size
) {

30 
size_t
 
§˛í
;

31 
size_t
 
d°Àn
;

38 
d°Àn
 = 
	`°æí
(
d°
);

39 
size
 -
d°Àn
 + 1;

41 i‡(!
size
Ë (
d°Àn
);

47 
§˛í
 = 
	`°æí
(
§c
);

53 i‡(
§˛í
 > 
size
) srclen = size;

55 
	`mem˝y
(
d°
 + 
d°Àn
, 
§c
, 
§˛í
);

56 
d°
[
d°Àn
 + 
§˛í
] = '\0';

58  (
d°Àn
 + 
§˛í
);

59 
	}
}

66 
size_t


67 
	$Ê_°æ˝y
(*
d°
,

68 c⁄° *
§c
,

69 
size_t
 
size
) {

70 
size_t
 
§˛í
;

77 
size
 --;

79 
§˛í
 = 
	`°æí
(
§c
);

85 i‡(
§˛í
 > 
size
) srclen = size;

87 
	`mem˝y
(
d°
, 
§c
, 
§˛í
);

88 
d°
[
§˛í
] = '\0';

90  (
§˛í
);

91 
	}
}

93 
	#C_RANGE
(
c
,
l
,
r
Ë–(cË>÷Ë&& (cË<‘Ë)

	)

99 
	$Ê_ascii_°rˇ£cmp
(c⁄° *
s
, c⁄° *
t
) {

100 i‡(!
s
 || !
t
)  (s==t ? 0 : (!s ? -1 : +1));

102 ;*
s
 && *
t
; s++,t++) {

103 i‡(*
s
 =*
t
) ;

104 i‡(*
s
 < *
t
) {

105 i‡–(*
s
+0x20)!=*
t
 || !
	`C_RANGE
(*s,'A','Z') )  -1;

107 i‡–(*
s
-0x20)!=*
t
 || !
	`C_RANGE
(*s,'a','z') )  +1;

110  (*
s
==*
t
) ? 0 : (*t ? -1 : +1);

111 
	}
}

	@flstring.h

19 #i‚de‡
Ê°rög_h


20 
	#Ê°rög_h


	)

22 
	~<FL/Fl_Exp‹t.H
>

23 
	~<c⁄fig.h
>

24 
	~<°dio.h
>

25 
	~<°d¨g.h
>

26 
	~<°rög.h
>

27 #ifde‡
HAVE_STRINGS_H


28 
	~<°rögs.h
>

30 
	~<˘y≥.h
>

38 #ifde‡
ödex


39 #unde‡
ödex


42 #i‡
deföed
(
WIN32
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__MINGW32__
)

43 
	#°rˇ£cmp
(
s
,
t
Ë
	`_°ricmp
((s), (t))

	)

44 
	#°∫ˇ£cmp
(
s
,
t
,
n
Ë
	`_°∫icmp
((s), (t), (n))

	)

49 #i‚de‡
__WATCOMC__


50 
	#°rdup
 
_°rdup


	)

51 
	#u∆ök
 
_u∆ök


	)

53 #ñi‡
deföed
(
__EMX__
)

54 
	#°rˇ£cmp
(
s
,
t
Ë
	`°ricmp
((s), (t))

	)

55 
	#°∫ˇ£cmp
(
s
,
t
,
n
Ë
	`°∫icmp
((s), (t), (n))

	)

58 #ifde‡
__˝lu•lus


62 
FL_EXPORT
 
Ê_¢¥ötf
(*, 
size_t
, const *, ...);

63 #i‡!
HAVE_SNPRINTF


64 
	#¢¥ötf
 
Ê_¢¥ötf


	)

67 
FL_EXPORT
 
Ê_v¢¥ötf
(*, 
size_t
, c⁄° *, 
va_li°
 
≠
);

68 #i‡!
HAVE_VSNPRINTF


69 
	#v¢¥ötf
 
Ê_v¢¥ötf


	)

77 
FL_EXPORT
 
size_t
 
Ê_°æˇt
(*, const *, size_t);

78 #i‡!
HAVE_STRLCAT


79 
	#°æˇt
 
Ê_°æˇt


	)

82 
FL_EXPORT
 
size_t
 
Ê_°æ˝y
(*, const *, size_t);

83 #i‡!
HAVE_STRLCPY


84 
	#°æ˝y
 
Ê_°æ˝y


	)

91 
FL_EXPORT
 
Ê_ascii_°rˇ£cmp
(c⁄° *
s
, c⁄° *
t
);

93 #ifde‡
__˝lu•lus


	@include/auto_tchar.h

34 #i‚de‡
__AUTO_TCHAR_H_INCLUDED


35 
	#__AUTO_TCHAR_H_INCLUDED


	)

38 #unde‡
__AUTO_TCHAR_H_USESYS


39 #i‡
deföed
(
_MSC_VER
)

40 
	#__AUTO_TCHAR_H_USESYS


	)

41 #ñi‡
deföed
(
__BORLANDC__
)

42 
	#__AUTO_TCHAR_H_USESYS


	)

43 #ñi‡
deföed
(
_WIN32
)||deföed(
_WIN64
)||deföed(
__MINGW32__
)||deföed(
__MINGW64__
)||deföed(
__CYGWIN__
)

45 
	#__AUTO_TCHAR_H_USESYS


	)

51 #ifde‡
__AUTO_TCHAR_H_USESYS


53 
	~<tch¨.h
>

55 #i‡
deföed
(
__BORLANDC__
Ë&& !deföed(
_TCHAR_DEFINED
)

56 
_TCHAR
 
	tTCHAR
, *
	tPTCHAR
;

57 
_TCHAR
 
	tTBYTE
, *
	tPTBYTE
;

58 
	#_TCHAR_DEFINED


	)

63 #i‚def 
_TCHAR_H_


64 
	#_TCHAR_H_


	)

73 #ifdef 
_UNICODE


78 
	~<wch¨.h
>

84 #i‚de‡
_TCHAR_DEFINED


85 #i‚de‡
RC_INVOKED


86 
wch¨_t
 
	tTCHAR
;

87 
wch¨_t
 
	t_TCHAR
;

89 
	#_TCHAR_DEFINED


	)

96 
	#_TEOF
 
WEOF


	)

104 
	#__TEXT
(
q
Ë
L
##
	)
q

108 
	#_tmaö
 
wmaö


	)

109 
	#_tWöMaö
 
wWöMaö


	)

110 
	#_ãnvú⁄
 
_wívú⁄


	)

111 
	#__èrgv
 
__w¨gv


	)

117 
	#_çrötf
 
w¥ötf


	)

118 
	#_·¥ötf
 
fw¥ötf


	)

119 
	#_°¥ötf
 
sw¥ötf


	)

120 
	#_¢çrötf
 
_¢w¥ötf


	)

121 
	#_vçrötf
 
vw¥ötf


	)

122 
	#_v·¥ötf
 
vfw¥ötf


	)

123 
	#_v°¥ötf
 
vsw¥ötf


	)

124 
	#_v¢çrötf
 
_v¢w¥ötf


	)

125 
	#_vs˘¥ötf
 
_vscw¥ötf


	)

126 
	#_tsˇnf
 
wsˇnf


	)

127 
	#_·sˇnf
 
fwsˇnf


	)

128 
	#_°sˇnf
 
swsˇnf


	)

129 
	#_fgëtc
 
fgëwc


	)

130 
	#_fgëtch¨
 
_fgëwch¨


	)

131 
	#_fgëts
 
fgëws


	)

132 
	#_Âuâc
 
Âutwc


	)

133 
	#_Âuâch¨
 
_Âutwch¨


	)

134 
	#_Âuâs
 
Âutws


	)

135 
	#_gëtc
 
gëwc


	)

136 
	#_gëts
 
_gëws


	)

137 
	#_puâc
 
putwc


	)

138 
	#_puâch¨
 
putwch¨


	)

139 
	#_puâs
 
_putws


	)

140 
	#_ungëtc
 
ungëwc


	)

141 
	#_tc°od
 
wc°od


	)

142 
	#_tc°ﬁ
 
wc°ﬁ


	)

143 
	#_tc°oul
 
wc°oul


	)

144 
	#_ôŸ
 
_ôow


	)

145 
	#_…Ÿ
 
_…ow


	)

146 
	#_u…Ÿ
 
_u…ow


	)

147 
	#_âoi
 
_wtoi


	)

148 
	#_âﬁ
 
_wtﬁ


	)

149 
	#_tcsˇt
 
wcsˇt


	)

150 
	#_tcschr
 
wcschr


	)

151 
	#_tcscmp
 
wcscmp


	)

152 
	#_tcs˝y
 
wcs˝y


	)

153 
	#_tcsc•n
 
wcsc•n


	)

154 
	#_tc¶í
 
wc¶í


	)

155 
	#_tc¢ˇt
 
wc¢ˇt


	)

156 
	#_tc¢cmp
 
wc¢cmp


	)

157 
	#_tc¢˝y
 
wc¢˝y


	)

158 
	#_tc•brk
 
wc•brk


	)

159 
	#_tc§chr
 
wc§chr


	)

160 
	#_tcs•n
 
wcs•n


	)

161 
	#_tcs°r
 
wcs°r


	)

162 
	#_tc°ok
 
wc°ok


	)

163 
	#_tcsdup
 
_wcsdup


	)

164 
	#_tcsicmp
 
_wcsicmp


	)

165 
	#_tc¢icmp
 
_wc¢icmp


	)

166 
	#_tc¢£t
 
_wc¢£t


	)

167 
	#_tc§ev
 
_wc§ev


	)

168 
	#_tcs£t
 
_wcs£t


	)

169 
	#_tc¶wr
 
_wc¶wr


	)

170 
	#_tcsu¥
 
_wcsu¥


	)

171 
	#_tcsx‰m
 
wcsx‰m


	)

172 
	#_tcscﬁl
 
wcscﬁl


	)

173 
	#_tcsicﬁl
 
_wcsicﬁl


	)

174 
	#_i°Æpha
 
iswÆpha


	)

175 
	#_i°uµî
 
iswuµî


	)

176 
	#_i°lowî
 
iswlowî


	)

177 
	#_i°digô
 
iswdigô


	)

178 
	#_i°xdigô
 
iswxdigô


	)

179 
	#_i°•a˚
 
isw•a˚


	)

180 
	#_i°pun˘
 
iswpun˘


	)

181 
	#_i°Ænum
 
iswÆnum


	)

182 
	#_i°¥öt
 
isw¥öt


	)

183 
	#_i°gøph
 
iswgøph


	)

184 
	#_i°˙ål
 
isw˙ål


	)

185 
	#_i°ascii
 
iswascii


	)

186 
	#_tŸuµî
 
towuµî


	)

187 
	#_tŸlowî
 
towlowî


	)

188 
	#_tcs·ime
 
wcs·ime


	)

190 
	#_tcsdec
 
_wcsdec


	)

191 
	#_tcsöc
 
_wcsöc


	)

192 
	#_tc¢b˙t
 
_wc¢˙t


	)

193 
	#_tc¢c˙t
 
_wc¢˙t


	)

194 
	#_tc¢extc
 
_wc¢extc


	)

195 
	#_tc¢öc
 
_wc¢öc


	)

196 
	#_tcs•≈
 
_wcs•≈


	)

197 
	#_wcsdec
(
_wcs1
, 
_wcs2
Ë((_wcs1)>=(_wcs2Ë? 
NULL
 : (_wcs2)-1)

	)

198 
	#_wcsöc
(
_wcs
Ë((_wcs)+1)

	)

199 
	#_wc¢extc
(
_wcs
Ë((Ë*(_wcs))

	)

200 
	#_wc¢öc
(
_wcs
, 
_öc
Ë(((_wcs)+(_öc)))

	)

201 
	#_wc¢˙t
(
_wcs
, 
_˙t
Ë((
	`wc¶í
(_wcs)>_˙tË? 
_cou¡
 : wc¶í(_wcs))

	)

202 
	#_wcs•≈
(
_wcs1
, 
_wcs2
Ë((*((_wcs1)+
	`wcs•n
(_wcs1,_wcs2))Ë? ((_wcs1)+wcs•n(_wcs1,_wcs2)Ë: 
NULL
)

	)

209 
	#_âoi64
 
_wtoi64


	)

210 
	#_i64tŸ
 
_i64tow


	)

211 
	#_ui64tŸ
 
_ui64tow


	)

212 
	#_ès˘ime
 
_was˘ime


	)

213 
	#_t˘ime
 
_w˘ime


	)

214 #i‡
__MSVCRT_VERSION__
 >= 0x0800

215 
	#_t˘ime32
 
_w˘ime32


	)

216 
	#_t˘ime64
 
_w˘ime64


	)

218 
	#_t°rd©e
 
_w°rd©e


	)

219 
	#_t°πime
 
_w°πime


	)

220 
	#_tutime
 
_wutime


	)

221 #i‡
__MSVCRT_VERSION__
 >= 0x0800

222 
	#_tutime64
 
_wutime64


	)

223 
	#_tutime32
 
_wutime32


	)

225 
	#_tc¢ccﬁl
 
_wc¢cﬁl


	)

226 
	#_tc¢cﬁl
 
_wc¢cﬁl


	)

227 
	#_tc¢cicﬁl
 
_wc¢icﬁl


	)

228 
	#_tc¢icﬁl
 
_wc¢icﬁl


	)

229 
	#_èc˚ss
 
_wac˚ss


	)

230 
	#_tchmod
 
_wchmod


	)

231 
	#_t¸ót
 
_w¸ót


	)

232 
	#_tfödfú°
 
_wfödfú°


	)

233 
	#_tföd√xt
 
_wföd√xt


	)

234 #i‡
__MSVCRT_VERSION__
 >= 0x0800

235 
	#_tfödfú°64
 
_wfödfú°64


	)

236 
	#_tfödfú°32
 
_wfödfú°32


	)

237 
	#_tföd√xt64
 
_wföd√xt64


	)

238 
	#_tföd√xt32
 
_wföd√xt32


	)

240 
	#_tfd›í
 
_wfd›í


	)

241 
	#_tf›í
 
_wf›í


	)

242 
	#_t‰e›í
 
_w‰e›í


	)

243 
	#_tfs›í
 
_wfs›í


	)

244 
	#_tgëív
 
_wgëív


	)

245 
	#_çuãnv
 
_wpuãnv


	)

246 
	#_t£¨chív
 
_w£¨chív


	)

247 
	#_tsy°em
 
_wsy°em


	)

248 
	#_tmakï©h
 
_wmakï©h


	)

249 
	#_t•lô∑th
 
_w•lô∑th


	)

250 
	#_tfuŒ∑th
 
_wfuŒ∑th


	)

251 
	#_tmkãmp
 
_wmkãmp


	)

252 
	#_t›í
 
_w›í


	)

253 
	#_åemove
 
_wªmove


	)

254 
	#_åíame
 
_wª«me


	)

255 
	#_ts›í
 
_ws›í


	)

256 
	#_t£éoˇÀ
 
_w£éoˇÀ


	)

257 
	#_tu∆ök
 
_wu∆ök


	)

258 
	#_tfödd©a_t
 
_wfödd©a_t


	)

259 
	#_tfödfú°i64
 
_wfödfú°i64


	)

260 
	#_tföd√xti64
 
_wföd√xti64


	)

261 
	#_tfödd©ai64_t
 
_wfödd©ai64_t


	)

262 #i‡
__MSVCRT_VERSION__
 >= 0x0601

263 
	#_tfödd©a64_t
 
_wfödd©a64_t


	)

265 #i‡
__MSVCRT_VERSION__
 >= 0x0800

266 
	#_tfödd©a32_t
 
_wfödd©a32_t


	)

267 
	#_tfödd©a32i64_t
 
_wfödd©a32i64_t


	)

268 
	#_tfödd©a64i32_t
 
_wfödd©a64i32_t


	)

269 
	#_tfödfú°32i64
 
_wfödfú°32i64


	)

270 
	#_tfödfú°64i32
 
_wfödfú°64i32


	)

271 
	#_tföd√xt32i64
 
_wföd√xt32i64


	)

272 
	#_tföd√xt64i32
 
_wföd√xt64i32


	)

274 
	#_tchdú
 
_wchdú


	)

275 
	#_tgëcwd
 
_wgëcwd


	)

276 
	#_tgëdcwd
 
_wgëdcwd


	)

277 
	#_tmkdú
 
_wmkdú


	)

278 
	#_åmdú
 
_wrmdú


	)

279 
	#_t°©
 
_w°©


	)

280 
	#_t°©i64
 
_w°©i64


	)

281 
	#_t°©64
 
_w°©64


	)

282 #i‡
__MSVCRT_VERSION__
 >= 0x0800

283 
	#_t°©32
 
_w°©32


	)

284 
	#_t°©32i64
 
_w°©32i64


	)

285 
	#_t°©64i32
 
_w°©64i32


	)

290 
	#_tdúít
 
_wdúít


	)

291 
	#_TDIR
 
_WDIR


	)

292 
	#_t›ídú
 
_w›ídú


	)

293 
	#_t˛o£dú
 
_w˛o£dú


	)

294 
	#_åóddú
 
_wªaddú


	)

295 
	#_åewöddú
 
_wªwöddú


	)

296 
	#_âñldú
 
_wãŒdú


	)

297 
	#_t£ekdú
 
_w£ekdú


	)

304 #i‚de‡
_TCHAR_DEFINED


305 #i‚de‡
RC_INVOKED


306 
	tTCHAR
;

307 
	t_TCHAR
;

309 
	#_TCHAR_DEFINED


	)

315 
	#_TEOF
 
EOF


	)

323 
	#__TEXT
(
q
Ë
	)
q

326 
	#_tmaö
 
maö


	)

327 
	#_tWöMaö
 
WöMaö


	)

328 
	#_ãnvú⁄
 
_ívú⁄


	)

329 
	#__èrgv
 
__¨gv


	)

335 
	#_çrötf
 
¥ötf


	)

336 
	#_·¥ötf
 
Ârötf


	)

337 
	#_°¥ötf
 
•rötf


	)

338 
	#_¢çrötf
 
_¢¥ötf


	)

339 
	#_vçrötf
 
v¥ötf


	)

340 
	#_v·¥ötf
 
vÂrötf


	)

341 
	#_v°¥ötf
 
v•rötf


	)

342 
	#_v¢çrötf
 
_v¢¥ötf


	)

343 
	#_vs˘¥ötf
 
_vs˝rötf


	)

344 
	#_tsˇnf
 
sˇnf


	)

345 
	#_·sˇnf
 
fsˇnf


	)

346 
	#_°sˇnf
 
ssˇnf


	)

347 
	#_fgëtc
 
fgëc


	)

348 
	#_fgëtch¨
 
_fgëch¨


	)

349 
	#_fgëts
 
fgës


	)

350 
	#_Âuâc
 
Âutc


	)

351 
	#_Âuâch¨
 
_Âutch¨


	)

352 
	#_Âuâs
 
Âuts


	)

353 
	#_tfd›í
 
_fd›í


	)

354 
	#_tf›í
 
f›í


	)

355 
	#_t‰e›í
 
‰e›í


	)

356 
	#_tfs›í
 
_fs›í


	)

357 
	#_tgëív
 
gëív


	)

358 
	#_çuãnv
 
_puãnv


	)

359 
	#_t£¨chív
 
_£¨chív


	)

360 
	#_tsy°em
 
sy°em


	)

361 
	#_tmakï©h
 
_makï©h


	)

362 
	#_t•lô∑th
 
_•lô∑th


	)

363 
	#_tfuŒ∑th
 
_fuŒ∑th


	)

364 
	#_gëtc
 
gëc


	)

365 
	#_gëts
 
gës


	)

366 
	#_puâc
 
putc


	)

367 
	#_puâch¨
 
putch¨


	)

368 
	#_puâs
 
puts


	)

369 
	#_ungëtc
 
ungëc


	)

370 
	#_tc°od
 
°πod


	)

371 
	#_tc°ﬁ
 
°πﬁ


	)

372 
	#_tc°oul
 
°πoul


	)

373 
	#_ôŸ
 
_ôﬂ


	)

374 
	#_…Ÿ
 
_…ﬂ


	)

375 
	#_u…Ÿ
 
_u…ﬂ


	)

376 
	#_âoi
 
©oi


	)

377 
	#_âﬁ
 
©ﬁ


	)

378 
	#_tcsˇt
 
°rˇt


	)

379 
	#_tcschr
 
°rchr


	)

380 
	#_tcscmp
 
°rcmp


	)

381 
	#_tcs˝y
 
°r˝y


	)

382 
	#_tcsc•n
 
°rc•n


	)

383 
	#_tc¶í
 
°æí


	)

384 
	#_tc¢ˇt
 
°∫ˇt


	)

385 
	#_tc¢cmp
 
°∫cmp


	)

386 
	#_tc¢˝y
 
°∫˝y


	)

387 
	#_tc•brk
 
°Ωbrk


	)

388 
	#_tc§chr
 
°ºchr


	)

389 
	#_tcs•n
 
°r•n


	)

390 
	#_tcs°r
 
°r°r


	)

391 
	#_tc°ok
 
°πok


	)

392 
	#_tcsdup
 
_°rdup


	)

393 
	#_tcsicmp
 
_°ricmp


	)

394 
	#_tc¢icmp
 
_°∫icmp


	)

395 
	#_tc¢£t
 
_°∫£t


	)

396 
	#_tc§ev
 
_°ºev


	)

397 
	#_tcs£t
 
_°r£t


	)

398 
	#_tc¶wr
 
_°æwr


	)

399 
	#_tcsu¥
 
_°ru¥


	)

400 
	#_tcsx‰m
 
°rx‰m


	)

401 
	#_tcscﬁl
 
°rcﬁl


	)

402 
	#_tcsicﬁl
 
_°ricﬁl


	)

403 
	#_i°Æpha
 
ißÕha


	)

404 
	#_i°uµî
 
isuµî


	)

405 
	#_i°lowî
 
i¶owî


	)

406 
	#_i°digô
 
isdigô


	)

407 
	#_i°xdigô
 
isxdigô


	)

408 
	#_i°•a˚
 
is•a˚


	)

409 
	#_i°pun˘
 
i•un˘


	)

410 
	#_i°Ænum
 
iß um


	)

411 
	#_i°¥öt
 
i•röt


	)

412 
	#_i°gøph
 
isgøph


	)

413 
	#_i°˙ål
 
is˙ål


	)

414 
	#_i°ascii
 
ißscii


	)

415 
	#_tŸuµî
 
touµî


	)

416 
	#_tŸlowî
 
tﬁowî


	)

417 
	#_ès˘ime
 
as˘ime


	)

418 
	#_t˘ime
 
˘ime


	)

419 #i‡
__MSVCRT_VERSION__
 >= 0x0800

420 
	#_t˘ime32
 
_˘ime32


	)

421 
	#_t˘ime64
 
_˘ime64


	)

423 
	#_t°rd©e
 
_°rd©e


	)

424 
	#_t°πime
 
_°πime


	)

425 
	#_tutime
 
_utime


	)

426 #i‡
__MSVCRT_VERSION__
 >= 0x0800

427 
	#_tutime64
 
_utime64


	)

428 
	#_tutime32
 
_utime32


	)

430 
	#_tcs·ime
 
°r·ime


	)

432 
	#_tcsdec
 
_°rdec


	)

433 
	#_tcsöc
 
_°röc


	)

434 
	#_tc¢b˙t
 
_°∫˙t


	)

435 
	#_tc¢c˙t
 
_°∫˙t


	)

436 
	#_tc¢extc
 
_°∫extc


	)

437 
	#_tc¢öc
 
_°∫öc


	)

438 
	#_tcs•≈
 
_°r•≈


	)

439 
	#_°rdec
(
_°r1
, 
_°r2
Ë((_°r1)>=(_°r2Ë? 
NULL
 : (_°r2)-1)

	)

440 
	#_°röc
(
_°r
Ë((_°r)+1)

	)

441 
	#_°∫extc
(
_°r
Ë((Ë*(_°r))

	)

442 
	#_°∫öc
(
_°r
, 
_öc
Ë(((_°r)+(_öc)))

	)

443 
	#_°∫˙t
(
_°r
, 
_˙t
Ë((
	`°æí
(_°r)>_˙tË? 
_cou¡
 : såÀn(_°r))

	)

444 
	#_°r•≈
(
_°r1
, 
_°r2
Ë((*((_°r1)+
	`°r•n
(_°r1,_°r2))Ë? ((_°r1)+°r•n(_°r1,_°r2)Ë: 
NULL
)

	)

446 
	#_tchmod
 
_chmod


	)

447 
	#_t¸ót
 
_¸ót


	)

448 
	#_tfödfú°
 
_födfú°


	)

449 
	#_tföd√xt
 
_föd√xt


	)

450 #i‡
__MSVCRT_VERSION__
 >= 0x0800

451 
	#_tfödfú°64
 
_födfú°64


	)

452 
	#_tfödfú°32
 
_födfú°32


	)

453 
	#_tföd√xt64
 
_föd√xt64


	)

454 
	#_tföd√xt32
 
_föd√xt32


	)

456 
	#_tmkãmp
 
_mkãmp


	)

457 
	#_t›í
 
_›í


	)

458 
	#_èc˚ss
 
_ac˚ss


	)

459 
	#_åemove
 
ªmove


	)

460 
	#_åíame
 
ª«me


	)

461 
	#_ts›í
 
_s›í


	)

462 
	#_t£éoˇÀ
 
£éoˇÀ


	)

463 
	#_tu∆ök
 
_u∆ök


	)

464 
	#_tfödd©a_t
 
_född©a_t


	)

465 
	#_tchdú
 
_chdú


	)

466 
	#_tgëcwd
 
_gëcwd


	)

467 
	#_tgëdcwd
 
_gëdcwd


	)

468 
	#_tmkdú
 
_mkdú


	)

469 
	#_åmdú
 
_rmdú


	)

470 
	#_t°©
 
_°©


	)

474 
	#_âoi64
 
_©oi64


	)

475 
	#_i64tŸ
 
_i64tﬂ


	)

476 
	#_ui64tŸ
 
_ui64tﬂ


	)

477 
	#_tc¢ccﬁl
 
_°∫cﬁl


	)

478 
	#_tc¢cﬁl
 
_°∫cﬁl


	)

479 
	#_tc¢cicﬁl
 
_°∫icﬁl


	)

480 
	#_tc¢icﬁl
 
_°∫icﬁl


	)

481 
	#_tfödfú°i64
 
_födfú°i64


	)

482 
	#_tföd√xti64
 
_föd√xti64


	)

483 
	#_tfödd©ai64_t
 
_född©ai64_t


	)

484 #i‡
__MSVCRT_VERSION__
 >= 0x0601

485 
	#_tfödd©a64_t
 
_född©a64_t


	)

487 #i‡
__MSVCRT_VERSION__
 >= 0x0800

488 
	#_tfödd©a32_t
 
_född©a32_t


	)

489 
	#_tfödd©a32i64_t
 
_född©a32i64_t


	)

490 
	#_tfödd©a64i32_t
 
_född©a64i32_t


	)

491 
	#_tfödfú°32i64
 
_födfú°32i64


	)

492 
	#_tfödfú°64i32
 
_födfú°64i32


	)

493 
	#_tföd√xt32i64
 
_föd√xt32i64


	)

494 
	#_tföd√xt64i32
 
_föd√xt64i32


	)

496 
	#_t°©i64
 
_°©i64


	)

497 
	#_t°©64
 
_°©64


	)

498 #i‡
__MSVCRT_VERSION__
 >= 0x0800

499 
	#_t°©32
 
_°©32


	)

500 
	#_t°©32i64
 
_°©32i64


	)

501 
	#_t°©64i32
 
_°©64i32


	)

506 
	#_tdúít
 
dúít


	)

507 
	#_TDIR
 
DIR


	)

508 
	#_t›ídú
 
›ídú


	)

509 
	#_t˛o£dú
 
˛o£dú


	)

510 
	#_åóddú
 
ªaddú


	)

511 
	#_åewöddú
 
ªwöddú


	)

512 
	#_âñldú
 
ãŒdú


	)

513 
	#_t£ekdú
 
£ekdú


	)

521 
	#_TEXT
(
x
Ë
	`__TEXT
(x)

	)

522 
	#_T
(
x
Ë
	`__TEXT
(x)

	)

	@include/macrodef.h

2 #¥agm®
⁄˚


4 #ifde‡
__LINUX__


5 
	~<sys/ty≥s.h
>

8 #i‚de‡
IN


9 
	#IN


	)

12 #i‚de‡
OUT


13 
	#OUT


	)

16 #i‚de‡
_ULONGLONG_


17 
__öt64
 
	tLONGLONG
;

19 
	t__öt64
 
	tULONGLONG
;

21 
LONGLONG
 *
	tPLONGLONG
;

23 
ULONGLONG
 *
	tPULONGLONG
;

	@main.cxx

19 
	~<FL/Fl.H
>

20 
	~<FL/gl.h
>

21 
	~<FL/glu.h
>

22 
	~<FL/glut.H
>

23 
	~<FL/Fl_Wödow.H
>

24 
	~<FL/Fl_Míu_B¨.H
>

25 
	~<FL/Fl_Buâ⁄.H
>

26 
	~<FL/Fl_Box.H
>

27 
	~<FL/Fl_DoubÀ_Wödow.H
>

28 
	~<FL/Fl_Image.H
>

29 
	~<FL/Fl_Tûed_Image.H
>

30 
	~<FL/Fl_Image_SurÁ˚.H
>

31 
	~<FL/Fl_Gl_Wödow.H
>

32 
	~<FL/Ê_ask.H
>

33 
	~"ã°/pixm≠s/tûe.xpm
"

34 
	~"èsk‰ame.h
"

35 
	~"maö‰ame.h
"

38 
Fl_RGB_Image
* 
	$¥ï¨e_sh≠e
(
x
, 
y
, 
w
, 
h
)

41 
Fl_Image_SurÁ˚
 *
surf
 = 
√w
 
	`Fl_Image_SurÁ˚
(
w
, 
h
);

42 
Fl_SurÁ˚_Devi˚
* 
cuºít
 = Fl_SurÁ˚_Devi˚::
	`surÁ˚
();

45 
surf
->
	`£t_cuºít
();

47 
	`Ê_cﬁ‹
(
FL_BLACK
);

48 
	`Ê_ª˘f
(-1+
x
, -1+
y
, 
w
+2, 
h
+2);

53 
Fl_RGB_Image
* 
img
 = 
surf
->
	`image
();

54 
dñëe
 
surf
;

55 
cuºít
->
	`£t_cuºít
();

56  
img
;

57 
	}
}

60 
	$MyMíuCÆlback
(
Fl_Widgë
 *
w
, *) {

61 
Fl_Míu_B¨
 *
b¨
 = (Fl_Míu_B¨*)
w
;

62 c⁄° 
Fl_Míu_Iãm
 *
ôem
 = 
b¨
->
	`mvÆue
();

64 
ù©h
[256]; 
b¨
->
	`ôem_∑th«me
(ipath, (ipath));

66 
	`Ârötf
(
°dîr
, "ˇŒback: YouÖicked '%s'", 
ôem
->
	`œbñ
());

67 
	`Ârötf
(
°dîr
, ", iãm_∑th«me(Ëi†'%s'", 
ù©h
);

69 i‡–
ôem
->
Êags
 & (
FL_MENU_RADIO
|
FL_MENU_TOGGLE
) ) {

70 
	`Ârötf
(
°dîr
, ", vÆuêi†%s", 
ôem
->
	`vÆue
()?"on":"off");

72 
	`Ârötf
(
°dîr
, "\n");

73 i‡–
	`°rcmp
(
ôem
->
	`œbñ
(), "Google") == 0 ) { ; }

74 i‡–
	`°rcmp
(
ôem
->
	`œbñ
(), "&Quô"Ë=0 ) { 
	`exô
(0); }

75 
	}
}

77 
	~"ui/imgd©a.h
"

79 
	$maö
(
¨gc
, **
¨gv
)

84 c⁄° 
dimW
 = 628+150;

85 c⁄° 
dimH
 = 642;

86 c⁄° 
míub¨H
 = 
MENUBARH
;

87 
x
,
y
,
w
,
h
;

88 
Fl
::
	`s¸ìn_xywh
 (
x
,
y
,
w
,
h
);

89 
nS¸ìnW
 = 
w
;

90 
nS¸ìnH
 = 
h
;

91 
x
 = (
nS¸ìnW
-
dimW
)/2;

92 
y
 = (
nS¸ìnH
-
dimH
)/2;

104 
CMaöFøme
 
	`wödow
(
x
,
y
,
dimW
, 
dimH
);

106 
wödow
.
	`box
(
FL_NO_BOX
);

108 
Fl_RGB_Image
 
	`ic⁄
(
maö_≤g
,96,96,4);

112 
wödow
.
	`ic⁄
(&
ic⁄
);

114 
wödow
.
	`œbñ
("‰ªñÂ±±ÂÆöÊó∂ v1.0.0.7");

123 
wödow
.
	`show
(
¨gc
, 
¨gv
);

126 
Fl
::
	`run
();

128 
	}
}

	@mainframe.cxx

3 
	~"maö‰ame.h
"

4 
	~<FL/Ê_ask.H
>

6 
	~"ã°/pixm≠s/tûe.xpm
"

7 
	~"about_∑√l.h
"

8 
	~"√wèsk_‰ame.h
"

9 
	~"èsk‰ame.h
"

10 
	~<as£π.h
>

11 
	~"Fl_DøbÀ_Wödow.h
"

14 
	$MyMíuCÆlback2
(
Fl_Widgë
 *
w
, *) {

15 
Fl_Míu_B¨
 *
b¨
 = (Fl_Míu_B¨*)
w
;

16 c⁄° 
Fl_Míu_Iãm
 *
ôem
 = 
b¨
->
	`mvÆue
();

18 
ù©h
[256]; 
b¨
->
	`ôem_∑th«me
(ipath, (ipath));

20 
	`Ârötf
(
°dîr
, "ˇŒback: YouÖicked '%s'", 
ôem
->
	`œbñ
());

21 
	`Ârötf
(
°dîr
, ", iãm_∑th«me(Ëi†'%s'", 
ù©h
);

23 i‡–
ôem
->
Êags
 & (
FL_MENU_RADIO
|
FL_MENU_TOGGLE
) ) {

24 
	`Ârötf
(
°dîr
, ", vÆuêi†%s", 
ôem
->
	`vÆue
()?"on":"off");

26 
	`Ârötf
(
°dîr
, "\n");

27 i‡–
	`°rcmp
(
ôem
->
	`œbñ
(), "Google") == 0 ) { ; }

28 i‡–
	`°rcmp
(
ôem
->
	`œbñ
(), "&Quô"Ë=0 ) { 
	`exô
(0); }

31 
	}
}

34 
Fl_Míu_Iãm
 
	gôems
[] = {

38 {"ËÆæÁΩÆ",0,
MyMíuCÆlback2
,0,
FL_SUBMENU
},

40 { "&Hñp", 0, 0, 0, 
FL_SUBMENU
 },

41 {"ÂÖ≥‰∫é",
FL_COMMAND
 ,
MyMíuCÆlback2
,0,0},

46 { "&Game", 0, 0, 0, 
FL_SUBMENU
 },

47 { "&New Game", 
FL_COMMAND
 | 'n', 
MyMíuCÆlback2
, 0, 
FL_MENU_DIVIDER
 },

48 { "&Check Game", 
FL_COMMAND
 | 'c', 
MyMíuCÆlback2
, 0, 0 },

49 { "&Re°¨àGame", 
FL_COMMAND
 | 'r', 
MyMíuCÆlback2
, 0, 0 },

50 { "&SﬁvêGame", 
FL_COMMAND
 | 's', 
MyMíuCÆlback2
, 0, 
FL_MENU_DIVIDER
 },

51 { "&Upd©êHñ≥rs", 0, 
MyMíuCÆlback2
, 0, 0 },

52 { "&Muã Sound", 
FL_COMMAND
 | 'm', 
MyMíuCÆlback2
, 0, 
FL_MENU_TOGGLE
 | 
FL_MENU_DIVIDER
 },

53 { "&Quô", 
FL_COMMAND
 | 'q', 
MyMíuCÆlback2
, 0, 0 },

55 { "&Difficu…y", 0, 0, 0, 
FL_SUBMENU
 },

56 { "&Easy", 0, 
MyMíuCÆlback2
, (*)"0", 
FL_MENU_RADIO
 },

57 { "&Medium", 0, 
MyMíuCÆlback2
, (*)"1", 
FL_MENU_RADIO
 },

58 { "&H¨d", 0, 
MyMíuCÆlback2
, (*)"2", 
FL_MENU_RADIO
 },

59 { "&ImpossibÀ", 0, 
MyMíuCÆlback2
, (*)"3", 
FL_MENU_RADIO
 },

61 { "&Hñp", 0, 0, 0, 
FL_SUBMENU
 },

62 { "&AbouàSudoku", 
FL_F
 + 1, 
MyMíuCÆlback2
, 0, 0 },

69 
	$about_cb
(
Fl_Widgë
 *
o
, * 
∑øm
)

71 
CMaöFøme
* 
pThis
 = (CMaöFøme*)(
o
->
	`∑ª¡
());

73 
nS¸ìnW
 = 
pThis
->
	`w
();

74 
nS¸ìnH
 = 
pThis
->
	`h
();

77 c⁄° * 
s
 = (*)
∑øm
;

78 
Fl_Widgë
* 
pWnd
 = 0;

79 if(
	`°rcmp
(
s
,"newtsk")==0)

81 if(!
pThis
->
pTskAddFøme
)

83 
pThis
->
pTskAddFøme
 = 
√w
 
	`CNewTaskFøme
(345, 475, "Êñ∞Âª∫ÂÆöÊó∂‰ªªÂä°");

85 
pWnd
 = 
pThis
->
pTskAddFøme
;

86 }if(
	`°rcmp
(
s
,"about")==0)

88 i‡(!
about_∑√l
Ë
	`make_about_∑√l
();

89 
pWnd
 = 
about_∑√l
;

91 if(!
pWnd
) ;

92 
wöW
=
pWnd
->
	`w
(),
wöH
ıWnd->
	`h
();

93 
dx
 = (
nS¸ìnW
-
wöW
)/2 + 
pThis
->
	`x
();

94 
dy
 = (
nS¸ìnH
-
wöH
)/2 + 
pThis
->
	`y
();

95 
pWnd
->
	`posôi⁄
(
dx
,
dy
);

96 
pWnd
->
	`show
();

97 
	}
}

99 
	$cb
(
Fl_Widgë
 *
w
, *) {

103 
	`Ê_Æît
("you havê¥es†%s", 
w
->
	`œbñ
());

104 
	}
}

106 
	gCMaöFøme
::
	$Inô
()

108 
pTskAddFøme
=0;

109 c⁄° 
dimW
 = 
	`w
();

110 c⁄° 
dimH
 = 
	`h
();

111 c⁄° 
míub¨H
 = 
MENUBARH
;

112 
míub¨_
 = 
√w
 
	`Fl_Sys_Míu_B¨
(0, 0, 
	`w
(), 
MENUBARH
);

113 
míub¨_
->
	`add
("Êñ∞Âª∫‰ªªÂä°",0,
about_cb
,(*)"newtsk",0);

114 
míub¨_
->
	`add
("ËÆæÁΩÆ",0,
MyMíuCÆlback2
);

115 
míub¨_
->
	`add
("Â∏ÆÂä©",0,0,0,
FL_SUBMENU
);

116 
míub¨_
->
	`add
("Â∏ÆÂä©/ÂÖ≥‰∫é",
FL_F
+1,
about_cb
,(*)"about",0);

124 
døgbox
 *
box
 = 
√w
 
	`døgbox
(0,
míub¨H
, 
dimW
, 
dimH
-menubarH);

127 
box
->
	`box
(
FL_FLAT_BOX
);

129 
Fl_Group
 *
g
 = 
√w
 
	`Fl_Group
(0,
míub¨H
, 
dimW
, 
dimH
-menubarH);

130 
g
->
	`box
(
FL_NO_BOX
);

131 
g
->
	`íd
();

133 
dx
 = 0, 
dy
 = dx;

134 
yOff£t
 = 
MENUBARH
;

135 
Fl_Tûe
 *
tûe
=
√w
 
	`Fl_Tûe
(0,
yOff£t
, 
	`w
(), 
	`h
()-
MENUBARH
);

137 
Fl_Wödow
 *
box0
=
√w
 
	`Fl_Wödow
(0,
yOff£t
,150,
	`h
()-yOffset,"0");

138 
box0
->
	`box
(
FL_DOWN_BOX
);

139 
box0
->
	`cﬁ‹
(9);

140 
box0
->
	`œbñsize
(36);

142 
box0
->
	`size_ønge
(150, box0->
	`h
(), 0, 0);

143 
	`size_ønge
(150,1,0,0);

145 
Fl_Group
 *
box0_g
=
√w
 
	`Fl_Group
(25, 28, 
box0
->
	`w
(), 20);

146 
box0_g
->
	`box
(
FL_NO_BOX
);

150 
dy
;

151 c⁄° * 
«me
;

152 
Fl_CÆlback_p
 
p‚
;

153 } 
¨Bäs
[] ={

154 {0, "ÂÖ≥Êú∫...", 
cb
},

155 {35, "ÈîÅÂ±è...", 
cb
},

156 {35, "ÂæÖÊú∫...", 
cb
},

157 {35, "‰ºëÁú†...", 
cb
},

158 {35, "Êä§Áúº...", 
cb
},

161 
i
=0,
ncou¡
=(
¨Bäs
)/◊rBäs[0]),
dy
=28;i<ncount;i++)

163 
dy
 +
¨Bäs
[
i
].dy;

164 
Fl_Buâ⁄
* 
b
=
√w
 
	`Fl_Buâ⁄
(25, 
dy
, 80, 20, 
¨Bäs
[
i
].
«me
);

165 
b
->
	`image
(
√w
 
	`Fl_Tûed_Image
“ew 
	`Fl_Pixm≠
((c⁄° * c⁄° *)
tûe_xpm
)));

166 
b
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_INSIDE
|
FL_ALIGN_WRAP
);

167 
b
->
	`ˇŒback
(
¨Bäs
[
i
].
p‚
);

169 
box0_g
->
	`íd
();

172 
box0_g
->
	`íd
();

173 
box0
->
	`íd
();

174 
box0_g
->
	`ªsizabÀ
(*
g
);

175 
dx
=
dy
=0;

184 
CTaskFøme
 *
tsk‰m
=
√w
 
	`CTaskFøme
(150,
MENUBARH
,
	`w
()+150,
	`h
()-MENUBARH,"1");

185 
tsk‰m
->
	`box
(
FL_BORDER_FRAME
);

186 
tsk‰m
->
	`size_ønge
(350,100,0,0);

187 
tsk‰m
->
	`íd
();

193 
tûe
->
	`íd
();

194 
	`íd
();

196 
Fl_Box
 *
r
=
√w
 
	`Fl_Box
(
tûe
->
	`x
()+
dx
+150,tûe->
	`y
()+
dy
,tûe->
	`w
()-2*dx-150,tûe->
	`h
()-2*dy);

197 
tûe
->
	`ªsizabÀ
(*
r
);

199 
	`ªsizabÀ
(*
g
);

201 
	}
}

203 
	gCMaöFøme
::
	$CMaöFøme
(
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_DoubÀ_Wödow
(
w
,
h
,
tôÀ
)

205 
	`Inô
();

206 
	}
}

208 
	gCMaöFøme
::
	$CMaöFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 ):
	$Fl_DoubÀ_Wödow
(
x
,
y
,
w
,
h
,
tôÀ
)

210 
	`Inô
();

211 
	}
}

213 
	gCMaöFøme
::
	$show
(
¨gc
, **
¨gv
)

217 
Fl_DoubÀ_Wödow
::
	`show
(
¨gc
,
¨gv
);

218 
	}
}

220 
	gCMaöFøme
::
	$h™dÀ
(
evít
)

223  
Fl_DoubÀ_Wödow
::
	`h™dÀ
(
evít
);

224 
	}
}

226 
	gCMaöFøme
::
	$ªsize
(
X
,
Y
,
W
,
H
) {

228 
Fl_DoubÀ_Wödow
::
	`ªsize
–
X
, 
Y
, 
W
, 
H
);

229 
	}
}

231 
	gCMaöFøme
::
	$døw
()

234 
Fl_DoubÀ_Wödow
::
	`døw
();

235 
	}
}

	@mainframe.h

2 #¥agm®
⁄˚


3 
	~<FL/Fl.H
>

4 
	~<FL/gl.h
>

5 
	~<FL/glu.h
>

6 
	~<FL/glut.H
>

7 
	~<FL/Fl_Wödow.H
>

8 
	~<FL/Fl_Míu_B¨.H
>

9 
	~<FL/Fl_Sys_Míu_B¨.H
>

10 
	~<FL/Fl_Buâ⁄.H
>

11 
	~<FL/Fl_Box.H
>

12 
	~<FL/Fl_DoubÀ_Wödow.H
>

13 
	~<FL/Fl_Image.H
>

14 
	~<FL/Fl_Tûed_Image.H
>

15 
	~<FL/Fl_Image_SurÁ˚.H
>

16 
	~<FL/Fl_Gl_Wödow.H
>

17 
	~<FL/Fl_Tûe.H
>

18 
	~<FL/Fl_S¸ﬁl.H
>

20 
	~"chûd‰ame.h
"

23 
	#MENUBARH
 25

	)

25 ˛as†
	cCMaöFøme
:
public
 
Fl_DoubÀ_Wödow
{

26 
¥iv©e
:

27 
Inô
();

28 
	mpublic
:

29 
CMaöFøme
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

30 
CMaöFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

31 
ªsize
(,,,);

32 
døw
();

33 
h™dÀ
(
evít
);

34 
show
(
a
, **
b
);

35 
	$Êush
(){
Fl_DoubÀ_Wödow
::
	`Êush
();};

36 
Fl_Sys_Míu_B¨
 *
míub¨_
;

37 
Fl_Group
 *
pgroup
;

38 
Fl_Tûe
 *
m_tûe
;

39 
CChûdFøme
 * 
chûd‰ame
;

40 
˛ass
 
CNewTaskFøme
* 
pTskAddFøme
;

42 
	}
};

	@mainframe2.cxx

3 
	~"maö‰ame.h
"

4 
	~<FL/Ê_ask.H
>

6 
	~"ã°/pixm≠s/tûe.xpm
"

7 
	~"about_∑√l.h
"

8 
	~"√wèsk_‰ame.h
"

9 
	~"èsk‰ame.h
"

10 
	~<as£π.h
>

	@newtask_frame.cxx

2 
	~"√wèsk_‰ame.h
"

3 
	~"Fl_DøbÀ_Wödow.h
"

4 
	~<FL/Fl_Radio_Buâ⁄.H
>

5 
	~<FL/Fl_Round_Buâ⁄.H
>

6 
	~<FL/Fl_I≈ut.H
>

7 
	~<FL/Fl_Flﬂt_I≈ut.H
>

8 
	~<FL/Fl_I¡_I≈ut.H
>

9 
	~<FL/Fl_Se¸ë_I≈ut.H
>

10 
	~<FL/Fl_Mu…ûöe_I≈ut.H
>

11 
	~<FL/Fl_Buâ⁄.H
>

12 
	~<FL/Fl_ToggÀ_Buâ⁄.H
>

13 
	~<FL/Fl_Light_Buâ⁄.H
>

14 
	~<FL/Fl_Cﬁ‹_Choo£r.H
>

15 
	~<FL/Fl_Choi˚.H
>

16 
	~<FL/Fl_Radio_Round_Buâ⁄.H
>

17 
	~<FL/Fl_N©ive_Fûe_Choo£r.H
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 #ifde‡
WIN32


23 
	~<°dlib.h
>

26 
	~"√wèsk_‰ame_cb.˝p
"

30 
	gCNewTaskFøme
::
	$Inô
()

32 
døgbox
 *
box
 = 
√w
 
	`døgbox
(0,0, 
	`w
(), 
	`h
());

33 
box
->
	`box
(
FL_NO_BOX
);

35 
px
 =1, 
py
 =1;

37 
Fl_Group
* 
pGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
,
	`w
()-2*px,70,"",1);

38 
pGΩ
->
	`cﬁ‹
(3);

39 
Fl_Box
* 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,150, 20,"ÂºÄÂßãÊó•Êúü:");

40 
pBox
->
	`œbñcﬁ‹
(4);

41 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

42 
pBox
->
	`box
(
FL_FLAT_BOX
);

43 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

45 
py
 = 
pBox
->
	`y
(Ë+ÖBox->
	`h
() +2;

46 
Fl_Group
* 
bäsGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 20,"",0);

49 
Fl_Radio_Round_Buâ⁄
* 
pBä
 = 
√w
 
	`Fl_Radio_Round_Buâ⁄
(
px
,
py
, 150, 20, "ÂΩìÂâç");pBä->
	`£t
();pBä->
	`ˇŒback
(
°¨td©e_cb
,ÖBtn);

50 
Fl_Radio_Round_Buâ⁄
* 
pBä2
 = 
√w
 
	`Fl_Radio_Round_Buâ⁄
(
pBä
->
	`x
()+pBä->
	`w
()+5, 
py
, 150, 20, "Èò≥ÂéÜ");pBä2->
	`ˇŒback
(
°¨td©e_cb
,ÖBtn2);

51 
bäsGΩ
->
	`íd
();

53 
py
 = 
bäsGΩ
->
	`y
(Ë+ bäsGΩ->
	`h
() +2;

55 
s
[10];

56 
xTmp
=
px
;

57 
Fl_Choi˚
 *
choi˚
 = 
√w
 
	`Fl_Choi˚
(
px
, 
py
, 60, 25);

58 
choi˚
->
	`œbñf⁄t
(
FL_HELVETICA_BOLD
);

59 
i
=1900;i<2051;i++)

61 
	`¢¥ötf
(
s
, 10, "%d", 
i
);

62 
choi˚
->
	`add
(
s
);

64 
choi˚
->
	`ˇŒback
((
Fl_CÆlback
 *)
doscheme
);

65 
px
+
choi˚
->
	`w
()+2; 
pBox
 = 
√w
 
	`Fl_Box
’x,
py
,40, 30,"Âπ¥");pBox->
	`box
(
FL_FLAT_BOX
);

67 
px
 +
pBox
->
	`w
();

68 
choi˚
 = 
√w
 
	`Fl_Choi˚
(
px
, 
py
, 50, 25);

69 
choi˚
->
	`œbñf⁄t
(
FL_HELVETICA_BOLD
);

70 
i
=1;i<13;i++)

72 
	`¢¥ötf
(
s
, 10, "%d", 
i
);

73 
choi˚
->
	`add
(
s
);

75 
choi˚
->
	`ˇŒback
((
Fl_CÆlback
 *)
doscheme
);

76 
px
+
choi˚
->
	`w
(); 
pBox
 = 
√w
 
	`Fl_Box
’x,
py
,40, 30,"Êúà");pBox->
	`box
(
FL_FLAT_BOX
);

78 
px
 +
pBox
->
	`w
();

79 
choi˚
 = 
√w
 
	`Fl_Choi˚
(
px
, 
py
, 50, 25);

80 
choi˚
->
	`œbñf⁄t
(
FL_HELVETICA_BOLD
);

81 
i
=1;i<31;i++)

83 
	`¢¥ötf
(
s
, 10, "%d", 
i
);

84 
choi˚
->
	`add
(
s
);

86 
choi˚
->
	`ˇŒback
((
Fl_CÆlback
 *)
doscheme
);

87 
px
+
choi˚
->
	`w
(); 
pBox
 = 
√w
 
	`Fl_Box
’x,
py
,40, 30,"Êó•");pBox->
	`box
(
FL_FLAT_BOX
);

88 
pGΩ
->
	`íd
();

90 
Fl_Radio_Round_Buâ⁄
* 
pCuºTimeBä
 = 
pBä
;

94 
px
 = 1;

95 
py
 = 
pBox
->
	`y
()+pBox->
	`h
()+2;

96 
pGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
,
	`w
()-2*px,78,"",1);

97 
pGΩ
->
	`cﬁ‹
(4);

99 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,150, 20,"Êó∂Èó¥ÂÅèÁßª:");

100 
pBox
->
	`œbñcﬁ‹
(4);

101 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

102 
pBox
->
	`box
(
FL_FLAT_BOX
);

103 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

105 
py
 +
pBox
->
	`h
()+2;

106 
Fl_I≈ut
* 
pI±
 = (Fl_I≈ut*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,50,25);
pBox
->
	`box
(
FL_FLAT_BOX
);Öx+pI±->
	`w
()+2;ÖBox =Çew 
	`Fl_Box
(px,py,40, 30,"Êó∂");pBox->box(FL_FLAT_BOX);

107 
px
 +
pBox
->
	`w
()+2;

108 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"ÂàÜ");pBox->
	`box
(
FL_FLAT_BOX
);

109 
px
 +
pBox
->
	`w
()+2;

110 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"Áßí");pBox->
	`box
(
FL_FLAT_BOX
);

111 
px
 +
pBox
->
	`w
()+2;

112 
bäsGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 120, 25,"",0);

115 
pBä
 = 
√w
 
	`Fl_Radio_Round_Buâ⁄
(
px
,
py
, 50, 20, "‰πãÂâç");

116 
pBä2

√w
 
	`Fl_Radio_Round_Buâ⁄
(
pBä
->
	`x
()+pBä->
	`w
()+5, 
py
, 50, 20, "‰πãÂêé");pBä->
	`£t
();

117 
bäsGΩ
->
	`íd
();

119 
px
 = 1;

120 
py
 +
bäsGΩ
->
	`h
()+2;

121 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,50,25);
pBox
->
	`box
(
FL_FLAT_BOX
);Öx+pI±->
	`w
()+2;ÖBox =Çew 
	`Fl_Box
(px,py,40, 30,"Â§©");pBox->box(FL_FLAT_BOX);

122 
px
 +
pBox
->
	`w
()+2;

123 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,50,25);
pBox
->
	`box
(
FL_FLAT_BOX
);Öx+pI±->
	`w
()+2;ÖBox =Çew 
	`Fl_Box
(px,py,40, 30,"Êó∂");pBox->box(FL_FLAT_BOX);

124 
px
 +
pBox
->
	`w
()+2;

125 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"ÂàÜ");pBox->
	`box
(
FL_FLAT_BOX
);

126 
px
 +
pBox
->
	`w
()+2;

127 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"Áßí");pBox->
	`box
(
FL_FLAT_BOX
);

128 
pGΩ
->
	`íd
();

132 
px
 = 1;

133 
py
 +
pBox
->
	`h
()+2;

134 
pGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 125,"",1);

135 
pGΩ
->
	`cﬁ‹
(5);

136 
py
+= 2;

137 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,150, 20,"È¢ëÁéá:");

138 
pBox
->
	`œbñcﬁ‹
(4);

139 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

140 
pBox
->
	`box
(
FL_FLAT_BOX
);

141 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

143 
py
 +
pBox
->
	`h
();

144 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,80, 20,"ÂÖ±ÊâßË°å:");

145 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

146 
pBox
->
	`box
(
FL_FLAT_BOX
);

147 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

148 
px
 +
pBox
->
	`w
()+1;

149 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
, 60,25);

150 
px
 +
pI±
->
	`w
()+1;

151 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,180,20," Ê¨°(-1Ë°®Á§∫Êó†ÈôêÊ¨°)");

152 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

153 
pBox
->
	`box
(
FL_FLAT_BOX
);

154 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

156 
py
 +
pBox
->
	`h
()+1;

157 
px
 = 1;

158 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,150, 20,"ÊØèÊ¨°Èó¥Èöî:");

159 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

160 
pBox
->
	`box
(
FL_FLAT_BOX
);

161 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

162 
py
 +
pBox
->
	`h
()+1;

163 
bäsGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 60,"",1);

164 
bäsGΩ
->
	`cﬁ‹
(2);

165 
pBä
 = 
√w
 
	`Fl_Radio_Round_Buâ⁄
(
px
,
py
, 50, 20);pBä->
	`£t
();

166 
px
 +
pBä
->
	`w
()+2;

167 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,50,25);
pBox
->
	`box
(
FL_FLAT_BOX
);Öx+pI±->
	`w
()+2;ÖBox =Çew 
	`Fl_Box
(px,py,40, 30,"Êúà");pBox->box(FL_FLAT_BOX);

169 
px
=1;

170 
py
 +
pBox
->
	`h
()+2;

171 
pBä2
 = 
√w
 
	`Fl_Radio_Round_Buâ⁄
(
px
, 
py
, 50, 20);

172 
px
 +
pBä
->
	`w
()+2;

173 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,50,25);
pBox
->
	`box
(
FL_FLAT_BOX
);Öx+pI±->
	`w
()+2;ÖBox =Çew 
	`Fl_Box
(px,py,40, 30,"Êó∂");pBox->box(FL_FLAT_BOX);

174 
px
 +
pBox
->
	`w
()+2;

175 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"ÂàÜ");pBox->
	`box
(
FL_FLAT_BOX
);

176 
px
 +
pBox
->
	`w
()+2;

177 
pI±
 = (
Fl_I≈ut
*)
√w
 
	`Fl_I¡_I≈ut
(
px
,
py
,30,25);Öx+pI±->
	`w
()+2; 
pBox
 =Çew 
	`Fl_Box
’x,py,40, 30,"Áßí");pBox->
	`box
(
FL_FLAT_BOX
);

179 
bäsGΩ
->
	`íd
();

180 
pGΩ
->
	`íd
();

182 
px
=1;
py
 = 
pGΩ
->
	`y
()+pGΩ->
	`h
()+2;

183 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,70, 20,"‰ªªÂä°ÂêçÁß∞:");

184 
pBox
->
	`œbñcﬁ‹
(4);

185 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

186 
pBox
->
	`box
(
FL_FLAT_BOX
);

187 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

188 
px
 +
pBox
->
	`w
()+2;

189 
pI±
 = 
√w
 
	`Fl_I≈ut
(
px
,
py
,
	`w
()-px-2,25);

192 
px
=1;
py
 +
pI±
->
	`h
()+2;

193 
pGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 125,"",1);

194 
pGΩ
->
	`cﬁ‹
(3);

195 
py
+= 2;

196 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,70, 20,"ÊâßË°åÂä®‰Ωú:");

197 
pBox
->
	`œbñcﬁ‹
(4);

198 
pBox
->
	`œbñty≥
(
FL_NORMAL_LABEL
);

199 
pBox
->
	`box
(
FL_FLAT_BOX
);

200 
pBox
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

201 
px
+
pBox
->
	`w
()+2;

202 
choi˚
 = 
√w
 
	`Fl_Choi˚
(
px
, 
py
, 120, 25);

203 
choi˚
->
	`œbñf⁄t
(
FL_HELVETICA_BOLD
);

204 c⁄° * 
¨tskName
[]={

208 
i
=0,
n
=(
¨tskName
)/(artskName[0]);i<n;i++)

210 
choi˚
->
	`add
(
¨tskName
[
i
]);

213 
choi˚
->
	`ˇŒback
((
Fl_CÆlback
 *)
a˘i⁄Choi˚
);

214 
choi˚
->
	`vÆue
(0);

215 
px
=1;

216 
py
+
choi˚
->
	`h
()+2;

218 
bäsGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 70,"",1);

219 
bäsGΩ
->
	`cﬁ‹
(8);

220 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,40, 20,"Êñá‰ª∂:");px+ıBox->
	`w
()+1;

221 
pI±
 = 
√w
 
	`Fl_I≈ut
(
px
,
py
,220,25);px+ıI±->
	`w
()+1;

222 
Fl_Buâ⁄
* 
pNrBä
 = 
√w
 
	`Fl_Buâ⁄
(
px
,
py
,50,25,"ÊµèËßà...");px+ıNrBä->
	`w
()+1;

223 
pNrBä
->
	`ˇŒback
(
fûeChoo£
);

225 
py
+=
pNrBä
->
	`h
()+2;

226 
px
=1;

227 
pBox
 = 
√w
 
	`Fl_Box
(
px
,
py
,80, 20,"ÂëΩ‰ª§Ë°åÂèÇÊï∞:");px+ıBox->
	`w
()+1;

228 
pI±
 = 
√w
 
	`Fl_I≈ut
(
px
,
py
,
	`w
()-px-2,25);px+=pIpt->w()+1;

229 
bäsGΩ
->
	`íd
();

230 
pGΩ
->
	`íd
();

233 
px
=1;
py
 = 
pGΩ
->
	`y
()+pGΩ->
	`h
()+2;

234 
pGΩ
 = 
√w
 
	`Fl_Group
(
px
,
py
, 
	`w
(), 30,"",1);

235 
pGΩ
->
	`cﬁ‹
(3);

236 
py
+= 2;

237 
px
 = 
	`w
()-120;

238 
pNrBä
 = 
√w
 
	`Fl_Buâ⁄
(
px
,
py
,40,25,"ÂèñÊ∂à");pNrBä->
	`ˇŒback
(
ok_cb
, 0);Öx+pNrBä->
	`w
()+30;

239 
pNrBä
 = 
√w
 
	`Fl_Buâ⁄
(
px
,
py
,40,25,"Á°ÆÂÆö");pNrBä->
	`ˇŒback
(
ok_cb
, 0);

241 
Fl_N©ive_Fûe_Choo£r
 
‚fc
;

242 
‚fc
.
	`tôÀ
("Pická file");

243 
‚fc
.
	`ty≥
(
Fl_N©ive_Fûe_Choo£r
::
BROWSE_FILE
);

244 
‚fc
.
	`fûãr
("App\t*.exe\n"

246 
‚fc
.
	`dúe˘‹y
("/home/lixing/");

249 
pGΩ
->
	`íd
();

251 
	`íd
();

252 
pCuºTimeBä
->
	`do_ˇŒback
((
Fl_Widgë
*ÌCuºTimeBä,(*)
pBä
);

253 
	}
}

255 
	gCNewTaskFøme
::
	$CNewTaskFøme
(
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_Wödow
(
w
,
h
,
tôÀ
)

257 
	`Inô
();

258 
	}
}

260 
	gCNewTaskFøme
::
	$CNewTaskFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_Wödow
(
x
,
y
,
w
,
h
,
tôÀ
)

262 
	`Inô
();

263 
	}
}

	@newtask_frame.h

3 #¥agm®
⁄˚


5 
	~<FL/Fl.H
>

6 
	~<FL/gl.h
>

7 
	~<FL/glu.h
>

8 
	~<FL/glut.H
>

9 
	~<FL/Fl_Wödow.H
>

10 
	~<FL/Fl_Míu_B¨.H
>

11 
	~<FL/Fl_Buâ⁄.H
>

12 
	~<FL/Fl_Box.H
>

13 
	~<FL/Fl_DoubÀ_Wödow.H
>

14 
	~<FL/Fl_Image.H
>

15 
	~<FL/Fl_Tûed_Image.H
>

16 
	~<FL/Fl_Image_SurÁ˚.H
>

17 
	~<FL/Fl_Gl_Wödow.H
>

18 
	~<FL/Fl_Brow£r.H
>

19 
	~<FL/Ê_ask.H
>

21 
	~<FL/Fl_Light_Buâ⁄.H
>

22 
	~<FL/Fl_I≈ut.H
>

23 
	~<FL/Ê_døw.H
>

24 
	~<FL/Fl_TabÀ.H
>

25 
	~"utûs/ötvec.h
"

26 
	~<FL/Fl_Sh¨ed_Image.H
>

27 
	~<FL/Fl_Image.H
>

30 ˛as†
	cCNewTaskFøme
:
public
 
Fl_Wödow
{

31 
public
:

32 
CNewTaskFøme
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

33 
CNewTaskFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

34 
Inô
();

	@newtask_frame_cb.cpp

2 
	~"√wèsk_‰ame.h
"

3 
	~"Fl_DøbÀ_Wödow.h
"

4 
	~<FL/Fl_Radio_Buâ⁄.H
>

5 
	~<FL/Fl_Round_Buâ⁄.H
>

6 
	~<FL/Fl_I≈ut.H
>

7 
	~<FL/Fl_Flﬂt_I≈ut.H
>

8 
	~<FL/Fl_I¡_I≈ut.H
>

9 
	~<FL/Fl_Se¸ë_I≈ut.H
>

10 
	~<FL/Fl_Mu…ûöe_I≈ut.H
>

11 
	~<FL/Fl_Buâ⁄.H
>

12 
	~<FL/Fl_ToggÀ_Buâ⁄.H
>

13 
	~<FL/Fl_Light_Buâ⁄.H
>

14 
	~<FL/Fl_Cﬁ‹_Choo£r.H
>

15 
	~<FL/Fl_Choi˚.H
>

16 
	~<FL/Fl_Radio_Round_Buâ⁄.H
>

17 
	~<FL/Fl_N©ive_Fûe_Choo£r.H
>

18 
	~<time.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 #ifde‡
WIN32


23 
	~<°dlib.h
>

26 
	$ok_cb
(
Fl_Widgë
* 
wid
, *
d©a
)

28 
Fl_Group
* 
fg
 = (Fl_Group*)
wid
->
	`∑ª¡
();

29 
Fl_Group
* 
wnd
 = (Fl_Group*)
fg
->
	`∑ª¡
();

30 if(
fg
->
	`föd
(
wid
)==0)

33 
wnd
->
	`hide
();

38 
	}
}

40 
	$°¨td©e_cb
(
Fl_Widgë
* 
wid
, *
d©a
)

42 
Fl_Group
* 
fgBäs
 = (Fl_Group*)
wid
->
	`∑ª¡
();

43 
Fl_Group
* 
fg
=(Fl_Group*)
fgBäs
->
	`∑ª¡
();

44 
Fl_Group
* 
wnd
 = (Fl_Group*)
fg
->
	`∑ª¡
();

45 
Fl_Group
* 
pD©eOff£t
 = (Fl_Group*)
wnd
->
	`chûd
(wnd->
	`föd
(
fg
)+1);

47 
time_t
 
now
;

48 
tm
 *
timíow
;

49 
	`time
(&
now
);

51 
timíow
 = 
	`loˇ…ime
(&
now
);

53 
Fl_Choi˚
 *
oY
,*
oM⁄
,*
oD
;

54 
nObj
 = 
fg
->
	`föd
(
fgBäs
);

55 
nYór
 = 
timíow
->
tm_yór
;

56 
oY
 = (
Fl_Choi˚
*)
fg
->
	`chûd
(
nObj
+1); oY->
	`vÆue
(
nYór
);

57 
oM⁄
 = (
Fl_Choi˚
*)
fg
->
	`chûd
(
nObj
+3); oM⁄->
	`vÆue
(
timíow
->
tm_m⁄
);

58 
oD
 = (
Fl_Choi˚
*)
fg
->
	`chûd
(
nObj
+5);oD->
	`vÆue
(
timíow
->
tm_mday
-1);

60 
Fl_I≈ut
 *
oH
=(Fl_I≈ut*)
pD©eOff£t
->
	`chûd
(1),

61 *
oMö
=(
Fl_I≈ut
*)
pD©eOff£t
->
	`chûd
(3),

62 *
oS
=(
Fl_I≈ut
*)
pD©eOff£t
->
	`chûd
(5);

64 
chs
[20];

66 
	`•rötf
(
chs
,"%d",
timíow
->
tm_hour
);

67 
oH
->
	`vÆue
(
chs
);

68 
	`•rötf
(
chs
,"%d",
timíow
->
tm_mö
);

69 
oMö
->
	`vÆue
(
chs
);

70 
	`•rötf
(
chs
,"%d",
timíow
->
tm_£c
);

71 
oS
->
	`vÆue
(
chs
);

73 if(
fgBäs
->
	`föd
(
wid
)==0)

76 
oY
->
	`dó˘iv©e
(),
oM⁄
->dó˘iv©e(),
oD
->deactivate();

77 
oH
->
	`dó˘iv©e
(),
oMö
->dó˘iv©e(),
oS
->deactivate();

80 
oY
->
	`a˘iv©e
(),
oM⁄
->a˘iv©e(),
oD
->activate();

81 
oH
->
	`a˘iv©e
(),
oMö
->a˘iv©e(),
oS
->activate();

83 
	}
}

85 
	$doscheme
(
Fl_Choi˚
 *
c
, *) {

87 
	}
}

89 
	$a˘i⁄Choi˚
(
Fl_Choi˚
 *
c
, *)

91 
Fl_Group
* 
pGΩ
 = (Fl_Group*)
c
->
	`∑ª¡
();

92 
Fl_Group
* 
pChûdGΩ
 = (Fl_Group*)
pGΩ
->
	`chûd
(2);

93 if(
	`°rcmp
(
c
->
	`ãxt
(c->
	`vÆue
()),"ÊåáÂÆöÂ∫îÁî®")==0)

95 
pChûdGΩ
->
	`a˘iv©e
();

98 
pChûdGΩ
->
	`dó˘iv©e
();

101 
	}
}

103 
	$fûeChoo£
(
Fl_Widgë
* 
wid
, *
d©a
)

105 
Fl_Group
* 
fg
 = (Fl_Group*)
wid
->
	`∑ª¡
();

106 
Fl_N©ive_Fûe_Choo£r
 
‚fc
;

107 
‚fc
.
	`tôÀ
("Pická file");

108 
‚fc
.
	`ty≥
(
Fl_N©ive_Fûe_Choo£r
::
BROWSE_FILE
);

109 #ifde‡
WIN32


110 
‚fc
.
	`fûãr
("Á®ãÂ∫è\t*.exe\n"

113 
‚fc
.
	`fûãr
("Á®ãÂ∫è\t*\n"

116 
‚fc
.
	`dúe˘‹y
("/home/lixing/");

117 
nObj
 = 
fg
->
	`föd
(
wid
);

118 
Fl_I≈ut
* 
‚I±
 = (Fl_I≈ut*)
fg
->
	`chûd
(
nObj
-1);

119 i‡–
‚fc
.
	`show
(Ë=0 && fnfc.
	`cou¡
()>0)

121 
‚I±
->
	`vÆue
(
‚fc
.
	`fûíame
(0));

123 
	}
}

	@taskframe.cxx

2 
	~"èskèbÀ.h
"

3 
	~"èsk‰ame.h
"

6 
	gG_u£symbﬁs
 = 0;

9 
	$MyDøw
(c⁄° 
Fl_Labñ
 *
o
, 
X
, 
Y
, 
W
, 
H
, 
Fl_Align
 
a
) {

10 
	`Ê_f⁄t
(
o
->
f⁄t
, o->
size
);

11 
	`Ê_cﬁ‹
((
Fl_Cﬁ‹
)
o
->
cﬁ‹
);

12 
	`Ê_døw
(
o
->
vÆue
, 
X
, 
Y
, 
W
, 
H
, 
a
, o->
image
, 
G_u£symbﬁs
);

13 
	}
}

16 
	$MyMósuª
(c⁄° 
Fl_Labñ
 *
o
, &
W
, &
H
) {

17 
	`Ê_f⁄t
(
o
->
f⁄t
, o->
size
);

18 
	`Ê_mósuª
(
o
->
vÆue
, 
W
, 
H
, 
G_u£symbﬁs
);

19 
	}
}

21 
	gCTaskFøme
::
	$BuûdUI
()

23 c⁄° 
dx
=0, 
dy
=0;

24 
Fl_Brow£r
 *
b
 = 
√w
 
	`Fl_Brow£r
(
dx
,
dy
,
	`w
()-dx*2,
	`h
()-dy*2);

25 
widths
[] = { 50, 50, 50, 70, 70, 40, 40, 70, 70, 50, 0 };

26 
b
->
	`cﬁumn_widths
(
widths
);

27 
b
->
	`cﬁumn_ch¨
('\t');

28 
b
->
	`ty≥
(
FL_MULTI_BROWSER
);

29 
b
->
	`add
("\tUSER\tPID\t%CPU\t%MEM\tVSZ\tRSS\tTTY\tSTAT\tSTART\tTIME\tCOMMAND");

30 
b
->
	`add
("\troot\t2888\t0.0\t0.0\t1352\t0\ttty3\tSW\tAug15\t0:00\t@b@f/sbin/mingettyÅty3");

31 
b
->
	`add
("\terco\t2889\t0.0\t13.0\t221352\t0\ttty3\tR\tAug15\t1:34\t@b@f/usr/local/bin/renderá35 0004");

32 
b
->
	`add
("\tuucp\t2892\t0.0\t0.0\t1352\t0\tttyS0\tSW\tAug15\t0:00\t@b@f/sbin/agetty -h 19200ÅtyS0 vt100");

33 
b
->
	`add
("\troot\t13115\t0.0\t0.0\t1352\t0\ttty2\tSW\tAug30\t0:00\t@b@f/sbin/mingettyÅty2");

34 
b
->
	`add
("\troot\t13464\t0.0\t0.0\t1352\t0\ttty1\tSW\tAug30\t0:00\t@b@f/sbin/mingettyÅty1 --noclear");

35 
b
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_INSIDE
|
FL_ALIGN_WRAP
);

39 
b
->
	`ªsize
(
dx
,
dy
,
	`w
()-dx*2,
	`h
()-dy*2);

40 
Fl
::
	`£t_œbñty≥
(
FL_NORMAL_LABEL
, 
MyDøw
, 
MyMósuª
);

41 
b
->
	`ªdøw
();

50 
	}
}

52 
	gCTaskFøme
::
	$Inô
()

57 
CTaskTabÀ
 *
èbÀ
=
√w
 
	`CTaskTabÀ
(0, 0, 
	`w
()+20, 
	`h
()-0, "FLTK widgetÅable");

59 
èbÀ
->
	`SëSize
(2);

60 
èbÀ
->
	`íd
();

66 
	`ªsizabÀ
(
èbÀ
);

70 
	}
}

72 
	gCTaskFøme
::
	$CTaskFøme
(
w
, 
h
, c⁄° * 
tôÀ
):
	$Fl_Wödow
(
w
,
h
,
tôÀ
)

74 
	`Inô
();

75 
	}
}

77 
	gCTaskFøme
::
	$CTaskFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 ):
	$Fl_Wödow
(
x
,
y
,
w
,
h
,
tôÀ
)

79 
	`Inô
();

80 
	}
}

82 
	gCTaskFøme
::
	$h™dÀ
(
evít
)

85  
Fl_Wödow
::
	`h™dÀ
(
evít
);

86 
	}
}

88 
	gCTaskFøme
::
	$døw
()

90 
Fl_Wödow
::
	`døw
();

91 
	}
}

	@taskframe.h

2 #¥agm®
⁄˚


3 
	~<FL/Fl.H
>

4 
	~<FL/gl.h
>

5 
	~<FL/glu.h
>

6 
	~<FL/glut.H
>

7 
	~<FL/Fl_Wödow.H
>

8 
	~<FL/Fl_Míu_B¨.H
>

9 
	~<FL/Fl_Buâ⁄.H
>

10 
	~<FL/Fl_Box.H
>

11 
	~<FL/Fl_DoubÀ_Wödow.H
>

12 
	~<FL/Fl_Image.H
>

13 
	~<FL/Fl_Tûed_Image.H
>

14 
	~<FL/Fl_Image_SurÁ˚.H
>

15 
	~<FL/Fl_Gl_Wödow.H
>

16 
	~<FL/Fl_Brow£r.H
>

17 
	~<FL/Ê_ask.H
>

19 ˛as†
	cCTaskFøme
:
public
 
Fl_Wödow
{

20 
public
:

21 
CTaskFøme
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

22 
CTaskFøme
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

23 
Inô
();

24 
døw
();

25 
h™dÀ
(
evít
);

26 
BuûdUI
();

	@taskrow.cxx

2 
	~"èskrow.h
"

3 
	~"ui/imgd©a.h
"

4 
	~"utûs/utûs.h
"

5 
	~"èskèbÀ.h
"

7 
XPoöt
 
	gCTaskRow
::
unôWHs
[]={

20 
XPoöt
 
	gCTaskRow
::
unôS∑˚s
[]={

32 
	gunôWHCou¡
 = (
CTaskRow
::
unôWHs
)/(CTaskRow::unitWHs[0]);

34 
	gCTaskRow
::
	$CTaskRow
(
x
, 
y
, 
w
, 
h
, c⁄° *
l
,
boﬁ
 
b
Ë: 
	$Fl_Group
(
x
,
y
,
w
,
h
,
l
,
b
)

37 
	}
}

39 
	gCTaskRow
::
	$BuûdRow
(c⁄° 
pX
, c⁄° 
pY
, c⁄° 
nLöeH
, 
CBäSåuc
* 
bäsSåuc
)

41 
X
=
pX
, 
Y
=
pY
,
H
=
nLöeH
;

42 
	`begö
();

44 
Fl_Group
 * 
group1
 = 
√w
 
	`Fl_Group
(
X
, 
Y
, 20+
	`w
()-2*X, 
H
, "",0);

47 
Fl_Buâ⁄
 *
buâ
 = 
√w
 
	`Fl_Buâ⁄
(
X
, 
Y
,
H
-2,H-2,"-");

48 
buâ
->
	`Æign
(
FL_ALIGN_CENTER
|
FL_ALIGN_INSIDE
);

49 
buâ
->
	`cﬁ‹
(12,14);

52 
X
 +
buâ
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[0].
x
;

53 
Fl_Box
* 
tskTôÀ
 = 
√w
 
	`Fl_Box
(
X
, 
Y
, 
CTaskRow
::
unôWHs
[1].
x
, CTaskRow::unôWHs[1].
y
,"Ëµ∑Â∫äÈóπÈíü");

54 
tskTôÀ
->
	`box
(
FL_BORDER_FRAME
);

55 
tskTôÀ
->
	`Æign
(
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

56 
tskTôÀ
->
	`posôi⁄
—skTôÀ->
	`x
(), 
Y
+(
buâ
->
	`h
() -ÅskTitle->h())/2);

59 
X
 +
tskTôÀ
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[1].
x
;

60 
tskTôÀ
 = 
√w
 
	`Fl_Box
(
X
, 
Y
, 
CTaskRow
::
unôWHs
[2].
x
, CTaskRow::unôWHs[2].
y
,"Ââ©‰Ωô 01Âπ¥05Êúà32Â§© 03:20:95");

61 
tskTôÀ
->
	`box
(
FL_BORDER_FRAME
);

62 
tskTôÀ
->
	`Æign
(
FL_ALIGN_LEFT
|
FL_ALIGN_INSIDE
);

63 
tskTôÀ
->
	`posôi⁄
—skTôÀ->
	`x
(), 
Y
+(
buâ
->
	`h
() -ÅskTitle->h())/2);

65 
Fl_Image
* 
ic⁄s
 = (Fl_Image*)
√w
 
	`Fl_RGB_Image
(
edô_≤g
,144,36,4);

66 
Fl_Image
* 
acIc⁄
 = 0;

67 
X
 +
tskTôÀ
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[2].
x
;

69 
nIc⁄Widths
 = 0;

70 
i
=3;i<10;i++)

72 
nIc⁄Widths
 +
CTaskRow
::
unôWHs
[
i
].
x
 + CTaskRow::
unôS∑˚s
[i].x;

75 
Fl_Group
* 
pIc⁄sGroup
 = 
√w
 
	`Fl_Group
(
X
, 
Y
, 
nIc⁄Widths
,33,"",1);

76 
i
=3,
j
=0;i<10;i++,j++)

78 
buâ
 = 
√w
 
	`Fl_Buâ⁄
(
X
, 
Y
,
CTaskRow
::
unôWHs
[
i
].
x
, CTaskRow::unôWHs[i].
y
);

79 
buâ
->
	`box
(
FL_NO_BOX
);

80 
buâ
->
	`Æign
(
FL_ALIGN_CENTER
|
FL_ALIGN_INSIDE
);

81 
acIc⁄
 = 
CUtû
::
	`c›y
(
ic⁄s
,
bäsSåuc
[
j
].
±
.
x
,18,18,18);

82 
buâ
->
	`image
(
acIc⁄
);

83 
buâ
->
	`toﬁtù
(
bäsSåuc
[
j
].
tùs
);

84 
buâ
->
	`ˇŒback
(
bäsSåuc
[
j
].
p‚
);

85 
X
 +
buâ
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[
i
].
x
;

87 
pIc⁄sGroup
->
	`íd
();

89 
group1
->
	`íd
();

90 
	`íd
();

91 
group1
->
	`ªsizabÀ
(
tskTôÀ
);

92 
	`ªsizabÀ
(*
group1
);

94 
group1
->
	`Æign
(
FL_ALIGN_CLIP
|
FL_ALIGN_LEFT
|
FL_ALIGN_TOP
);

96  
group1
->
	`y
()+group1->
	`h
();

97 
	}
}

100 
	gCTaskRow
::~
	$CTaskRow
()

103 
	}
}

	@taskrow.h

1 #¥agm®
⁄˚


3 
	~<FL/Fl.H
>

4 
	~<FL/Fl_DoubÀ_Wödow.H
>

5 
	~<FL/Fl_Light_Buâ⁄.H
>

6 
	~<FL/Fl_I≈ut.H
>

7 
	~<FL/Ê_døw.H
>

8 
	~<FL/Fl_TabÀ.H
>

9 
	~<FL/Fl_Group.H
>

11 ˛as†
	cCTaskRow
:
public
 
Fl_Group


13 
public
:

14 
CTaskRow
(,,,, c⁄° * = 0, 
boﬁ
 
bDøwFøme
 =
Ál£
);

15 ~
CTaskRow
();

16 
Buûd
();

18 
XPoöt
 
	munôWHs
[];

19 
XPoöt
 
	munôS∑˚s
[];

20 
BuûdRow
(c⁄° 
pX
, c⁄° 
pY
, c⁄° 
nLöeH
,
CBäSåuc
* );

	@tasktable.cxx

2 
	~"èskrow.h
"

3 
	~"èskèbÀ.h
"

5 
	gCTaskTabÀ
::
	$CTaskTabÀ
(
x
, 
y
, 
w
, 
h
, c⁄° *
l
Ë: 
	$Fl_Group
(
x
,
y
,
w
,
h
,
l
)

7 
nDims
=2;

8 
	`Ê_cﬁ‹
(3);

16 
	}
}

18 
	gCTaskTabÀ
::~
	$CTaskTabÀ
()

20 if(
rowImg
)

23 
dñëe
 
rowImg
;

24 
rowImg
=0L;

26 
	}
}

28 
CBäSåuc
 
	gbäsSåuc
[]={

29 {{2+18,18},"Â¢ûÂä†‰ªªÂä°",&
CTaskTabÀ
::
OnAddRow
},

30 {{2,18},"Â¢ûÂä†Â≠ê‰ªªÂä°",&
CTaskTabÀ
::
OnAddRow
},

31 {{2+18*2,18},"‰∏äÁßª",&
CTaskTabÀ
::
OnAddRow
},

32 {{2+18*3,18},"‰∏ãÁßª",&
CTaskTabÀ
::
OnAddRow
},

33 {{2+18*4,18},"ÊöÇÂÅú",&
CTaskTabÀ
::
OnAddRow
},

34 {{2+18*6,18},"ÁºñËæë",&
CTaskTabÀ
::
OnAddRow
},

35 {{2+18*7,18},"Âà†Èô§",&
CTaskTabÀ
::
OnDñRow
}

38 
	gCTaskTabÀ
::
	$SëSize
(
√wrows
)

41 
yOff£t
 =0;

43 
	`begö
();

44 
CTaskRow
* 
oRow
 = 0;

45 
r
=0;r<
√wrows
;r++)

47 
oRow
 = 
√w
 
	`CTaskRow
(0, 
yOff£t
,
	`w
(), 35,"",0);

48 
yOff£t
=
oRow
->
	`BuûdRow
(1, yOff£t+5, 35, 
bäsSåuc
);

49 
oRow
->
	`íd
();

50 
vtRows
.
	`push_back
(()
oRow
);

56 
	`íd
();

58 
yOff£t
 += 14;

60 
	`begö
();

61 
Fl_Group
 *
group3
 = 
√w
 
	`Fl_Group
(0, 
yOff£t
, 
	`w
()-0, 35, 0,1);

62 
	`ªsizabÀ
(
group3
);

63 
group3
->
	`íd
();

64 
	`íd
();

67 
X
=1,
Y
=1+
yOff£t
;

68 
Fl_Box
 *
b0
 = 
√w
 
	`Fl_Box
(
X
, 
Y
, 
CTaskRow
::
unôWHs
[0].
x
, CTaskRow::unôWHs[0].
y
);

70 
X
 +
b0
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[0].
x
;

71 
b0
 = 
√w
 
	`Fl_Box
(
X
, 
Y
,
CTaskRow
::
unôWHs
[1].
x
, CTaskRow::unôWHs[1].
y
);

74 
X
 +
b0
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[1].
x
;

75 
b0
 = 
√w
 
	`Fl_Box
(
X
, 
Y
,
CTaskRow
::
unôWHs
[2].
x
, CTaskRow::unôWHs[2].
y
);

78 
i
=3;i<10;i++)

80 
X
 +
b0
->
	`w
(Ë+ 
CTaskRow
::
unôS∑˚s
[
i
-1].
x
;

81 
b0
 = 
√w
 
	`Fl_Box
(
X
, 
Y
,
CTaskRow
::
unôWHs
[
i
].
x
, CTaskRow::unôWHs[i].
y
);

85 
group3
->
	`íd
();

86 
group3
->
	`Æign
(
FL_ALIGN_CLIP
);

91 
	}
}

94 
	gCTaskTabÀ
::
	$døw
()

96 
	`Ê_cﬁ‹
(
FL_BACKGROUND2_COLOR
);

97 
	`Ê_ª˘f
(
	`x
(),
	`y
(),
	`w
(),
	`h
());

99 
Fl_Group
::
	`døw
();

101 
	}
}

	@tasktable.h

2 #¥agm®
⁄˚


4 
	~<FL/Fl.H
>

5 
	~<FL/Fl_DoubÀ_Wödow.H
>

6 
	~<FL/Fl_Light_Buâ⁄.H
>

7 
	~<FL/Fl_I≈ut.H
>

8 
	~<FL/Ê_døw.H
>

9 
	~<FL/Fl_TabÀ.H
>

10 
	~"utûs/ötvec.h
"

11 
	~<FL/Fl_Sh¨ed_Image.H
>

12 
	~<FL/Fl_Image.H
>

16 ˛as†
	cCTaskTabÀ
:
public
 
Fl_Group


18 
¥Ÿe˘ed
:

19 
døw
();

21 
	mpublic
:

22 
CTaskTabÀ
(
x
, 
y
, 
w
, 
h
, c⁄° *
l
=0);

23 ~
CTaskTabÀ
();

24 
CL⁄gVe˘‹
 
	mvtRows
;

26 
SëSize
(
√wrows
);

27 
	mnDims
;

28 
Fl_Image
 *
	mrowImg
;

29 
OnAddRow
(
Fl_Widgë
 *
w
, *);

30 
OnDñRow
(
Fl_Widgë
*,*);

32 
	m¥iv©e
:

37 
	sCBäSåuc
{

38 
XPoöt
 
	m±
;

39 c⁄° * 
	mtùs
;

40 
Fl_CÆlback_p
 
	mp‚
;

	@tasktable2.cxx

2 
	~"èskrow.h
"

3 
	~"èskèbÀ.h
"

4 
	~"ui/imgd©a.h
"

5 
	~"utûs/utûs.h
"

6 
	~<FL/Ê_ask.H
>

8 
CBäSåuc
 
bäsSåuc
[];

10 
	gCTaskTabÀ
::
	$OnAddRow
(
Fl_Widgë
 *
w
, *)

12 
CTaskRow
* 
oRow
 = (CTaskRow*)
w
->
	`∑ª¡
()->parent()->parent();

13 
CTaskTabÀ
* 
pThis
 = (CTaskTabÀ*)
oRow
->
	`∑ª¡
();

14 
nLöe
 = 
pThis
->
	`föd
(
oRow
);

16 
yOff£t
 = 
oRow
->
	`y
(Ë+ oRow->
	`h
();

17 
pThis
->
	`begö
();

18 
CTaskRow
* 
oNewRow
 = 
√w
 
	`CTaskRow
(0, 
yOff£t
, 
pThis
->
	`w
(), 35,"",0);

19 
yOff£t
=
oNewRow
->
	`BuûdRow
(1, yOff£t+5, 35, 
bäsSåuc
);

20 
oNewRow
->
	`íd
();

23 
Fl_Widgë
* 
oTaskLe·TimîPªv
 = ((
Fl_Group
*)
oRow
->
	`chûd
(0))->child(2);

24 
Fl_Widgë
* 
oTaskLe·Timî
 = ((
Fl_Group
*)
oNewRow
->
	`chûd
(0))->child(2);

25 
oTaskLe·Timî
->
	`ªsize
(oTaskLe·Timî->
	`x
(),

26 
oTaskLe·Timî
->
	`y
(),

27 
oTaskLe·TimîPªv
->
	`w
(),

28 
oTaskLe·Timî
->
	`h
());

30 
pThis
->
	`íd
();

32 
pThis
->
	`ö£π
(*
oNewRow
, 
nLöe
+1);

33 
pThis
->
vtRows
.
	`push_back
(()
oNewRow
);

35 
Fl_Group
 *
rzGroup
(Fl_Group*)
pThis
->
	`ªsizabÀ
();

36 
rzGroup
->
	`ªsize
‘zGroup->
	`x
(),rzGroup->
	`y
()+
oNewRow
->
	`h
(),rzGroup->
	`w
(),rzGroup->h());

38 
pThis
->
	`ªdøw
();

40 
	`Ê_Æît
("OnAddRow %d", 
nLöe
);

41 
	}
}

43 
	gCTaskTabÀ
::
	$OnDñRow
(
Fl_Widgë
 *
w
, *)

45 
CTaskRow
* 
oRow
 = (CTaskRow*)
w
->
	`∑ª¡
()->parent()->parent();

46 
CTaskTabÀ
* 
pThis
 = (CTaskTabÀ*)
oRow
->
	`∑ª¡
();

47 
nLöe
 = 
pThis
->
	`föd
(
oRow
);

49 
yOff£t
 = 
oRow
->
	`y
(Ë+ oRow->
	`h
();

51 
pThis
->
	`ªmove
(
oRow
);

52 
pThis
->
vtRows
.
	`îa£
(
nLöe
);

53 
pThis
->
	`ªdøw
();

55 
	`Ê_Æît
("OnDñRow %d", 
nLöe
);

56 
	}
}

	@test/auto_tmain.h

33 #i‚de‡
__AUTO_TMAIN_H_INCLUDED


34 
	#__AUTO_TMAIN_H_INCLUDED


	)

36 #i‡
deföed
(
__GNUC__
Ë&& deföed(
_UNICODE
)

38 #i‚de‡
__MSVCRT__


39 #îr‹ 
Unicode
 
maö
 
fun˘i⁄
 
ªquúes
 
lökög
 
to
 
MSVCRT


42 
	~<wch¨.h
>

43 
	~<°dlib.h
>

44 
	~"tch¨.h
"

46 #unde‡
_tmaö


47 #ifde‡
_UNICODE


48 
	#_tmaö
 
wmaö


	)

50 
	#_tmaö
 
maö


	)

54 
_CRT_glob
;

56 #ifde‡
__˝lu•lus


59 
__wgëmaö¨gs
(*,
wch¨_t
***,wchar_t***,,*);

61 #ifde‡
MAIN_USE_ENVP


62 
wmaö
(
¨gc
, 
wch¨_t
 *
¨gv
[], wch¨_à*
ívp
[]);

64 
wmaö
(
¨gc
, 
wch¨_t
 *
¨gv
[]);

67 
	$maö
()

69 
wch¨_t
 **
ípv
, **
¨gv
;

70 
¨gc
=0, 
si
 = 0;

71 
	`__wgëmaö¨gs
(&
¨gc
, &
¨gv
, &
ípv
, 
_CRT_glob
, &
si
);

72 #ifde‡
MAIN_USE_ENVP


73  
	`wmaö
(
¨gc
, 
¨gv
, 
ípv
);

75  
	`wmaö
(
¨gc
, 
¨gv
);

77 
	}
}

	@test/main.cxx

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<wch¨.h
>

5 
	~<öây≥s.h
>

6 
	~<loˇÀ.h
>

7 
	~<libxml/∑r£r.h
>

8 
	~<libxml/åì.h
>

9 
	~<uni°d.h
>

10 
	~<f˙é.h
>

11 
	~<FL/Ê_ask.H
>

13 
boﬁ
 
	$lﬂdTskXml
(c⁄° * 
ªsFûe
)

15 
xmlDocPå
 
doc
=0;

16 
xmlNodePå
 
cur
=0,
roŸ
;

17 
boﬁ
 
ªt
 = 
åue
;

19 if(
	`ac˚ss
(
ªsFûe
,0)==-1)

21  
Ál£
;

23 
	`xmlKìpBœnksDeÁu…
(0);

24 
xmlIndítTªeOuçut
 = 1 ;

26 
doc
 = 
	`xmlRódFûe
(
ªsFûe
, "UTF-8", 
XML_PARSE_NOBLANKS
 | 
XML_PARSE_NODICT
);

27 i‡(
doc
 =
NULL
 )

29 
	`Ê_Æît
("%†nŸÖ¨£d suc˚ssfuŒy.", 
ªsFûe
);

32 
roŸ
 = 
	`xmlDocGëRoŸEÀmít
(
doc
);

34 
	`xmlFªeDoc
(
doc
);

35 
	`xmlCÀ™upP¨£r
();

36  
ªt
;

37 
	}
}

39 
	$maö
(
¨gc
, ** 
¨gv
)

41 
	`£éoˇÀ
(
LC_ALL
, "");

43 
	ee
{

44 
E_ONE
=((()0x1)<<1),

45 
E_TWO
,

47 
wch¨_t
 
wc
;

48 
c
;

49 
	`¥ötf
("wch¨:%ld, ch¨: %ld\n",(
wc
), (
c
));

52 
wch¨_t
 
hñlo
[]=
L
"‰∏ñÁïå‰Ω†Â•ΩÔºÅ";

53 
	`¥ötf
("%ls, %d\n", 
hñlo
, (hello));

56 
	}
}

	@test/prichar.h

46 #i‚de‡
__PRICHAR_H_INCLUDED


47 
	#__PRICHAR_H_INCLUDED


	)

52 #i‡
deföed
 
__˝lu•lus


60 #i‡
deföed
(
_MSC_VER
)||deföed(
__BORLANDC__
)

62 
	#PRIcA
 "hc"

	)

63 
	#PRIsA
 "hs"

	)

64 #ñi‡
deföed
(
__GNUC__
)||deföed(
_WIN32
)||deföed(
_WIN64
)

66 #i‡
deföed
(
_UNICODE
)

67 
	#PRIcA
 "hc"

	)

68 
	#PRIsA
 "hs"

	)

70 
	#PRIcA
 "c"

	)

71 
	#PRIsA
 "s"

	)

75 
	#PRIcA
 "c"

	)

76 
	#PRIsA
 "s"

	)

85 
	#PRIcW
 "lc"

	)

86 
	#PRIsW
 "ls"

	)

93 #i‡
deföed
(
_WIN32
)||deföed(
_WIN64
)||deföed(
_MSC_VER
)

95 
	#PRIcT
 "c"

	)

96 
	#PRIsT
 "s"

	)

99 #i‡
deföed
(
_UNICODE
)

100 
	#PRIcT
 
PRIcW


	)

101 
	#PRIsT
 
PRIsW


	)

103 
	#PRIcT
 
PRIcA


	)

104 
	#PRIsT
 
PRIsA


	)

113 
	#SCNcA
 
PRIcA


	)

114 
	#SCNsA
 
PRIsA


	)

115 
	#SCNcW
 
PRIcW


	)

116 
	#SCNsW
 
PRIsW


	)

117 
	#SCNcT
 
PRIcT


	)

118 
	#SCNsT
 
PRIsT


	)

121 #i‡
deföed
 
__˝lu•lus


	@test/tcharall.c

23 
	~<°dio.h
>

24 
	~<loˇÀ.h
>

25 
	~<wch¨.h
>

27 
	~"auto_tch¨.h
"

29 
	~"¥ich¨.h
"

30 
	~"auto_tmaö.h
"

35 
	#MACTOSTR
(
x
Ë#x

	)

36 
	#MACROVALUESTR
(
x
Ë
	`MACTOSTR
(x)

	)

37 #i‡
deföed
(
__ICL
)

38 #i‡
deföed
(
__VERSION__
)

39 
	#COMPILER_NAME
 "I¡ñ C++ " 
__VERSION__


	)

40 #ñi‡
deföed
(
__INTEL_COMPILER_BUILD_DATE
)

41 
	#COMPILER_NAME
 "I¡ñ C++ (" 
	`MACROVALUESTR
(
__INTEL_COMPILER_BUILD_DATE
Ë")"

	)

43 
	#COMPILER_NAME
 "I¡ñ C++"

	)

45 #ñi‡
deföed
(
_MSC_VER
)

46 #i‡
deföed
(
_MSC_FULL_VER
)

47 
	#COMPILER_NAME
 "Mi¸oso· VC++ (" 
	`MACROVALUESTR
(
_MSC_FULL_VER
Ë")"

	)

48 #ñi‡
deföed
(
_MSC_VER
)

49 
	#COMPILER_NAME
 "Mi¸oso· VC++ (" 
	`MACROVALUESTR
(
_MSC_VER
Ë")"

	)

51 
	#COMPILER_NAME
 "Mi¸oso· VC++"

	)

53 #ñi‡
deföed
(
__GNUC__
)

54 #i‡
deföed
(
__CYGWIN__
)

55 
	#COMPILER_NAME
 "GCC(CygmöË" 
__VERSION__


	)

56 #ñi‡
deföed
(
__MINGW32__
)

57 
	#COMPILER_NAME
 "GCC(MöGWË" 
__VERSION__


	)

59 
	#COMPILER_NAME
 "GCC " 
__VERSION__


	)

61 #ñi‡
deföed
(
__TURBOC__
)

62 #i‡
deföed
(
__BCPLUSPLUS__
)

63 
	#COMPILER_NAME
 "B‹œnd C++ (" 
	`MACROVALUESTR
(
__BCPLUSPLUS__
Ë")"

	)

64 #ñi‡
deföed
(
__BORLANDC__
)

65 
	#COMPILER_NAME
 "B‹œnd C (" 
	`MACROVALUESTR
(
__BORLANDC__
Ë")"

	)

67 
	#COMPILER_NAME
 "TurbÿC (" 
	`MACROVALUESTR
(
__TURBOC__
Ë")"

	)

70 
	#COMPILER_NAME
 "Unknow¿Compûî"

	)

74 * 
	gpß
 = "AÊ±âÂ≠óABC_Welcome_Ê≠°Ëøé_„Çà„ÅÜ„Åì„Åù_ÌôòÏòÅ.";

75 
wch¨_t
* 
	gpsw
 = 
L
"WÊ±âÂ≠óABC_Welcome_Ê≠°Ëøé_„Çà„ÅÜ„Åì„Åù_ÌôòÏòÅ.";

76 
TCHAR
* 
	gp°
 = 
_T
("TÊ±âÂ≠óABC_Welcome_Ê≠°Ëøé_„Çà„ÅÜ„Åì„Åù_ÌôòÏòÅ.");

79 
	$_tmaö
(
¨gc
, 
TCHAR
* 
¨gv
[])

82 
	`£éoˇÀ
(
LC_ALL
, "");

85 
	`_çrötf
(
	`_T
("tcharall v1.00 (%dbit)\n"), ()(8*(*)));

86 
	`_çrötf
(
	`_T
("Compûî: %")_T(
PRIsA
)_T("\n"), 
COMPILER_NAME
);

87 
	`_çrötf
(
	`_T
("\n"));

90 
	`_çrötf
(
	`_T
("%")_T(
PRIsA
)_T("\n"), 
pß
);

91 
	`_çrötf
(
	`_T
("%")_T(
PRIsW
)_T("\n"), 
psw
);

92 
	`_çrötf
(
	`_T
("%")_T(
PRIsT
)_T("\n"), 
p°
);

96 
	}
}

	@tsktimer/TskTimer.cxx

2 #ifde‡
WIN32


3 
	~<wödows.h
>

4 
	~<tch¨.h
>

6 
	~<°dio.h
>

7 
	~"../ö˛ude/auto_tch¨.h
"

10 
	~"TskTimî.h
"

11 
	~"../utûs/utûs.h
"

14 #i‡
deföed
(
WIN32
Ë&& deföed(
_DEBUG
)

15 
	#√w
 
DEBUG_NEW


	)

18 
	gCP¨ams
::
	$CP¨ams
()

20 
chTy≥
 =0x0;

21 
m_nId
 = 0;

23 
m_pP¨am0
 = 0;

24 
m_pP¨am1
 = 0;

25 
m_pP¨am2
 = 0;

26 
	}
}

28 
	gCP¨ams
::~
	$CP¨ams
()

30 i‡(
m_pP¨am0
)

32 
dñëe
 []
m_pP¨am0
;m_pParam0=0;

35 i‡(
m_pP¨am1
)

37 
dñëe
 []
m_pP¨am1
;m_pParam1=0;

40 i‡(
m_pP¨am2
)

42 
dñëe
 []
m_pP¨am2
;m_pParam2=0;

44 
	}
}

46 
	gCP¨ams
::
	$CP¨ams
(c⁄° 
CP¨ams
& 
Ÿhî
)

48 *
this
 = 
Ÿhî
;

49 
	}
}

51 
	gCP¨ams
::
	$C›yP¨am
(
TCHAR
*& 
pDes
, TCHAR* 
pSrc
)

53 i‡(
pSrc
)

55 
nLí
 = 
	`_tc¶í
(
pSrc
)+1;

56 i‡(
nLí
 >1)

58 i‡(
pDes
)

60 
dñëe
[] 
pDes
;

62 
pDes
 = 
√w
 
TCHAR
[
nLí
];

63 
	`_tcs˝y
(
pDes
, 
pSrc
);

66 
	}
}

68 
	gCP¨ams
& CP¨ams::
›î©‹
=(c⁄° 
CP¨ams
& 
Ÿhî
)

70 i‡(
this
 !&
Ÿhî
)

72 
chTy≥
 = 
Ÿhî
.chType;

73 
	gnLí
 = 0;

75 
	gCP¨ams
::
C›yP¨am
(
m_pP¨am0
, 
Ÿhî
.m_pParam0);

76 
	gCP¨ams
::
C›yP¨am
(
m_pP¨am1
, 
Ÿhî
.m_pParam1);

77 
	gCP¨ams
::
C›yP¨am
(
m_pP¨am2
, 
Ÿhî
.m_pParam2);

79  *
	gthis
;

83 
	gCTskTimî
::
	$CTskTimî
()

85 
m_pTskName
 = 0;

86 
m_pTime
 = 0;

87 
m_pNextTrigTime
=0;

88 
m_pOff£t
 = 
√w
 
CP¨ams
;

89 
m_pFªq
 = 
√w
 
CP¨ams
;

90 
m_pA˘i⁄s
 = 0;

91 
m_nA˘i⁄sCou¡
=0;

93 
m_pChûdsE¡ry
 = 0;

95 
m_nId
 = -1;

96 
m_nSèã
 = 0;

97 
m_ŒTŸÆEœp£
=0;

98 #ifde‡
WIN32


99 
m_hPau£Evít


100 
	`Cª©eSem≠h‹e
(

101 
NULL
,

104 
NULL


107 
m_bP¨ít
 = 
Ál£
;

108 
	}
}

110 
	gCTskTimî
::
	$Lock
()

112 #ifde‡
WIN32


113 
	`WaôF‹SögÀObje˘
–
m_hPau£Evít
, 
INFINITE
);

115 
	}
}

117 
	gCTskTimî
::
	$UnLock
()

119 #ifde‡
WIN32


120 
	`Rñó£Sem≠h‹e
(
m_hPau£Evít
, 1, 
NULL
);

122 
	}
}

124 
	gCTskTimî
::
	$Aµíd
(
CLi°Hód
* 
pLi°Hódî
, 
CTskTimî
* 
p
)

126 
p
->
m_Li°E¡ry
.
√xt
 = 
pLi°Hódî
->next;

127 
p
->
m_Li°E¡ry
.
¥ev
 = 
pLi°Hódî
;

129 
pLi°Hódî
->
√xt
->
¥ev
 = &
p
->
m_Li°E¡ry
;

130 
pLi°Hódî
->
√xt
 = &
p
->
m_Li°E¡ry
;

131 
	}
}

133 
	gCTskTimî
::
	$Dñ
(
CTskTimî
* 
pTsk
)

135 
CLi°Hód
* 
∂i°E¡ry
 = &
pTsk
->
m_Li°E¡ry
;

136 
∂i°E¡ry
->
¥ev
->
√xt
 =ÖlistEntry->next;

137 
∂i°E¡ry
->
√xt
->
¥ev
 =ÖlistEntry->prev;

138 
	}
}

140 
	gCTskTimî
::~
	$CTskTimî
()

142 
m_nSèã
 = 
STOP
;

143 
	`UnLock
();

145 i‡(
m_pTskName
)

147 
dñëe
[] 
m_pTskName
;m_pTskName=0;

150 i‡(
m_pTime
)

152 
dñëe
 
m_pTime
;m_pTime=0;

155 i‡(
m_pNextTrigTime
)

157 
dñëe
 
m_pNextTrigTime
;m_pNextTrigTime=0;

160 i‡(
m_pOff£t
)

162 
dñëe
 
m_pOff£t
;m_pOffset=0;

165 i‡(
m_pFªq
)

167 
dñëe
 
m_pFªq
;m_pFreq=0;

170 i‡(
m_pA˘i⁄s
)

172 
i
=0;i<
m_nA˘i⁄sCou¡
;i++)

174 
dñëe
 
m_pA˘i⁄s
[
i
];

176 
dñëe
[] 
m_pA˘i⁄s
;m_pActions=0;

179 i‡(
m_pChûdsE¡ry
)

181 
CLi°Hód
* 
∂i°E¡ry
 = &
m_pChûdsE¡ry
->
m_Li°E¡ry
;

182 
CLi°Hód
* 
pLi°
 = 
∂i°E¡ry
->
√xt
;ÖList !=ÖlistEntry ; )

184 
CTskTimî
* 
p
 = 
	`CONTAINING_RECORD
(
pLi°
, CTskTimî, 
m_Li°E¡ry
);

185 
pLi°
 =ÖLi°->
√xt
;

186 
dñëe
 
p
;

188 
dñëe
 
m_pChûdsE¡ry
;

191 #ifde‡
WIN32


192 ::
	`Clo£H™dÀ
–
m_hPau£Evít
 );

194 
	}
}

	@tsktimer/TskTimer.h

1 #¥agm®
⁄˚


2 
	~"../ö˛ude/ma¸odef.h
"

4 ˛as†
	cCP¨ams


6 
	mpublic
:

7 
CP¨ams
();

8 
CP¨ams
(c⁄° CP¨ams& 
Ÿhî
);

10 ~
CP¨ams
();

11 
	mm_nId
;

12 
	mchTy≥
;

13 
TCHAR
* 
	mm_pP¨am0
;

14 
TCHAR
* 
	mm_pP¨am1
;

15 
TCHAR
* 
	mm_pP¨am2
;

17 
C›yP¨am
(
TCHAR
*& 
pDes
, TCHAR* 
pSrc
);

18 
	mCP¨ams
& 
	m›î©‹
=(c⁄° 
CP¨ams
& 
Ÿhî
);

22 
	sCLi°Hód


24 
CLi°Hód
 *
	m¥ev
,*
	m√xt
;

25 
CLi°Hód
()

27 
	m¥ev
 = 
√xt
 = 
this
;

32 
	eTSKSTATE


34 
	mRUNNING
 = 0x1,

35 
	mSTOP
 = 0x2,

36 
	mPAUSE
 = (()0x1)<<2,

37 
	mFORDELETE
 = (()0x1)<<3,

38 
	mEXPIRED
 = (()0x1)<<4

41 ˛as†
	cCTskTimî


43 
	mpublic
:

44 
CLi°Hód
 
m_Li°E¡ry
;

46 
CTskTimî
();

47 ~
CTskTimî
();

49 
	mm_nId
;

50 
	mm_nA˘i⁄sCou¡
;

51 
	mm_nSèã
;

53 
LONGLONG
 
	mm_ŒTŸÆEœp£
;

54 
boﬁ
 
	mm_bP¨ít
;

56 
TCHAR
* 
	mm_pTskName
;

57 
CP¨ams
* 
	mm_pTime
;

58 
CP¨ams
* 
	mm_pNextTrigTime
;

60 
CP¨ams
* 
	mm_pOff£t
;

61 
CP¨ams
* 
	mm_pFªq
;

62 
CP¨ams
** 
	mm_pA˘i⁄s
;

63 
CTskTimî
* 
	mm_pChûdsE¡ry
;

66 
Aµíd
(
CLi°Hód
* 
pLi°Hódî
, 
CTskTimî
* 
pTsk
);

67 
Dñ
(
CTskTimî
* 
pTsk
);

68 #ifde‡
WIN32


69 
HANDLE
 
	mm_hPau£Evít
;

70 
Lock
();

71 
UnLock
();

	@tsktimer/TskTimerMgr.h

1 #¥agm®
⁄˚


3 
«me•a˚
 
	gJWXml


5 
˛ass
 
	gCXmlNodes
;

6 
˛ass
 
	gCXmlNode
;

9 
UINT
 
ngUpd©eLe·TimeMsg
;

10 
UINT
 
ngTrigTskMsg
;

12 ˛as†
	c__de˛•ec
(
dŒexp‹t
Ë
CTskTimîMgr


14 
public
:

15 
	`CTskTimîMgr
(
HWND
 
hWnd
,
˛ass
 
CMemM≠Xml
* );

16 ~
	`CTskTimîMgr
();

18 
˛ass
 
CTskTimî
* 
m_pTskTimîE¡ry
;

19 
˛ass
 
CMemM≠Xml
* 
m_pMemM≠Xml
;

20 
boﬁ
 
	`gëTskTimîById
(
IN
 
CTskTimî
* 
pTskTimîE¡ry
, IN 
nId
, 
OUT
 CTskTimî** 
pTskTimî
);

21 
CTskTimîMgr
::
	`CÀ¨AŒTimîs
(
CTskTimî
* 
pTskTimî
);

23 
boﬁ
 
CTskTimîMgr
::
	`AddTskTimîs
(
IN
 
BYTE
* 
psXml
, IN 
CTskTimî
* 
pTskTimîE¡ry
);

24 
boﬁ
 
CTskTimîMgr
::
	`AddTskTimî
(
IN
 
BYTE
* 
psXml
, IN 
CTskTimî
* 
pTskTimîE¡ry
,boﬁ 
bAsP¨ít
);

25 
boﬁ
 
CTskTimîMgr
::
	`DñTskTimî
(
IN
 
BYTE
* 
psXml
);

26 
boﬁ
 
CTskTimîMgr
::
	`DñTskTimîById
(
nId
);

28 
CTskTimîMgr
::
	`XmlNodeToTsk
(
IN
 
JWXml
::
CXmlNode
* 
ndTsk
,IN 
OUT
 
CTskTimî
* 
p
);

30 
	`P¨£ChûdXml
(
JWXml
::
CXmlNodes
* 
ndTsks
,
IN
 
OUT
 
CTskTimî
* 
pTskTimîE¡ry
,
boﬁ
 
bAsP¨ít
);

31 
	`P¨£Xml
(
BYTE
* 
psXml
);

33 
boﬁ
 
CTskTimîMgr
::
	`SèπSögÀTimîTsk
(
CTskTimî
* 
p
);

34 
CTskTimîMgr
::
	`SèπTimîTsk
(
˛ass
 
CLi°Hód
* 
∂i°E¡ry
);

38 
LONGLONG
 
CTskTimîMgr
::
	`GëTimeE•a£
(
˛ass
 
CP¨ams
* 
pOff£t
 );

39 
LONGLONG
 
CTskTimîMgr
::
	`GëFªqE•a£
(
˛ass
 
CP¨ams
* 
pFªq
, c⁄° LONGLONG 
ŒTŸÆSecsOff£tNow
);

40 
LONGLONG
 
CTskTimîMgr
::
	`GëOff£tE•a£
(
˛ass
 
CP¨ams
* 
pFªq
);

41 
boﬁ
 
CTskTimîMgr
::
	`C™DñTsk
(
IN
 
CTskTimî
* 
pTskTimîE¡ry
);

42 
CTskTimîMgr
::
	`GëDaysOfCuºM⁄th
(
nM⁄th
, 
nYór
);

43 
boﬁ
 
CTskTimîMgr
::
	`GëD©eNxtDays
(
y
,
m
,
d
,& 
√wY
,& 
√wM
,& 
√wD
,
nOff£tDays
);

44 
boﬁ
 
CTskTimîMgr
::
	`GëD©eNxtSecs
(* 
pY
, * 
pM⁄
, * 
pD
, * 
pH
, * 
pMö
, * 
pS
, 
nOff£tSecs
);

46 
HWND
 
m_hOwnWnd
;

	@ui/imgdata.h

2 #¥agm®
⁄˚


4 c⁄° 
maö_≤g
[];

5 c⁄° 
edô_≤g
[];

	@ui/mainicon.cxx

1 
	~"imgd©a.h
"

2 c⁄° 
	gmaö_≤g
[] = {

	@ui/rowicon.cxx

1 
	~"imgd©a.h
"

3 c⁄° 
	gedô_≤g
[] = {

	@utils/intvec.h

2 #¥agm®
⁄˚


5 ˛as†
	cFL_EXPORT
 
	mCL⁄gVe˘‹


7 *
	m¨r
;

8 
	m_size
;

9 
	$öô
()

11 
¨r
 = 
NULL
;

12 
_size
 = 0;

15 
	$c›y
(*
√w¨r
, 
√wsize
)

17 
	`size
(
√wsize
);

18 
	`mem˝y
(
¨r
, 
√w¨r
, 
√wsize
 * ());

19 
	}
}

21 
	gpublic
:

22 
	$CL⁄gVe˘‹
(Ë{ 
	`öô
(); 
	}
}

23 ~
	$CL⁄gVe˘‹
(Ë{ i‡–
¨r
 ) 
	`‰ì
◊º);áº = 
NULL
; 
	}
}

24 
	$CL⁄gVe˘‹
(
CL⁄gVe˘‹
 &
o
Ë{ 
	`öô
(); 
	`c›y
(o.
¨r
, o.
_size
); 
	}
}

25 
	gCL⁄gVe˘‹
& 
	g›î©‹
=(
CL⁄gVe˘‹
&
o
)

27 
öô
();

28 
c›y
(
o
.
¨r
, o.
_size
);

29 (*
	gthis
);

31 
	g›î©‹
[](
	gx
Ëc⁄° { (
	g¨r
[
x
]); }

32 & 
	g›î©‹
[](
	gx
Ë{ (
	g¨r
[
x
]); }

33 
	$size
(Ë{ (
_size
); 
	}
}

34 
	$size
(
cou¡
) {

35 i‡–
cou¡
 !
_size
 ) {

36 
¨r
 = (*)
	`ªÆloc
◊º, 
cou¡
 * ());

37 
_size
 = 
cou¡
;

39 
	}
}

40 
	$îa£
(
x
)

42 if(
x
<0 || x>
_size
)  0;

43 
¨r
[
x
]=0;

44 if(
x
 < 
_size
-1)

45 
	`mem˝y
(
¨r
 + 
x
 ,áº + (x+1), (
_size
-1 - x) * ());

46 
	}
}

47 
	$p›_back
(Ë{ 
tmp
 = 
¨r
[
_size
-1]; _size--; —mp); 
	}
}

48 
	$push_back
(
vÆ
Ë{ 
x
 = 
_size
; 
	`size
(_size+1); 
¨r
[x] = vÆ; 
	}
}

49 
	$back
(Ë{ (
¨r
[
_size
-1]); 
	}
}

	@utils/utils.cxx

2 
	~"utûs.h
"

3 
	~<FL/Fl_Image.H
>

4 
	~<FL/Fl_Tûed_Image.H
>

5 
	~<FL/Fl_Image_SurÁ˚.H
>

6 
	~<as£π.h
>

7 
	~<FL/Fl_Exp‹t.H
>

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<°rög.h
>

12 #ifde‡
HAVE_STRINGS_H


13 
	~<°rögs.h
>

15 
	~<˘y≥.h
>

18 
Fl_Image
* 
	gCUtû
::
	$c›y
(
Fl_Image
* 
§cImg
, 
x
, 
y
, 
W
, 
H
)

20 
Fl_RGB_Image
 *
√w_image
;

21 
uch¨
 *
√w_¨øy
;

22 c⁄° 
uch¨
* 
d©a_
 = (c⁄° uch¨*)
§cImg
->
	`d©a
()[0];

23 
D
 = 
§cImg
->
	`d
();

24 
LD
 = 
D
*
§cImg
->
	`w
();

25 if(
x
+
W
> 
§cImg
->
	`w
())

27 
x
 = 
§cImg
->
	`w
(Ë- 
W
;

29 if(
y
+
H
 > 
§cImg
->
	`h
())

31 
y
 = 
§cImg
->
	`h
(Ë- 
H
;

33 c⁄° 
uch¨
 *
§c
 = (c⁄° uch¨ *)
d©a_
+(
x
*
D
 + 
y
*
LD
);

35 i‡(
d©a_
)

38 
√w_¨øy
 = 
√w
 
uch¨
[
W
 * 
H
 * 
D
];

39 
uch¨
 *
d°
 = 
√w_¨øy
;

40 
wd
 = 
W
*
D
, 
wld
 = 
§cImg
->
	`w
()*D;

42 
dy
=0; dy<
H
; dy++)

44 
	`mem˝y
(
d°
, 
§c
, 
wd
);

45 
§c
 +
wld
;

46 
d°
 +
wd
;

49 
√w_image
 = 
√w
 
	`Fl_RGB_Image
(
√w_¨øy
, 
W
, 
H
, 
D
);

50 
√w_image
->
Æloc_¨øy
 = 1;

52  
√w_image
;

54  
√w
 
	`Fl_RGB_Image
(
§c
, 
W
, 
H
, 
D
, 
§cImg
->
	`ld
());

55 
	}
}

57 
Fl_RGB_Image
* 
	gCUtû
::
	$cutImg
(
Fl_Image
* 
§c
, 
x
, 
y
, 
w
, 
h
)

62 
	}
}

	@utils/utils.h

2 #¥agm®
⁄˚


3 
	~"FL/Fl_Image.H
"

4 
	~"FL/Fl_RGB_Image.H
"

6 ˛as†
	cCUtû


8 
	mpublic
:

9 
Fl_RGB_Image
* 
cutImg
(
Fl_Image
* 
§c
, 
x
, 
y
, 
w
, 
h
);

10 
Fl_Image
* 
c›y
(Fl_Image* 
§cImg
, 
x
, 
y
, 
W
, 
H
);

	@/home/lixing/include/FL/Fl.H

23 #i‚de‡
Fl_H


24 
	#Fl_H


	)

26 #ifde‡
FLTK_HAVE_CAIRO


27 
	~<FL/Fl_Caúo.H
>

30 
	~"Ê_utf8.h
"

31 
	~"Enumî©i⁄s.H
"

32 #i‚de‡
Fl_Obje˘


33 
	#Fl_Obje˘
 
Fl_Widgë


	)

36 #ifde‡
check


37 #unde‡
check


41 
˛ass
 
	gFl_Widgë
;

42 
˛ass
 
	gFl_Wödow
;

43 
˛ass
 
	gFl_Image
;

44 
	gFl_Labñ
;

47 #i‡
deföed
(
WIN32
Ë&& !deföed(
__CYGWIN__
)

48 #i‡
deföed
(
_WIN64
)

49 
	#FL_SOCKET
 
__öt64


	)

51 
	#FL_SOCKET
 

	)

54 
	#FL_SOCKET
 

	)

73 (
	tFl_Labñ_Døw_F
)(c⁄° 
	tFl_Labñ
 *
	tœbñ
, 
	tx
, 
	ty
, 
	tw
, 
	th
, 
	tFl_Align
 
	tÆign
);

76 (
	tFl_Labñ_Mósuª_F
)(c⁄° 
	tFl_Labñ
 *
	tœbñ
, &
	twidth
, &
	theight
);

79 (
	tFl_Box_Døw_F
)(
	tx
, 
	ty
, 
	tw
, 
	th
, 
	tFl_Cﬁ‹
 
	tcﬁ‹
);

82 (*
	tFl_Timeout_H™dÀr
)(*
	td©a
);

85 (*
	tFl_Awake_H™dÀr
)(*
	td©a
);

88 (*
	tFl_IdÀ_H™dÀr
)(*
	td©a
);

91 (*
	tFl_Old_IdÀ_H™dÀr
)();

94 (*
	tFl_FD_H™dÀr
)(
	tFL_SOCKET
 
	tfd
, *
	td©a
);

97 (*
	tFl_Evít_H™dÀr
)(
	tevít
);

100 (*
	tFl_Sy°em_H™dÀr
)(*
	tevít
, *
	td©a
);

103 (*
	tFl_Ab‹t_H™dÀr
)(c⁄° *
	tf‹m©
,...);

106 (*
	tFl_At˛o£_H™dÀr
)(
	tFl_Wödow
 *
	twödow
, *
	td©a
);

109 (*
	tFl_Args_H™dÀr
)(
	t¨gc
, **
	t¨gv
, &
	ti
);

113 (*
	tFl_Evít_Di•©ch
)(
	tevít
, 
	tFl_Wödow
 *
	tw
);

116 (*
	tFl_Clùbﬂrd_NŸify_H™dÀr
)(
	tsour˚
, *
	td©a
);

125 ˛as†
	cFL_EXPORT
 
Fl
 {

126 
	$Fl
() {};

128 
public
:

129 #i‚de‡
FL_DOXYGEN


130 
e_numbî
;

131 
e_x
;

132 
e_y
;

133 
e_x_roŸ
;

134 
e_y_roŸ
;

135 
e_dx
;

136 
e_dy
;

137 
e_°©e
;

138 
e_˛icks
;

139 
e_is_˛ick
;

140 
e_keysym
;

141 * 
e_ãxt
;

142 
e_Àngth
;

143 *
e_˛ùbﬂrd_d©a
;

144 c⁄° *
e_˛ùbﬂrd_ty≥
;

145 
Fl_Evít_Di•©ch
 
e_di•©ch
;

146 
Fl_Widgë
* 
bñowmou£_
;

147 
Fl_Widgë
* 
pushed_
;

148 
Fl_Widgë
* 
focus_
;

149 
damage_
;

150 
Fl_Widgë
* 
£À˘i⁄_ow√r_
;

151 
Fl_Wödow
* 
modÆ_
;

152 
Fl_Wödow
* 
gøb_
;

153 
compo£_°©e
;

154 
	`ˇŒ_s¸ìn_öô
();

155 #ifde‡
__APPLE__


156 
	`ª£t_m¨ked_ãxt
();

157 
	`ö£πi⁄_poöt_loˇti⁄
(
x
, 
y
, 
height
);

165 
	$damage
(
d
Ë{
damage_
 = d;
	}
}

167 
	gpublic
:

184 
OPTION_ARROW_FOCUS
 = 0,

199 
	gOPTION_VISIBLE_FOCUS
,

203 
	gOPTION_DND_TEXT
,

207 
	gOPTION_SHOW_TOOLTIPS
,

211 
	gOPTION_FNFC_USES_GTK
,

214 
	gOPTION_LAST


215 } 
	tFl_O±i⁄
;

217 
	g¥iv©e
:

218 
›ti⁄s_
[
OPTION_LAST
];

219 
	g›ti⁄s_ªad_
;

221 
	gpublic
:

226 
boﬁ
 
›ti⁄
(
Fl_O±i⁄
 
›t
);

231 
›ti⁄
(
Fl_O±i⁄
 
›t
, 
boﬁ
 
vÆ
);

240 (*
	gidÀ
)();

242 #i‚de‡
FL_DOXYGEN


243 
Fl_Awake_H™dÀr
 *
	gawake_rög_
;

244 **
	gawake_d©a_
;

245 
	gawake_rög_size_
;

246 
	gawake_rög_hód_
;

247 
	gawake_rög_èû_
;

248 c⁄° * 
	gscheme_
;

249 
Fl_Image
* 
	gscheme_bg_
;

251 
	ge_‹igöÆ_keysym
;

252 
	gs¸ﬁlb¨_size_
;

256 
add_awake_h™dÀr_
(
Fl_Awake_H™dÀr
, *);

257 
gë_awake_h™dÀr_
(
Fl_Awake_H™dÀr
&, *&);

259 
	gpublic
:

262 
vîsi⁄
();

265 
¨g
(
¨gc
, **
¨gv
, & 
i
);

266 
¨gs
(
¨gc
, **
¨gv
, & 
i
, 
Fl_Args_H™dÀr
 
cb
 = 0);

267 
¨gs
(
¨gc
, **
¨gv
);

272 c⁄° * c⁄° 
	ghñp
;

275 
di•œy
(const *);

276 
visuÆ
();

286 
gl_visuÆ
(, *
Æi°
=0);

287 
own_cﬁ‹m≠
();

288 
gë_sy°em_cﬁ‹s
();

289 
f‹eground
(
uch¨
, uchar, uchar);

290 
background
(
uch¨
, uchar, uchar);

291 
background2
(
uch¨
, uchar, uchar);

294 
scheme
(c⁄° *
«me
);

296 c⁄° * 
	$scheme
(Ë{ 
scheme_
;
	}
}

325 
	$is_scheme
(c⁄° *
«me
) {

326  (
scheme_
 && 
«me
 && !
	`°rcmp
(name,scheme_));

327 
	}
}

333 
ªlﬂd_scheme
();

334 
s¸ﬁlb¨_size
();

335 
s¸ﬁlb¨_size
(
W
);

338 
waô
();

339 
waô
(
time
);

340 
check
();

341 
ªady
();

342 
run
();

343 
Fl_Widgë
* 
ªadqueue
();

370 
add_timeout
(
t
, 
Fl_Timeout_H™dÀr
,* = 0);

391 
ª≥©_timeout
(
t
, 
Fl_Timeout_H™dÀr
, * = 0);

392 
has_timeout
(
Fl_Timeout_H™dÀr
, * = 0);

393 
ªmove_timeout
(
Fl_Timeout_H™dÀr
, * = 0);

394 
add_check
(
Fl_Timeout_H™dÀr
, * = 0);

395 
has_check
(
Fl_Timeout_H™dÀr
, * = 0);

396 
ªmove_check
(
Fl_Timeout_H™dÀr
, * = 0);

416 
add_fd
(
fd
, 
whí
, 
Fl_FD_H™dÀr
 
cb
, * = 0);

418 
add_fd
(
fd
, 
Fl_FD_H™dÀr
 
cb
, * = 0);

420 
ªmove_fd
(, 
whí
);

422 
ªmove_fd
();

424 
add_idÀ
(
Fl_IdÀ_H™dÀr
 
cb
, * 
d©a
 = 0);

425 
has_idÀ
(
Fl_IdÀ_H™dÀr
 
cb
, * 
d©a
 = 0);

426 
ªmove_idÀ
(
Fl_IdÀ_H™dÀr
 
cb
, * 
d©a
 = 0);

428 
	$damage
(Ë{ 
damage_
;
	}
}

429 
ªdøw
();

430 
Êush
();

451 (*
w¨nög
)(const *, ...);

466 (*
îr‹
)(const *, ...);

483 (*
Áèl
)(const *, ...);

489 
Fl_Wödow
* 
	`fú°_wödow
();

490 
	`fú°_wödow
(
Fl_Wödow
*);

491 
Fl_Wödow
* 
	`√xt_wödow
(const Fl_Window*);

502 
Fl_Wödow
* 
	$modÆ
(Ë{ 
modÆ_
;
	}
}

508 
Fl_Wödow
* 
	$gøb
(Ë{ 
gøb_
;
	}
}

533 
gøb
(
Fl_Wödow
*);

546 
	$evít
(Ë{ 
e_numbî
;
	}
}

551 
	$evít_x
(Ë{ 
e_x
;
	}
}

556 
	$evít_y
(Ë{ 
e_y
;
	}
}

563 
	$evít_x_roŸ
(Ë{ 
e_x_roŸ
;
	}
}

570 
	$evít_y_roŸ
(Ë{ 
e_y_roŸ
;
	}
}

575 
	$evít_dx
(Ë{ 
e_dx
;
	}
}

580 
	$evít_dy
(Ë{ 
e_dy
;
	}
}

589 
gë_mou£
(&,&);

598 
	$evít_˛icks
(Ë{ 
e_˛icks
;
	}
}

606 
	$evít_˛icks
(
i
Ë{
e_˛icks
 = i;
	}
}

614 
	$evít_is_˛ick
(Ë{ 
e_is_˛ick
;
	}
}

621 
	$evít_is_˛ick
(
i
Ë{
e_is_˛ick
 = i;
	}
}

628 
	$evít_buâ⁄
(Ë{ 
e_keysym
-
FL_Buâ⁄
;
	}
}

652 
	$evít_°©e
(Ë{ 
e_°©e
;
	}
}

654 
	$evít_°©e
(
i
Ë{ 
e_°©e
&i;
	}
}

666 
	$evít_key
(Ë{ 
e_keysym
;
	}
}

675 
	$evít_‹igöÆ_key
(){ 
e_‹igöÆ_keysym
;
	}
}

714 
evít_key
(
key
);

720 
gë_key
(
key
);

735 c⁄° * 
	$evít_ãxt
(Ë{ 
e_ãxt
;
	}
}

742 
	$evít_Àngth
(Ë{ 
e_Àngth
;
	}
}

747 *
	$evít_˛ùbﬂrd
(Ë{  
e_˛ùbﬂrd_d©a
; 
	}
}

751 c⁄° *
	$evít_˛ùbﬂrd_ty≥
(Ë{ 
e_˛ùbﬂrd_ty≥
; 
	}
}

754 
compo£
(&
dñ
);

755 
compo£_ª£t
();

756 
evít_öside
(,,,);

757 
evít_öside
(c⁄° 
Fl_Widgë
*);

758 
ã°_sh‹tcut
(
Fl_Sh‹tcut
);

764 
íabÀ_im
();

769 
dißbÀ_im
();

772 
h™dÀ
(, 
Fl_Wödow
*);

773 
h™dÀ_
(, 
Fl_Wödow
*);

776 
Fl_Widgë
* 
	$bñowmou£
(Ë{ 
bñowmou£_
;
	}
}

777 
bñowmou£
(
Fl_Widgë
*);

780 
Fl_Widgë
* 
	$pushed
(Ë{ 
pushed_
;
	}
}

781 
pushed
(
Fl_Widgë
*);

783 
Fl_Widgë
* 
	$focus
(Ë{ 
focus_
;
	}
}

784 
focus
(
Fl_Widgë
*);

785 
add_h™dÀr
(
Fl_Evít_H™dÀr
 
h
);

786 
ªmove_h™dÀr
(
Fl_Evít_H™dÀr
 
h
);

787 
add_sy°em_h™dÀr
(
Fl_Sy°em_H™dÀr
 
h
, *
d©a
);

788 
ªmove_sy°em_h™dÀr
(
Fl_Sy°em_H™dÀr
 
h
);

789 
evít_di•©ch
(
Fl_Evít_Di•©ch
 
d
);

790 
Fl_Evít_Di•©ch
 
evít_di•©ch
();

811 #i‡
FLTK_ABI_VERSION
 >10303 || 
	$deföed
(
FL_DOXYGEN
)

812 
	`c›y
(c⁄° * 
°uff
, 
Àn
, 
de°ö©i⁄
 = 0, c⁄° *
ty≥
 = 
Fl
::
˛ùbﬂrd_∂aö_ãxt
);

814 
	`c›y
(c⁄° * 
°uff
, 
Àn
, 
de°ö©i⁄
, c⁄° *
ty≥
);

815 
	`c›y
(c⁄° * 
°uff
, 
Àn
, 
de°ö©i⁄
 = 0);

818 #i‡!(
	`deföed
(
__APPLE__
Ë|| deföed(
WIN32
Ë|| 
	$deföed
(
FL_DOXYGEN
))

819 
	`c›y_image
(c⁄° * 
d©a
, 
W
, 
H
, 
de°ö©i⁄
 = 0);

852 #i‡
FLTK_ABI_VERSION
 >10303 || 
	$deföed
(
FL_DOXYGEN
)

853 
	`∑°e
(
Fl_Widgë
 &
ª˚ivî
, 
sour˚
, c⁄° *
ty≥
 = 
Fl
::
˛ùbﬂrd_∂aö_ãxt
);

855 
	`∑°e
(
Fl_Widgë
 &
ª˚ivî
, 
sour˚
, c⁄° *
ty≥
);

856 
	`∑°e
(
Fl_Widgë
 &
ª˚ivî
, 
sour˚
 );

879 
	`add_˛ùbﬂrd_nŸify
(
Fl_Clùbﬂrd_NŸify_H™dÀr
 
h
, *
d©a
 = 0);

884 
	`ªmove_˛ùbﬂrd_nŸify
(
Fl_Clùbﬂrd_NŸify_H™dÀr
 
h
);

888 
	`˛ùbﬂrd_c⁄èös
(c⁄° *
ty≥
);

891 c⁄° * c⁄° 
˛ùbﬂrd_∂aö_ãxt
;

894 c⁄° * c⁄° 
˛ùbﬂrd_image
;

905 
	`dnd
();

910 
Fl_Widgë
* 
	$£À˘i⁄_ow√r
(Ë{ 
£À˘i⁄_ow√r_
;
	}
}

911 
£À˘i⁄_ow√r
(
Fl_Widgë
*);

912 
£À˘i⁄
(
Fl_Widgë
 &
ow√r
, c⁄° *, 
Àn
);

913 
∑°e
(
Fl_Widgë
 &
ª˚ivî
);

920 
x
();

922 
y
();

924 
w
();

926 
h
();

929 
s¸ìn_cou¡
();

935 
	$s¸ìn_xywh
(&
X
, &
Y
, &
W
, &
H
) {

936 
x
, 
y
;

937 
Fl
::
	`gë_mou£
(
x
, 
y
);

938 
	`s¸ìn_xywh
(
X
, 
Y
, 
W
, 
H
, 
x
, 
y
);

939 
	}
}

940 
s¸ìn_xywh
(&
X
, &
Y
, &
W
, &
H
, 
mx
, 
my
);

941 
s¸ìn_xywh
(&
X
, &
Y
, &
W
, &
H
, 
n
);

942 
s¸ìn_xywh
(&
X
, &
Y
, &
W
, &
H
, 
mx
, 
my
, 
mw
, 
mh
);

943 
s¸ìn_num
(
x
, 
y
);

944 
s¸ìn_num
(
x
, 
y
, 
w
, 
h
);

945 
s¸ìn_dpi
(&
h
, &
v
, 
n
=0);

946 
s¸ìn_w‹k_¨ó
(&
X
, &
Y
, &
W
, &
H
, 
mx
, 
my
);

947 
s¸ìn_w‹k_¨ó
(&
X
, &
Y
, &
W
, &
H
, 
n
);

953 
	$s¸ìn_w‹k_¨ó
(&
X
, &
Y
, &
W
, &
H
) {

954 
x
, 
y
;

955 
Fl
::
	`gë_mou£
(
x
, 
y
);

956 
	`s¸ìn_w‹k_¨ó
(
X
, 
Y
, 
W
, 
H
, 
x
, 
y
);

957 
	}
}

967 
£t_cﬁ‹
(
Fl_Cﬁ‹
, 
uch¨
, uchar, uchar);

972 
£t_cﬁ‹
(
Fl_Cﬁ‹
 
i
, 
c
);

973 
gë_cﬁ‹
(
Fl_Cﬁ‹
 
i
);

974 
gë_cﬁ‹
(
Fl_Cﬁ‹
 
i
, 
uch¨
 &
ªd
, uch¨ &
gªí
, uch¨ &
blue
);

980 
‰ì_cﬁ‹
(
Fl_Cﬁ‹
 
i
, 
ovîœy
 = 0);

983 c⁄° * 
gë_f⁄t
(
Fl_F⁄t
);

996 c⁄° * 
gë_f⁄t_«me
(
Fl_F⁄t
, * 
©åibuãs
 = 0);

1008 
gë_f⁄t_sizes
(
Fl_F⁄t
, *& 
sizï
);

1009 
£t_f⁄t
(
Fl_F⁄t
, const *);

1010 
£t_f⁄t
(
Fl_F⁄t
, Fl_Font);

1029 
Fl_F⁄t
 
£t_f⁄ts
(const * = 0);

1041 
£t_œbñty≥
(
Fl_Labñty≥
,
Fl_Labñ_Døw_F
*,
Fl_Labñ_Mósuª_F
*);

1043 
£t_œbñty≥
(
Fl_Labñty≥
, Fl_Labñty≥ 
‰om
);

1046 
Fl_Box_Døw_F
 *
gë_boxty≥
(
Fl_Boxty≥
);

1047 
£t_boxty≥
(
Fl_Boxty≥
, 
Fl_Box_Døw_F
*,
uch¨
,uchar,uchar,uchar);

1048 
£t_boxty≥
(
Fl_Boxty≥
, Fl_Boxty≥ 
‰om
);

1049 
box_dx
(
Fl_Boxty≥
);

1050 
box_dy
(
Fl_Boxty≥
);

1051 
box_dw
(
Fl_Boxty≥
);

1052 
box_dh
(
Fl_Boxty≥
);

1053 
døw_box_a˘ive
();

1059 
	$£t_ab‹t
(
Fl_Ab‹t_H™dÀr
 
f
Ë{
Áèl
 = f;
	}
}

1060 (*
©˛o£
)(
Fl_Wödow
*,*);

1061 
	`deÁu…_©˛o£
(
Fl_Wödow
*,*);

1065 
	$£t_©˛o£
(
Fl_At˛o£_H™dÀr
 
f
Ë{
©˛o£
 = f;
	}
}

1071 
	$evít_shi·
(Ë{ 
e_°©e
&
FL_SHIFT
;
	}
}

1073 
	$evít_˘æ
(Ë{ 
e_°©e
&
FL_CTRL
;
	}
}

1075 
	$evít_comm™d
(Ë{ 
e_°©e
&
FL_COMMAND
;
	}
}

1077 
	$evít_Æt
(Ë{ 
e_°©e
&
FL_ALT
;
	}
}

1086 
	$evít_buâ⁄s
(Ë{ 
e_°©e
&0x7f000000;
	}
}

1091 
	$evít_buâ⁄1
(Ë{ 
e_°©e
&
FL_BUTTON1
;
	}
}

1096 
	$evít_buâ⁄2
(Ë{ 
e_°©e
&
FL_BUTTON2
;
	}
}

1101 
	$evít_buâ⁄3
(Ë{ 
e_°©e
&
FL_BUTTON3
;
	}
}

1109 
	$£t_idÀ
(
Fl_Old_IdÀ_H™dÀr
 
cb
Ë{
idÀ
 = cb;
	}
}

1111 
	$gøb
(
Fl_Wödow
& 
wö
Ë{
	`gøb
(&wö);
	}
}

1115 
	$ªÀa£
(Ë{
	`gøb
(0);
	}
}

1123 
	$visibÀ_focus
(
v
Ë{ 
	`›ti⁄
(
OPTION_VISIBLE_FOCUS
, (v!=0)); 
	}
}

1129 
	$visibÀ_focus
(Ë{  
	`›ti⁄
(
OPTION_VISIBLE_FOCUS
); 
	}
}

1138 
	$dnd_ãxt_›s
(
v
Ë{ 
	`›ti⁄
(
OPTION_DND_TEXT
, (v!=0)); 
	}
}

1145 
	$dnd_ãxt_›s
(Ë{  
	`›ti⁄
(
OPTION_DND_TEXT
); 
	}
}

1151 
lock
();

1152 
u∆ock
();

1153 
awake
(* 
mesßge
 = 0);

1155 
awake
(
Fl_Awake_H™dÀr
 
cb
, * 
mesßge
 = 0);

1162 * 
thªad_mesßge
();

1195 
dñëe_widgë
(
Fl_Widgë
 *
w
);

1196 
do_widgë_dñëi⁄
();

1197 
w©ch_widgë_poöãr
(
Fl_Widgë
 *&
w
);

1198 
ªÀa£_widgë_poöãr
(
Fl_Widgë
 *&
w
);

1199 
˛ór_widgë_poöãr
(
Fl_Widgë
 c⁄° *
w
);

1202 #ifde‡
FLTK_HAVE_CAIRO


1206 
	gpublic
:

1208 
ˇúo_t
 * 
ˇúo_make_cuºít
(
Fl_Wödow
* 
w
);

1223 
	$ˇúo_autﬁök_c⁄ãxt
(
boﬁ
 
Æök
Ë{
ˇúo_°©e_
.
	`autﬁök
◊lök);
	}
}

1231 
boﬁ
 
	$ˇúo_autﬁök_c⁄ãxt
(Ë{ 
ˇúo_°©e_
.
	`autﬁök
();
	}
}

1233 
ˇúo_t
 * 
	$ˇúo_cc
(Ë{  
ˇúo_°©e_
.
	`cc
(); 
	}
}

1238 
	$ˇúo_cc
(
ˇúo_t
 * 
c
, 
boﬁ
 
own
=
Ál£
){ 
ˇúo_°©e_
.
	`cc
(c, own); 
	}
}

1240 
	g¥iv©e
:

1241 
ˇúo_t
 * 
ˇúo_make_cuºít
(* 
gc
);

1242 
ˇúo_t
 * 
ˇúo_make_cuºít
(* 
gc
, 
W
, 
H
);

1243 
Fl_Caúo_Sèã
 
	gˇúo_°©e_
;

1244 
	gpublic
:

1291 ˛as†
	cFL_EXPORT
 
	mFl_Widgë_Tøckî
 {

1293 
Fl_Widgë
* 
	mwp_
;

1295 
	mpublic
:

1297 
Fl_Widgë_Tøckî
(
Fl_Widgë
 *
wi
);

1298 ~
Fl_Widgë_Tøckî
();

1305 
Fl_Widgë
 *
	$widgë
(Ë{ 
wp_
;}

1316 
	$dñëed
(Ë{ 
wp_
 =0;
	}
}

1327 
	$exi°s
(Ë{ 
wp_
 !0;
	}
}

	@/home/lixing/include/FL/Fl_Box.H

22 #i‚de‡
Fl_Box_H


23 
	#Fl_Box_H


	)

25 #i‚de‡
Fl_Widgë_H


26 
	~"Fl_Widgë.H
"

34 ˛as†
	cFL_EXPORT
 
	mFl_Box
 : 
public
 
Fl_Widgë
 {

35 
¥Ÿe˘ed
:

36 
døw
();

37 
	mpublic
:

47 
Fl_Box
(
X
, 
Y
, 
W
, 
H
, c⁄° *
l
=0);

50 
Fl_Box
(
Fl_Boxty≥
 
b
, 
X
, 
Y
, 
W
, 
H
, c⁄° *
l
);

52 
vútuÆ
 
h™dÀ
();

	@/home/lixing/include/FL/Fl_Browser.H

26 #i‚de‡
Fl_Brow£r_H


27 
	#Fl_Brow£r_H


	)

29 
	~"Fl_Brow£r_.H
"

30 
	~"Fl_Image.H
"

32 
	gFL_BLINE
;

80 ˛as†
	cFL_EXPORT
 
	mFl_Brow£r
 : 
public
 
Fl_Brow£r_
 {

82 
FL_BLINE
 *
fú°
;

83 
FL_BLINE
 *
	mœ°
;

84 
FL_BLINE
 *
	mˇche
;

85 
	mˇchñöe
;

86 
	mlöes
;

87 
	mfuŒ_height_
;

88 c⁄° * 
	mcﬁumn_widths_
;

89 
	mf‹m©_ch¨_
;

90 
	mcﬁumn_ch¨_
;

92 
	m¥Ÿe˘ed
:

95 * 
	$ôem_fú°
() const ;

96 * 
	$ôem_√xt
(* 
ôem
) const ;

97 * 
	$ôem_¥ev
(* 
ôem
) const ;

98 * 
	$ôem_œ°
()const ;

99 
	$ôem_£À˘ed
(* 
ôem
) const ;

100 
	`ôem_£À˘
(* 
ôem
, 
vÆ
);

101 
	$ôem_height
(* 
ôem
) const ;

102 
	$ôem_width
(* 
ôem
) const ;

103 
	$ôem_døw
(* 
ôem
, 
X
, 
Y
, 
W
, 
H
) const ;

104 
	$fuŒ_height
() const ;

105 
	$ö¸_height
() const ;

106 c⁄° *
	$ôem_ãxt
(*
ôem
) const;

112 
	$ôem_sw≠
(*
a
, *
b
Ë{ 
	`sw≠
((
FL_BLINE
*)a, (FL_BLINE*)b); }

118 *
	$ôem_©
(
löe
Ëc⁄° {  (*)
	`föd_löe
÷öe); 
	}
}

120 
FL_BLINE
* 
	$föd_löe
(
löe
) const ;

121 
FL_BLINE
* 
	`_ªmove
(
löe
) ;

122 
	`ö£π
(
löe
, 
FL_BLINE
* 
ôem
);

123 
	$löío
(*
ôem
) const ;

124 
	`sw≠
(
FL_BLINE
 *
a
, FL_BLINE *
b
);

126 
public
:

128 
	`ªmove
(
löe
);

129 
	`add
(c⁄° * 
√wãxt
, * 
d
 = 0);

130 
	`ö£π
(
löe
, c⁄° * 
√wãxt
, * 
d
 = 0);

131 
	`move
(
to
, 
‰om
);

132 
	`lﬂd
(c⁄° * 
fûíame
);

133 
	`sw≠
(
a
, 
b
);

134 
	`˛ór
();

141 
	$size
(Ëc⁄° {  
löes
; 
	}
}

142 
	$size
(
W
, 
H
Ë{ 
Fl_Widgë
::
	`size
(W, H); 
	}
}

144 
	$t›löe
() const ;

146 
	eFl_Löe_Posôi⁄
 { 
TOP
, 
BOTTOM
, 
MIDDLE
 
	}
};

147 
löïosôi⁄
(
löe
, 
Fl_Löe_Posôi⁄
 
pos
);

154 
	$t›löe
(
löe
Ë{ 
	`löïosôi⁄
÷öe, 
TOP
); 
	}
}

161 
	$bŸtomlöe
(
löe
Ë{ 
	`löïosôi⁄
÷öe, 
BOTTOM
); 
	}
}

168 
	$middÀlöe
(
löe
Ë{ 
	`löïosôi⁄
÷öe, 
MIDDLE
); 
	}
}

170 
£À˘
(
löe
, 
vÆ
=1);

171 
	$£À˘ed
(
löe
) const ;

172 
	`show
(
löe
);

174 
	$show
(Ë{ 
Fl_Widgë
::
	`show
(); 
	}
}

175 
hide
(
löe
);

177 
	$hide
(Ë{ 
Fl_Widgë
::
	`hide
(); 
	}
}

178 
	$visibÀ
(
löe
) const ;

180 
	$vÆue
() const ;

186 
	$vÆue
(
löe
Ë{ 
	`£À˘
÷öe); 
	}
}

187 c⁄° * 
	$ãxt
(
löe
) const ;

188 
	`ãxt
(
löe
, c⁄° * 
√wãxt
);

189 * 
	$d©a
(
löe
) const ;

190 
	`d©a
(
löe
, * 
d
);

192 
	`Fl_Brow£r
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
 = 0);

196 ~
	$Fl_Brow£r
(Ë{ 
	`˛ór
(); 
	}
}

227 
	$f‹m©_ch¨
(Ëc⁄° {  
f‹m©_ch¨_
; 
	}
}

233 
	$f‹m©_ch¨
(
c
Ë{ 
f‹m©_ch¨_
 = c; 
	}
}

239 
	$cﬁumn_ch¨
(Ëc⁄° {  
cﬁumn_ch¨_
; 
	}
}

246 
	$cﬁumn_ch¨
(
c
Ë{ 
cﬁumn_ch¨_
 = c; 
	}
}

270 c⁄° * 
	$cﬁumn_widths
(Ëc⁄° {  
cﬁumn_widths_
; 
	}
}

275 
	$cﬁumn_widths
(c⁄° * 
¨r
Ë{ 
cﬁumn_widths_
 =áº; 
	}
}

286 
	$di•œyed
(
löe
Ëc⁄° {  
Fl_Brow£r_
::
	`di•œyed
(
	`föd_löe
÷öe)); 
	}
}

295 
	$make_visibÀ
(
löe
) {

296 i‡(
löe
 < 1Ë
Fl_Brow£r_
::
	`di•œy
(
	`föd_löe
(1));

297 i‡(
löe
 > 
löes
Ë
Fl_Brow£r_
::
	`di•œy
(
	`föd_löe
(lines));

298 
Fl_Brow£r_
::
	`di•œy
(
	`föd_löe
(
löe
));

299 
	}
}

302 
ic⁄
(
löe
, 
Fl_Image
* icon);

303 
Fl_Image
* 
	$ic⁄
(
löe
) const;

304 
	`ªmove_ic⁄
(
löe
);

307 
	$ª∂a˚
(
a
, c⁄° * 
b
Ë{ 
	`ãxt
◊, b); 
	}
}

308 
di•œy
(
löe
, 
vÆ
=1);

	@/home/lixing/include/FL/Fl_Button.H

22 #i‚de‡
Fl_Buâ⁄_H


23 
	#Fl_Buâ⁄_H


	)

25 #i‚de‡
Fl_Widgë_H


26 
	~"Fl_Widgë.H
"

30 
	#FL_NORMAL_BUTTON
 0

	)

32 
	#FL_TOGGLE_BUTTON
 1

33 
	#FL_RADIO_BUTTON
 (
FL_RESERVED_TYPE
+2Ë

	)

36 
	#FL_HIDDEN_BUTTON
 3

37 

	)

38 
FL_EXPORT
 
Fl_Sh‹tcut
 
Ê_ﬁd_sh‹tcut
(const *);

40 
˛ass
 
	gFl_Widgë_Tøckî
;

76 ˛as†
	cFL_EXPORT
 
	mFl_Buâ⁄
 : 
public
 
Fl_Widgë
 {

78 
sh‹tcut_
;

79 
	mvÆue_
;

80 
	mﬁdvÆ
;

81 
uch¨
 
	mdown_box_
;

83 
	m¥Ÿe˘ed
:

85 
Fl_Widgë_Tøckî
 *
key_ªÀa£_åackî
;

86 
key_ªÀa£_timeout
(*);

87 
simuœã_key_a˘i⁄
();

89 
vútuÆ
 
døw
();

91 
	mpublic
:

93 
vútuÆ
 
h™dÀ
();

95 
Fl_Buâ⁄
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
 = 0);

97 
vÆue
(
v
);

102 
	$vÆue
(Ëc⁄° { 
vÆue_
;}

108 
	$£t
(Ë{ 
	`vÆue
(1);
	}
}

114 
	$˛ór
(Ë{ 
	`vÆue
(0);
	}
}

116 
£t⁄ly
();

122 
	$sh‹tcut
(Ëc⁄° { 
sh‹tcut_
;
	}
}

143 
	$sh‹tcut
(
s
Ë{
sh‹tcut_
 = s;
	}
}

149 
Fl_Boxty≥
 
	$down_box
(Ëc⁄° { (
Fl_Boxty≥
)
down_box_
;
	}
}

160 
	$down_box
(
Fl_Boxty≥
 
b
Ë{
down_box_
 = b;
	}
}

163 
	$sh‹tcut
(c⁄° *
s
Ë{
	`sh‹tcut
(
	`Ê_ﬁd_sh‹tcut
(s));
	}
}

166 
Fl_Cﬁ‹
 
	$down_cﬁ‹
(Ëc⁄° { 
	`£À˘i⁄_cﬁ‹
();
	}
}

169 
	$down_cﬁ‹
(
c
Ë{
	`£À˘i⁄_cﬁ‹
(c);
	}
}

	@/home/lixing/include/FL/Fl_Choice.H

22 #i‚de‡
Fl_Choi˚_H


23 
	#Fl_Choi˚_H


	)

25 
	~"Fl_Míu_.H
"

76 ˛as†
	cFL_EXPORT
 
	mFl_Choi˚
 : 
public
 
Fl_Míu_
 {

77 
¥Ÿe˘ed
:

78 
døw
();

79 
	mpublic
:

80 
h™dÀ
();

82 
Fl_Choi˚
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
 = 0);

88 
	$vÆue
(Ëc⁄° { 
Fl_Míu_
::
	`vÆue
();}

90 
	`vÆue
(
v
);

92 
	`vÆue
(c⁄° 
Fl_Míu_Iãm
* 
v
);

93 
	}
};

	@/home/lixing/include/FL/Fl_Color_Chooser.H

26 #i‚de‡
Fl_Cﬁ‹_Choo£r_H


27 
	#Fl_Cﬁ‹_Choo£r_H


	)

29 
	~<FL/Fl_Group.H
>

30 
	~<FL/Fl_Box.H
>

31 
	~<FL/Fl_Rëu∫_Buâ⁄.H
>

32 
	~<FL/Fl_Choi˚.H
>

33 
	~<FL/Fl_VÆue_I≈ut.H
>

35 #i‚de‡
FL_DOXYGEN


38 ˛as†
	cFL_EXPORT
 
	mFlcc_HueBox
 : 
public
 
Fl_Widgë
 {

39 
px
, 
	mpy
;

40 
	m¥Ÿe˘ed
:

41 
døw
();

42 
h™dÀ_key
();

43 
	mpublic
:

44 
h™dÀ
();

45 
	$Flcc_HueBox
(
X
, 
Y
, 
W
, 
H
Ë: 
	$Fl_Widgë
(
X
,
Y
,
W
,
H
) {

46 
px
 = 
py
 = 0;}

47 
	}
};

50 ˛as†
	cFL_EXPORT
 
	mFlcc_VÆueBox
 : 
public
 
Fl_Widgë
 {

51 
py
;

52 
	m¥Ÿe˘ed
:

53 
døw
();

54 
h™dÀ_key
();

55 
	mpublic
:

56 
h™dÀ
();

57 
	$Flcc_VÆueBox
(
X
, 
Y
, 
W
, 
H
Ë: 
	$Fl_Widgë
(
X
,
Y
,
W
,
H
) {

58 
py
 = 0;}

59 
	}
};

62 ˛as†
	cFL_EXPORT
 
	mFlcc_VÆue_I≈ut
 : 
public
 
Fl_VÆue_I≈ut
 {

63 
public
:

64 
f‹m©
(*);

65 
	$Flcc_VÆue_I≈ut
(
X
, 
Y
, 
W
, 
H
Ë: 
	$Fl_VÆue_I≈ut
(
X
,
Y
,
W
,
H
) {}

66 
	}
};

107 ˛as†
	cFL_EXPORT
 
	mFl_Cﬁ‹_Choo£r
 : 
public
 
Fl_Group
 {

108 
Flcc_HueBox
 
huebox
;

109 
Flcc_VÆueBox
 
	mvÆuebox
;

110 
Fl_Choi˚
 
	mchoi˚
;

111 
Flcc_VÆue_I≈ut
 
	mrvÆue
;

112 
Flcc_VÆue_I≈ut
 
	mgvÆue
;

113 
Flcc_VÆue_I≈ut
 
	mbvÆue
;

114 
Fl_Box
 
	mªsize_box
;

115 
	mhue_
, 
	mßtuøti⁄_
, 
	mvÆue_
;

116 
	mr_
, 
	mg_
, 
	mb_
;

117 
£t_vÆu©‹s
();

118 
rgb_cb
(
Fl_Widgë
*, *);

119 
mode_cb
(
Fl_Widgë
*, *);

120 
	mpublic
:

126 
	$mode
(Ë{ 
choi˚
.
	`vÆue
();}

132 
	`mode
(
√wMode
);

140 
	$hue
(Ëc⁄° { 
hue_
;
	}
}

146 
	$ßtuøti⁄
(Ëc⁄° { 
ßtuøti⁄_
;
	}
}

152 
	$vÆue
(Ëc⁄° { 
vÆue_
;
	}
}

158 
	$r
(Ëc⁄° { 
r_
;
	}
}

164 
	$g
(Ëc⁄° { 
g_
;
	}
}

170 
	$b
(Ëc⁄° { 
b_
;
	}
}

172 
hsv
(
H
, 
S
, 
V
);

174 
rgb
(
R
, 
G
, 
B
);

176 
hsv2rgb
(
H
, 
S
, 
V
, & 
R
, & 
G
, & 
B
);

178 
rgb2hsv
(
R
, 
G
, 
B
, & 
H
, & 
S
, & 
V
);

180 
Fl_Cﬁ‹_Choo£r
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
 = 0);

183 
FL_EXPORT
 
Ê_cﬁ‹_choo£r
(c⁄° * 
«me
, & 
r
, & 
g
, & 
b
, 
m
=-1);

184 
FL_EXPORT
 
Ê_cﬁ‹_choo£r
(c⁄° * 
«me
, 
uch¨
& 
r
, uch¨& 
g
, uch¨& 
b
, 
m
=-1);

	@/home/lixing/include/FL/Fl_Double_Window.H

22 #i‚de‡
Fl_DoubÀ_Wödow_H


23 
	#Fl_DoubÀ_Wödow_H


	)

25 
	~"Fl_Wödow.H
"

40 ˛as†
	cFL_EXPORT
 
	mFl_DoubÀ_Wödow
 : 
public
 
Fl_Wödow
 {

41 
¥Ÿe˘ed
:

42 
Êush
(
îa£ovîœy
);

47 
	mf‹˚_doubÀbuf„rög_
;

48 
	mpublic
:

49 
show
();

50 
	$show
(
a
, **
b
Ë{
Fl_Wödow
::
	`show
(a,b);}

51 
	`Êush
();

52 
	`ªsize
(,,,);

53 
	`hide
();

54 ~
	`Fl_DoubÀ_Wödow
();

60 
	`Fl_DoubÀ_Wödow
(
W
, 
H
, c⁄° *
l
 = 0);

65 
	`Fl_DoubÀ_Wödow
(
X
, 
Y
, 
W
, 
H
, c⁄° *
l
 = 0);

67 
	}
};

	@/home/lixing/include/FL/Fl_Export.H

19 #i‚de‡
Fl_Exp‹t_H


20 
	#Fl_Exp‹t_H


	)

26 #i‡
deföed
(
FL_DLL
)

27 #ifde‡
FL_LIBRARY


28 
	#FL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

30 
	#FL_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

32 #ñi‡
__GNUC__
 >= 4

33 
	#FL_EXPORT
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

35 
	#FL_EXPORT


	)

	@/home/lixing/include/FL/Fl_Float_Input.H

22 #i‚de‡
Fl_Flﬂt_I≈ut_H


23 
	#Fl_Flﬂt_I≈ut_H


	)

25 
	~"Fl_I≈ut.H
"

32 ˛as†
	cFL_EXPORT
 
	mFl_Flﬂt_I≈ut
 : 
public
 
Fl_I≈ut
 {

33 
public
:

40 
Fl_Flﬂt_I≈ut
(
X
,
Y
,
W
,
H
,c⁄° *
l
 = 0);

	@/home/lixing/include/FL/Fl_Gl_Window.H

22 #i‚de‡
Fl_Gl_Wödow_H


23 
	#Fl_Gl_Wödow_H


	)

25 
	~"Fl_Wödow.H
"

27 #i‚de‡
GLC⁄ãxt


31 * 
	tGLC⁄ãxt
;

34 
˛ass
 
	gFl_Gl_Choi˚
;

56 ˛as†
	cFL_EXPORT
 
	mFl_Gl_Wödow
 : 
public
 
Fl_Wödow
 {

58 
mode_
;

59 c⁄° *
	mÆi°
;

60 
Fl_Gl_Choi˚
 *
	mg
;

61 
GLC⁄ãxt
 
	mc⁄ãxt_
;

62 
	mvÆid_f_
;

63 
	mdamage1_
;

64 
vútuÆ
 
døw_ovîœy
();

65 
öô
();

67 *
	movîœy
;

68 
make_ovîœy
();

69 
‰õnd
 
˛ass
 
	m_Fl_Gl_Ovîœy
;

71 
ˇn_do
(, const *);

72 
mode
(, const *);

73 
gl_∂ugö_lökage
();

75 
	mpublic
:

77 
show
();

78 
	$show
(
a
, **
b
Ë{
Fl_Wödow
::
	`show
(a,b);}

79 
	`Êush
();

80 
	`hide
();

81 
	`ªsize
(,,,);

82 
	`h™dÀ
();

108 
	$vÆid
(Ëc⁄° { 
vÆid_f_
 & 1;
	}
}

112 
	$vÆid
(
v
Ë{i‡(vË
vÆid_f_
 |1; vÆid_f_ &0x„;
	}
}

113 
övÆid©e
();

121 
	$c⁄ãxt_vÆid
(Ëc⁄° { 
vÆid_f_
 & 2;
	}
}

125 
	$c⁄ãxt_vÆid
(
v
Ë{i‡(vË
vÆid_f_
 |2; vÆid_f_ &0xfd;
	}
}

128 
	$ˇn_do
(
m
Ë{ 
	`ˇn_do
(m,0);
	}
}

130 
	$ˇn_do
(c⁄° *
m
Ë{ 
	`ˇn_do
(0, m);
	}
}

132 
	$ˇn_do
(Ë{ 
	`ˇn_do
(
mode_
,
Æi°
);
	}
}

166 
Fl_Mode
 
	$mode
(Ëc⁄° { (
Fl_Mode
)
mode_
;
	}
}

168 
	$mode
(
a
Ë{ 
	`mode
◊,0);
	}
}

170 
	$mode
(c⁄° *
a
Ë{ 
	`mode
(0,á);
	}
}

172 * 
	$c⁄ãxt
(Ëc⁄° { 
c⁄ãxt_
;
	}
}

173 
c⁄ãxt
(*, 
de°roy_Êag
 = 0);

174 
make_cuºít
();

175 
sw≠_buf„rs
();

176 
‹tho
();

183 
ˇn_do_ovîœy
();

190 
ªdøw_ovîœy
();

191 
hide_ovîœy
();

199 
make_ovîœy_cuºít
();

202 
vútuÆ
 
Fl_Gl_Wödow
* 
	$as_gl_wödow
(Ë{ 
this
;
	}
}

204 ~
Fl_Gl_Wödow
();

209 
	$Fl_Gl_Wödow
(
W
, 
H
, c⁄° *
l
=0Ë: 
	$Fl_Wödow
(
W
,
H
,
l
Ë{
	`öô
();
	}
}

216 
	$Fl_Gl_Wödow
(
X
, 
Y
, 
W
, 
H
, c⁄° *
l
=0)

217 : 
	$Fl_Wödow
(
X
,
Y
,
W
,
H
,
l
Ë{
	`öô
();
	}
}

219 
	g¥Ÿe˘ed
:

225 
vútuÆ
 
døw
();

	@/home/lixing/include/FL/Fl_Group.H

22 #i‚de‡
Fl_Group_H


23 
	#Fl_Group_H


	)

25 #i‚de‡
Fl_Widgë_H


26 
	~"Fl_Widgë.H
"

41 ˛as†
	cFL_EXPORT
 
	mFl_Group
 : 
public
 
Fl_Widgë
 {

43 
Fl_Widgë
** 
¨øy_
;

44 
Fl_Widgë
* 
	mßvedfocus_
;

45 
Fl_Widgë
* 
	mªsizabÀ_
;

46 
	mchûdªn_
;

47 *
	msizes_
;

49 
«vig©i⁄
();

50 
Fl_Group
 *
	mcuºít_
;

53 
Fl_Group
(const Fl_Group&);

54 
	mFl_Group
& 
	m›î©‹
=(c⁄° 
Fl_Group
&);

56 
	m¥Ÿe˘ed
:

57 
døw
();

58 
	$døw_chûd
(
Fl_Widgë
& 
widgë
) const;

59 
	`døw_chûdªn
();

60 
	$døw_outside_œbñ
(c⁄° 
Fl_Widgë
& 
widgë
) const ;

61 
	$upd©e_chûd
(
Fl_Widgë
& 
widgë
) const;

62 *
	`sizes
();

64 
public
:

66 
	`h™dÀ
();

67 
	`begö
();

68 
	`íd
();

69 
Fl_Group
 *
	`cuºít
();

70 
	`cuºít
(
Fl_Group
 *
g
);

75 
	$chûdªn
(Ëc⁄° { 
chûdªn_
;}

79 
Fl_Widgë
* 
	$chûd
(
n
Ëc⁄° { 
	`¨øy
()[n];
	}
}

80 
	$föd
(c⁄° 
Fl_Widgë
*) const;

84 
	$föd
(c⁄° 
Fl_Widgë
& 
o
Ëc⁄° { 
	`föd
(&o);
	}
}

85 
Fl_Widgë
* c⁄°* 
	$¨øy
() const;

87 
	`ªsize
(,,,);

92 
	`Fl_Group
(,,,, const * = 0);

93 
vútuÆ
 ~
	`Fl_Group
();

94 
	`add
(
Fl_Widgë
&);

98 
	$add
(
Fl_Widgë
* 
o
Ë{
	`add
(*o);
	}
}

99 
ö£π
(
Fl_Widgë
&, 
i
);

104 
	$ö£π
(
Fl_Widgë
& 
o
, Fl_Widgë* 
bef‹e
Ë{
	`ö£π
(o,
	`föd
(bef‹e));
	}
}

105 
ªmove
(
ödex
);

106 
ªmove
(
Fl_Widgë
&);

111 
	$ªmove
(
Fl_Widgë
* 
o
Ë{
	`ªmove
(*o);
	}
}

112 
˛ór
();

117 
	$ªsizabÀ
(
Fl_Widgë
& 
o
Ë{
ªsizabÀ_
 = &o;
	}
}

146 
	$ªsizabÀ
(
Fl_Widgë
* 
o
Ë{
ªsizabÀ_
 = o;
	}
}

150 
Fl_Widgë
* 
	$ªsizabÀ
(Ëc⁄° { 
ªsizabÀ_
;
	}
}

154 
	$add_ªsizabÀ
(
Fl_Widgë
& 
o
Ë{
ªsizabÀ_
 = &o; 
	`add
(o);
	}
}

155 
öô_sizes
();

166 
	$˛ù_chûdªn
(
c
Ë{ i‡(cË
	`£t_Êag
(
CLIP_CHILDREN
); 
	`˛ór_Êag
(CLIP_CHILDREN); 
	}
}

174 
	$˛ù_chûdªn
(Ë{  (
	`Êags
(Ë& 
CLIP_CHILDREN
Ë!0; 
	}
}

177 
vútuÆ
 
Fl_Group
* 
	$as_group
(Ë{  
this
; 
	}
}

186 
	$focus
(
Fl_Widgë
* 
W
Ë{W->
	`èke_focus
();
	}
}

189 
	gFl_Widgë
* & 
	$_ddfdesign_kludge
(Ë{ 
ªsizabÀ_
;
	}
}

192 
f‹ms_íd
();

216 ˛as†
	cFL_EXPORT
 
	mFl_End
 {

217 
	mpublic
:

219 
	$Fl_End
(Ë{
Fl_Group
::
	`cuºít
()->
	`íd
();}

220 
	}
};

	@/home/lixing/include/FL/Fl_Image.H

22 #i‚de‡
Fl_Image_H


23 
	#Fl_Image_H


	)

25 
	~"Enumî©i⁄s.H
"

26 
	~<°dlib.h
>

28 
˛ass
 
	gFl_Widgë
;

29 
˛ass
 
	gFl_Pixm≠
;

30 
	gFl_Míu_Iãm
;

31 
	gFl_Labñ
;

36 
	eFl_RGB_Sˇlög
 {

37 
	mFL_RGB_SCALING_NEAREST
 = 0,

38 
	mFL_RGB_SCALING_BILINEAR


52 ˛as†
	cFL_EXPORT
 
	mFl_Image
 {

53 
	mw_
, 
	mh_
, 
	md_
, 
	mld_
, 
	mcou¡_
;

54 c⁄° * c⁄° *
	md©a_
;

55 
Fl_RGB_Sˇlög
 
	mRGB_sˇlög_
;

58 
	mFl_Image
 & 
	m›î©‹
=(c⁄° 
Fl_Image
 &);

59 
Fl_Image
(const Fl_Image &);

61 
	m¥Ÿe˘ed
:

66 
	$w
(
W
Ë{
w_
 = W;}

70 
	$h
(
H
Ë{
h_
 = H;
	}
}

74 
	$d
(
D
Ë{
d_
 = D;
	}
}

78 
	$ld
(
LD
Ë{
ld_
 = LD;
	}
}

82 
	$d©a
(c⁄° * c⁄° *
p
, 
c
Ë{
d©a_
 =Ö; 
cou¡_
 = c;
	}
}

83 
døw_em±y
(
X
, 
Y
);

85 
œbñty≥
(c⁄° 
Fl_Labñ
 *
lo
, 
lx
, 
ly
, 
lw
, 
lh
, 
Fl_Align
 
œ
);

86 
mósuª
(c⁄° 
Fl_Labñ
 *
lo
, &
lw
, &
lh
);

88 
	gpublic
:

93 
	$w
(Ëc⁄° { 
w_
;
	}
}

96 
	$h
(Ëc⁄° { 
h_
;
	}
}

102 
	$d
(Ëc⁄° { 
d_
;
	}
}

108 
	$ld
(Ëc⁄° { 
ld_
;
	}
}

115 
	$cou¡
(Ëc⁄° { 
cou¡_
;
	}
}

120 c⁄° * c⁄° *
	$d©a
(Ëc⁄° { 
d©a_
;
	}
}

128 
	$Fl_Image
(
W
, 
H
, 
D
Ë{
w_
 = W; 
h_
 = H; 
d_
 = D; 
ld_
 = 0; 
cou¡_
 = 0; 
d©a_
 = 0;
	}
}

129 
	gvútuÆ
 ~
Fl_Image
();

130 
vútuÆ
 
Fl_Image
 *
c›y
(
W
, 
H
);

138 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); 
	}
}

139 
vútuÆ
 
cﬁ‹_avîage
(
Fl_Cﬁ‹
 
c
, 
i
);

146 
	$öa˘ive
(Ë{ 
	`cﬁ‹_avîage
(
FL_GRAY
, .33f); 
	}
}

147 
vútuÆ
 
deßtuøã
();

148 
vútuÆ
 
œbñ
(
Fl_Widgë
*
w
);

149 
vútuÆ
 
œbñ
(
Fl_Míu_Iãm
*
m
);

157 
vútuÆ
 
døw
(
X
, 
Y
, 
W
, 
H
, 
cx
=0, 
cy
=0);

162 
	$døw
(
X
, 
Y
Ë{
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0);
	}
}

163 
vútuÆ
 
unˇche
();

166 
RGB_sˇlög
(
Fl_RGB_Sˇlög
);

169 
Fl_RGB_Sˇlög
 
RGB_sˇlög
();

183 ˛as†
	cFL_EXPORT
 
	mFl_RGB_Image
 : 
public
 
Fl_Image
 {

184 
‰õnd
 
˛ass
 
Fl_Qu¨tz_Gøphics_Drivî
;

185 
‰õnd
 
˛ass
 
	mFl_GDI_Gøphics_Drivî
;

186 
‰õnd
 
˛ass
 
	mFl_Xlib_Gøphics_Drivî
;

187 
size_t
 
	mmax_size_
;

188 
	mpublic
:

190 c⁄° 
uch¨
 *
¨øy
;

191 
	mÆloc_¨øy
;

193 
	m¥iv©e
:

195 #i‡
deföed
(
__APPLE__
Ë|| 
	$deföed
(
WIN32
)

196 *
id_
;

197 *
mask_
;

199 
id_
;

200 
mask_
;

203 
public
:

220 
	$Fl_RGB_Image
(c⁄° 
uch¨
 *
bôs
, 
W
, 
H
, 
D
=3, 
LD
=0) :

221 
	`Fl_Image
(
W
,
H
,
D
), 
	`¨øy
(
bôs
), 
	`Æloc_¨øy
(0), 
	`id_
(0), 
	$mask_
(0Ë{
	`d©a
((c⁄° **)&
¨øy
, 1); 
	`ld
(
LD
);}

222 
	`Fl_RGB_Image
(c⁄° 
Fl_Pixm≠
 *
pxm
, 
Fl_Cﬁ‹
 
bg
=
FL_GRAY
);

223 
vútuÆ
 ~
	`Fl_RGB_Image
();

224 
vútuÆ
 
Fl_Image
 *
	`c›y
(
W
, 
H
);

225 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); 
	}
}

226 
vútuÆ
 
cﬁ‹_avîage
(
Fl_Cﬁ‹
 
c
, 
i
);

227 
vútuÆ
 
deßtuøã
();

228 
vútuÆ
 
døw
(
X
, 
Y
, 
W
, 
H
, 
cx
=0, 
cy
=0);

229 
	$døw
(
X
, 
Y
Ë{
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0);
	}
}

230 
vútuÆ
 
œbñ
(
Fl_Widgë
*
w
);

231 
vútuÆ
 
œbñ
(
Fl_Míu_Iãm
*
m
);

232 
vútuÆ
 
unˇche
();

242 
	$max_size
(
size_t
 
size
Ë{ 
max_size_
 = size;
	}
}

247 
size_t
 
	$max_size
(Ë{ 
max_size_
;
	}
}

	@/home/lixing/include/FL/Fl_Image_Surface.H

19 #i‚de‡
Fl_Image_SurÁ˚_H


20 
	#Fl_Image_SurÁ˚_H


	)

22 
	~<FL/Fl_C›y_SurÁ˚.H
>

23 
	~<FL/Fl_Image.H
>

46 ˛as†
	cFL_EXPORT
 
	mFl_Image_SurÁ˚
 : 
public
 
Fl_SurÁ˚_Devi˚
 {

47 
¥iv©e
:

48 
Fl_Offs¸ìn
 
offs¸ìn
;

49 
	mwidth
;

50 
	mheight
;

51 
Fl_Paged_Devi˚
 *
	mhñ≥r
;

52 #ifde‡
__APPLE__


53 #ñi‡
	$deföed
(
WIN32
)

54 
HDC
 
_sgc
;

55 
Wödow
 
_sw
;

56 
Fl_SurÁ˚_Devi˚
 *
_ss
;

57 
_ßvedc
;

59 
Fl_SurÁ˚_Devi˚
 *
¥evious
;

60 
Wödow
 
¥e_wödow
;

61 
GC
 
gc
;

63 
public
:

64 c⁄° *
˛ass_id
;

65 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

66 
	`Fl_Image_SurÁ˚
(
w
, 
h
);

67 ~
	`Fl_Image_SurÁ˚
();

68 
	`£t_cuºít
();

69 
	`døw
(
Fl_Widgë
*, 
dñè_x
 = 0, 
dñè_y
 = 0);

70 
Fl_RGB_Image
 *
	`image
();

71 
	}
};

73 #ifde‡
__APPLE__


75 ˛as†
	cFL_EXPORT
 
	mFl_Qu¨tz_Flù≥d_SurÁ˚_
 : 
public
 
Fl_Qu¨tz_SurÁ˚_
 {

76 
public
:

77 c⁄° *
˛ass_id
;

78 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

79 
	`Fl_Qu¨tz_Flù≥d_SurÁ˚_
(
w
, 
h
);

80 
	`å™¶©e
(
x
, 
y
);

81 
	`u¡øn¶©e
();

82 
vútuÆ
 ~
	$Fl_Qu¨tz_Flù≥d_SurÁ˚_
(Ë{
	}
};

	@/home/lixing/include/FL/Fl_Input.H

22 #i‚de‡
Fl_I≈ut_H


23 
	#Fl_I≈ut_H


	)

25 
	~"Fl_I≈ut_.H
"

221 ˛as†
	cFL_EXPORT
 
	mFl_I≈ut
 : 
public
 
Fl_I≈ut_
 {

222 
h™dÀ_key
();

223 
shi·_posôi⁄
(
p
);

224 
shi·_up_down_posôi⁄
(
p
);

225 
h™dÀ_mou£
(
kìpm¨k
=0);

228 
kf_löes_up
(
ª≥©_num
);

229 
kf_löes_down
(
ª≥©_num
);

230 
kf_∑ge_up
();

231 
kf_∑ge_down
();

232 
kf_ö£π_toggÀ
();

233 
kf_dñëe_w‹d_right
();

234 
kf_dñëe_w‹d_À·
();

235 
kf_dñëe_sﬁ
();

236 
kf_dñëe_eﬁ
();

237 
kf_dñëe_ch¨_right
();

238 
kf_dñëe_ch¨_À·
();

239 
kf_move_sﬁ
();

240 
kf_move_eﬁ
();

241 
kf_˛ór_eﬁ
();

242 
kf_move_ch¨_À·
();

243 
kf_move_ch¨_right
();

244 
kf_move_w‹d_À·
();

245 
kf_move_w‹d_right
();

246 
kf_move_up_™d_sﬁ
();

247 
kf_move_down_™d_eﬁ
();

248 
kf_t›
();

249 
kf_bŸtom
();

250 
kf_£À˘_Æl
();

251 
kf_undo
();

252 
kf_ªdo
();

253 
kf_c›y
();

254 
kf_∑°e
();

255 
kf_c›y_cut
();

257 
	m¥Ÿe˘ed
:

258 
døw
();

259 
	mpublic
:

260 
h™dÀ
();

261 
Fl_I≈ut
(,,,,const * = 0);

	@/home/lixing/include/FL/Fl_Int_Input.H

22 #i‚de‡
Fl_I¡_I≈ut_H


23 
	#Fl_I¡_I≈ut_H


	)

25 
	~"Fl_I≈ut.H
"

31 ˛as†
	cFL_EXPORT
 
	mFl_I¡_I≈ut
 : 
public
 
Fl_I≈ut
 {

32 
public
:

39 
Fl_I¡_I≈ut
(
X
,
Y
,
W
,
H
,c⁄° *
l
 = 0);

	@/home/lixing/include/FL/Fl_Light_Button.H

22 #i‚de‡
Fl_Light_Buâ⁄_H


23 
	#Fl_Light_Buâ⁄_H


	)

25 
	~"Fl_Buâ⁄.H
"

38 ˛as†
	cFL_EXPORT
 
	mFl_Light_Buâ⁄
 : 
public
 
Fl_Buâ⁄
 {

39 
¥Ÿe˘ed
:

40 
vútuÆ
 
døw
();

41 
	mpublic
:

42 
vútuÆ
 
h™dÀ
();

43 
Fl_Light_Buâ⁄
(
x
,
y
,
w
,
h
,c⁄° *
l
 = 0);

	@/home/lixing/include/FL/Fl_Menu_Bar.H

22 #i‚de‡
Fl_Míu_B¨_H


23 
	#Fl_Míu_B¨_H


	)

25 
	~"Fl_Míu_.H
"

53 ˛as†
	cFL_EXPORT
 
	mFl_Míu_B¨
 : 
public
 
Fl_Míu_
 {

54 
¥Ÿe˘ed
:

55 
døw
();

56 
	mpublic
:

57 
h™dÀ
();

72 
Fl_Míu_B¨
(
X
, 
Y
, 
W
, 
H
,c⁄° *
l
=0);

	@/home/lixing/include/FL/Fl_Multiline_Input.H

22 #i‚de‡
Fl_Mu…ûöe_I≈ut_H


23 
	#Fl_Mu…ûöe_I≈ut_H


	)

25 
	~"Fl_I≈ut.H
"

45 ˛as†
	cFL_EXPORT
 
	mFl_Mu…ûöe_I≈ut
 : 
public
 
Fl_I≈ut
 {

46 
public
:

53 
Fl_Mu…ûöe_I≈ut
(
X
,
Y
,
W
,
H
,c⁄° *
l
 = 0);

	@/home/lixing/include/FL/Fl_Native_File_Chooser.H

23 #i‚de‡
FL_NATIVE_FILE_CHOOSER_H


24 
	#FL_NATIVE_FILE_CHOOSER_H


	)

27 #ifde‡
WIN32


29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<wödows.h
>

32 
	~<commdlg.h
>

33 
	~<shlobj.h
>

37 #ifde‡
__APPLE__


38 
	#MAXFILTERS
 80

	)

42 #i‡! 
deföed
(
__APPLE__
Ë&& !deföed(
WIN32
)

43 
	~<FL/Fl_Fûe_Choo£r.H
>

44 
	~<uni°d.h
>

46 
	~<FL/fûíame.H
>

49 
˛ass
 
	gFl_FLTK_Fûe_Choo£r
;

50 
˛ass
 
	gFl_GTK_Fûe_Choo£r
;

107 ˛as†
	cFL_EXPORT
 
	mFl_N©ive_Fûe_Choo£r
 {

108 
	mpublic
:

109 
	eTy≥
 {

110 
BROWSE_FILE
 = 0,

111 
	mBROWSE_DIRECTORY
,

112 
	mBROWSE_MULTI_FILE
,

113 
	mBROWSE_MULTI_DIRECTORY
,

114 
	mBROWSE_SAVE_FILE
,

115 
	mBROWSE_SAVE_DIRECTORY


117 
	eO±i⁄
 {

118 
	gNO_OPTIONS
 = 0x0000,

119 
	gSAVEAS_CONFIRM
 = 0x0001,

120 
	gNEW_FOLDER
 = 0x0002,

121 
	gPREVIEW
 = 0x0004,

122 
	gUSE_FILTER_EXT
 = 0x0008

125 c⁄° *
	gfûe_exi°s_mesßge
;

127 
	gpublic
:

128 
Fl_N©ive_Fûe_Choo£r
(
vÆ
=
BROWSE_FILE
);

129 ~
Fl_N©ive_Fûe_Choo£r
();

132 
ty≥
(
t
);

133 
	$ty≥
() const ;

134 
	`›ti⁄s
(
o
);

135 
	$›ti⁄s
() const;

136 
	$cou¡
() const;

137 c⁄° *
	$fûíame
() const ;

138 c⁄° *
	$fûíame
(
i
) const ;

139 
	`dúe˘‹y
(c⁄° *
vÆ
) ;

140 c⁄° *
	$dúe˘‹y
() const;

141 
	`tôÀ
(c⁄° *
t
);

142 c⁄° * 
	$tôÀ
() const;

143 c⁄° *
	$fûãr
() const ;

144 
	`fûãr
(c⁄° *
f
);

145 
	$fûãrs
() const ;

146 
	`fûãr_vÆue
(
i
) ;

147 
	$fûãr_vÆue
() const ;

148 
	`¥e£t_fûe
(c⁄° *
f
) ;

149 c⁄° * 
	$¥e£t_fûe
() const;

150 c⁄° *
	$îrmsg
() const ;

151 
	`show
() ;

153 #ifde‡
WIN32


154 
¥iv©e
:

155 
_bty≥
;

156 
_›ti⁄s
;

157 
OPENFILENAMEW
 
_o‚
;

158 
BROWSEINFOW
 
_böf
;

159 **
_∑th«mes
;

160 
_ç©h«mes
;

161 *
_dúe˘‹y
;

162 *
_tôÀ
;

163 *
_fûãr
;

164 *
_∑r£dfût
;

165 
_nfûãrs
;

166 *
_¥e£t_fûe
;

167 *
_îrmsg
;

170 
	`îrmsg
(c⁄° *
msg
);

172 
	`˛ór_∑th«mes
();

173 
	`£t_sögÀ_∑th«me
(c⁄° *
s
);

174 
	`add_∑th«me
(c⁄° *
s
);

176 
	`FªePIDL
(
LPITEMIDLIST
 
pidl
);

177 
	`CÀ¨OFN
();

178 
	`CÀ¨BINF
();

179 
	`Wö2Unix
(*
s
);

180 
	`Unix2Wö
(*
s
);

181 
	`showfûe
();

182 
CALLBACK
 
	`Dú_CB
(
HWND
 
wö
, 
UINT
 
msg
, 
LPARAM
 
∑øm
, LPARAM 
d©a
);

183 
	`showdú
();

185 
	`∑r£_fûãr
(const *);

186 
	`˛ór_fûãrs
();

187 
	`add_fûãr
(const *, const *);

190 #ifde‡
__APPLE__


191 
¥iv©e
:

192 
_bty≥
;

193 
_›ti⁄s
;

194 *
_∑√l
;

195 **
_∑th«mes
;

196 
_ç©h«mes
;

197 *
_dúe˘‹y
;

198 *
_tôÀ
;

199 *
_¥e£t_fûe
;

201 *
_fûãr
;

204 *
_fût_«mes
;

207 *
_fût_∑â
[
MAXFILTERS
];

212 
_fût_tŸÆ
;

213 
_fût_vÆue
;

214 *
_îrmsg
;

217 
	`îrmsg
(c⁄° *
msg
);

218 
	`˛ór_∑th«mes
();

219 
	`£t_sögÀ_∑th«me
(c⁄° *
s
);

220 
	`gë_ßvós_ba£«me
();

221 
	`˛ór_fûãrs
();

222 
	`add_fûãr
(const *, const *);

223 
	`∑r£_fûãr
(c⁄° *
‰om
);

224 
	`po°
();

225 
	`runmodÆ
();

228 #i‡! 
	`deföed
(
__APPLE__
Ë&& !
	$deföed
(
WIN32
)

229 
¥iv©e
:

230 #i‡
FLTK_ABI_VERSION
 <= 10302

231 
_bty≥
;

232 
_›ti⁄s
;

233 
_nfûãrs
;

234 *
_fûãr
;

235 *
_∑r£dfût
;

236 
_fûtvÆue
;

237 *
_¥e£t_fûe
;

238 *
_¥evvÆue
;

239 *
_dúe˘‹y
;

240 *
_îrmsg
;

242 
have_looked_f‹_GTK_libs
;

244 
Fl_FLTK_Fûe_Choo£r
 *
_x11_fûe_choo£r
;

245 
Fl_GTK_Fûe_Choo£r
 *
_gtk_fûe_choo£r
;

246 
	}
};

250 #i‡!
deföed
(
__APPLE__
Ë&& !deföed(
WIN32
)

251 ˛as†
	cFL_EXPORT
 
	mFl_FLTK_Fûe_Choo£r
 {

252 
‰õnd
 
˛ass
 
	mFl_N©ive_Fûe_Choo£r
;

253 
	m¥Ÿe˘ed
:

254 
_bty≥
;

255 
	m_›ti⁄s
;

256 
	m_nfûãrs
;

257 *
	m_fûãr
;

258 *
	m_∑r£dfût
;

259 
	m_fûtvÆue
;

260 *
	m_¥e£t_fûe
;

261 *
	m_¥evvÆue
;

262 *
	m_dúe˘‹y
;

263 *
	m_îrmsg
;

264 
Fl_FLTK_Fûe_Choo£r
(
vÆ
);

265 
	mvútuÆ
 ~
Fl_FLTK_Fûe_Choo£r
();

266 
îrmsg
(c⁄° *
msg
);

267 
ty≥_Ê_fûe
();

268 
∑r£_fûãr
();

269 
exi°_dülog
();

270 
Fl_Fûe_Choo£r
 *
	m_fûe_choo£r
;

271 
vútuÆ
 
ty≥
();

272 
	$ty≥
() const;

273 
	`›ti⁄s
();

274 
	$›ti⁄s
() const;

275 
vútuÆ
 
	$cou¡
() const;

276 
vútuÆ
 c⁄° *
	$fûíame
() const;

277 
vútuÆ
 c⁄° *
	$fûíame
(
i
) const;

278 
	`dúe˘‹y
(c⁄° *
vÆ
);

279 c⁄° *
	$dúe˘‹y
() const;

280 
vútuÆ
 
	`tôÀ
(const *);

281 
vútuÆ
 c⁄° * 
	$tôÀ
() const;

282 c⁄° *
	$fûãr
() const;

283 
	`fûãr
(const *);

284 
	$fûãrs
() const;

285 
	`fûãr_vÆue
(
i
);

286 
	$fûãr_vÆue
() const;

287 
	`¥e£t_fûe
(const *);

288 c⁄° * 
	$¥e£t_fûe
() const;

289 c⁄° *
	$îrmsg
() const;

290 
vútuÆ
 
	`show
();

294 ˛as†
	cFL_EXPORT
 
Fl_GTK_Fûe_Choo£r
 : 
public
 
Fl_FLTK_Fûe_Choo£r
 {

295 
‰õnd
 
˛ass
 
Fl_N©ive_Fûe_Choo£r
;

296 
¥iv©e
:

297 
_GtkWidgë
 
	tGtkWidgë
;

298 
_GtkFûeFûãrInfo
 
	tGtkFûeFûãrInfo
;

299 
	s∑ú
 {

300 
Fl_GTK_Fûe_Choo£r
* 
ru¬ög
;

301 c⁄° *
fûãr
;

302 
	`∑ú
(
Fl_GTK_Fûe_Choo£r
* 
c
, c⁄° *
f
) {

303 
ru¬ög
 = 
c
;

304 
fûãr
 = 
	`°rdup
(
f
);

306 ~
	`∑ú
() {

307 
	`‰ì
((*)
fûãr
);

310 
GtkWidgë
 *
gtkw_±r
;

311 *
gtkw_¶i°
;

312 
gtkw_cou¡
;

313 
muèbÀ
 *
gtkw_fûíame
;

314 *
gtkw_tôÀ
;

315 c⁄° *
¥evious_fûãr
;

317 
	`Ê_gtk_choo£r_wøµî
();

318 
	`Fl_GTK_Fûe_Choo£r
(
vÆ
);

319 
vútuÆ
 ~
	`Fl_GTK_Fûe_Choo£r
();

320 
did_föd_GTK_libs
;

321 
	`¥obe_f‹_GTK_libs
();

322 
vútuÆ
 
	`ty≥
();

323 
vútuÆ
 
	$cou¡
() const;

324 
vútuÆ
 c⁄° *
	$fûíame
() const;

325 
vútuÆ
 c⁄° *
	$fûíame
(
i
) const;

326 
vútuÆ
 
	`tôÀ
(const *);

327 
vútuÆ
 c⁄° * 
	$tôÀ
() const;

328 
vútuÆ
 
	`show
();

329 
	`ch™ged_ouçut_ty≥
(c⁄° *
fûãr
);

331 
	`cu°om_gtk_fûãr_fun˘i⁄
(c⁄° 
GtkFûeFûãrInfo
*, 
Fl_GTK_Fûe_Choo£r
::
∑ú
*);

332 
	`‰ì_∑ú
(
∑ú
 *
p
);

333 
	}
};

	@/home/lixing/include/FL/Fl_PNG_Image.H

22 #i‚de‡
Fl_PNG_Image_H


23 
	#Fl_PNG_Image_H


	)

24 
	~"Fl_Image.H
"

32 ˛as†
	cFL_EXPORT
 
	mFl_PNG_Image
 : 
public
 
Fl_RGB_Image
 {

34 
public
:

36 
Fl_PNG_Image
(c⁄° * 
fûíame
);

37 
Fl_PNG_Image
 (c⁄° *
«me_≤g
, c⁄° *
buf„r
, 
d©asize
);

38 
	m¥iv©e
:

39 
lﬂd_≤g_
(c⁄° *
«me_≤g
, c⁄° *
buf„r_≤g
, 
d©asize
);

	@/home/lixing/include/FL/Fl_Pixmap.H

22 #i‚de‡
Fl_Pixm≠_H


23 
	#Fl_Pixm≠_H


	)

24 
	~"Fl_Image.H
"

25 #i‡
deföed
(
WIN32
)

26 
	~"x.H
"

29 
˛ass
 
	gFl_Widgë
;

30 
	gFl_Míu_Iãm
;

33 #i‡
deföed
(
__sgi
Ë&& !deföed(
_COMPILER_VERSION
)

34 
	#ex∂icô


	)

41 ˛as†
	cFL_EXPORT
 
	mFl_Pixm≠
 : 
public
 
Fl_Image
 {

42 
‰õnd
 
˛ass
 
Fl_Qu¨tz_Gøphics_Drivî
;

43 
‰õnd
 
˛ass
 
	mFl_GDI_Gøphics_Drivî
;

44 
‰õnd
 
˛ass
 
	mFl_GDI_Pröãr_Gøphics_Drivî
;

45 
‰õnd
 
˛ass
 
	mFl_Xlib_Gøphics_Drivî
;

46 
c›y_d©a
();

47 
dñëe_d©a
();

48 
£t_d©a
(c⁄° * c⁄° *
p
);

49 
¥ï¨e
(
XP
, 
YP
, 
WP
, 
HP
, &
cx
, &
cy
,

50 &
X
, &
Y
, &
W
, &
H
);

52 
	m¥Ÿe˘ed
:

54 
mósuª
();

56 
	mpublic
:

58 
Æloc_d©a
;

60 
	m¥iv©e
:

62 #i‡
	$deföed
(
WIN32
)

63 #i‡
FLTK_ABI_VERSION
 < 10301

66 
UINT
 
pixm≠_bg_cﬁ‹
;

68 #i‡
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
WIN32
)

69 *
id_
;

70 *
mask_
;

72 
id_
;

73 
mask_
;

76 
public
:

79 
ex∂icô
 
	$Fl_Pixm≠
(* c⁄° * 
D
Ë: 
	`Fl_Image
(-1,0,1), 
	`Æloc_d©a
(0), 
	`id_
(0), 
	$mask_
(0Ë{
	`£t_d©a
((c⁄° *c⁄°*)
D
); 
	`mósuª
();}

81 
ex∂icô
 
	$Fl_Pixm≠
(
uch¨
* c⁄° * 
D
Ë: 
	`Fl_Image
(-1,0,1), 
	`Æloc_d©a
(0), 
	`id_
(0), 
	$mask_
(0Ë{
	`£t_d©a
((c⁄° *c⁄°*)
D
); 
	`mósuª
();
	}
}

83 
ex∂icô
 
	$Fl_Pixm≠
(c⁄° * c⁄° * 
D
Ë: 
	`Fl_Image
(-1,0,1), 
	`Æloc_d©a
(0), 
	`id_
(0), 
	$mask_
(0Ë{
	`£t_d©a
((c⁄° *c⁄°*)
D
); 
	`mósuª
();
	}
}

85 
ex∂icô
 
	$Fl_Pixm≠
(c⁄° 
uch¨
* c⁄° * 
D
Ë: 
	`Fl_Image
(-1,0,1), 
	`Æloc_d©a
(0), 
	`id_
(0), 
	$mask_
(0Ë{
	`£t_d©a
((c⁄° *c⁄°*)
D
); 
	`mósuª
();
	}
}

86 
	gvútuÆ
 ~
Fl_Pixm≠
();

87 
vútuÆ
 
Fl_Image
 *
c›y
(
W
, 
H
);

88 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); 
	}
}

89 
vútuÆ
 
cﬁ‹_avîage
(
Fl_Cﬁ‹
 
c
, 
i
);

90 
vútuÆ
 
deßtuøã
();

91 
vútuÆ
 
døw
(
X
, 
Y
, 
W
, 
H
, 
cx
=0, 
cy
=0);

92 
	$døw
(
X
, 
Y
Ë{
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0);
	}
}

93 
vútuÆ
 
œbñ
(
Fl_Widgë
*
w
);

94 
vútuÆ
 
œbñ
(
Fl_Míu_Iãm
*
m
);

95 
vútuÆ
 
unˇche
();

	@/home/lixing/include/FL/Fl_RGB_Image.H

19 #i‚de‡
Fl_RGB_Image_H


20 
	#Fl_RGB_Image_H


	)

21 
	~"Fl_Image.H
"

	@/home/lixing/include/FL/Fl_Radio_Button.H

22 #i‚de‡
Fl_Radio_Buâ⁄_H


23 
	#Fl_Radio_Buâ⁄_H


	)

25 
	~"Fl_Buâ⁄.H
"

27 ˛as†
	cFL_EXPORT
 
	mFl_Radio_Buâ⁄
 : 
public
 
Fl_Buâ⁄
 {

28 
public
:

29 
Fl_Radio_Buâ⁄
(
X
,
Y
,
W
,
H
,c⁄° *
L
=0);

	@/home/lixing/include/FL/Fl_Radio_Light_Button.H

22 #i‚de‡
Fl_Radio_Light_Buâ⁄_H


23 
	#Fl_Radio_Light_Buâ⁄_H


	)

25 
	~"Fl_Light_Buâ⁄.H
"

27 ˛as†
	cFL_EXPORT
 
	mFl_Radio_Light_Buâ⁄
 : 
public
 
Fl_Light_Buâ⁄
 {

28 
public
:

29 
Fl_Radio_Light_Buâ⁄
(
X
,
Y
,
W
,
H
,c⁄° *
l
=0);

	@/home/lixing/include/FL/Fl_Radio_Round_Button.H

22 #i‚de‡
Fl_Radio_Round_Buâ⁄_H


23 
	#Fl_Radio_Round_Buâ⁄_H


	)

25 
	~"Fl_Round_Buâ⁄.H
"

27 ˛as†
	cFL_EXPORT
 
	mFl_Radio_Round_Buâ⁄
 : 
public
 
Fl_Round_Buâ⁄
 {

28 
public
:

29 
Fl_Radio_Round_Buâ⁄
(
X
,
Y
,
W
,
H
,c⁄° *
L
=0);

	@/home/lixing/include/FL/Fl_Return_Button.H

22 #i‚de‡
Fl_Rëu∫_Buâ⁄_H


23 
	#Fl_Rëu∫_Buâ⁄_H


	)

24 
	~"Fl_Buâ⁄.H
"

33 ˛as†
	cFL_EXPORT
 
	mFl_Rëu∫_Buâ⁄
 : 
public
 
Fl_Buâ⁄
 {

34 
¥Ÿe˘ed
:

35 
døw
();

36 
	mpublic
:

37 
h™dÀ
();

43 
Fl_Rëu∫_Buâ⁄
(
X
, 
Y
, 
W
, 
H
,c⁄° *
l
=0);

	@/home/lixing/include/FL/Fl_Round_Button.H

19 #i‚de‡
Fl_Round_Buâ⁄_H


20 
	#Fl_Round_Buâ⁄_H


	)

22 
	~"Fl_Light_Buâ⁄.H
"

36 ˛as†
	cFL_EXPORT
 
	mFl_Round_Buâ⁄
 : 
public
 
Fl_Light_Buâ⁄
 {

37 
public
:

38 
Fl_Round_Buâ⁄
(
x
,
y
,
w
,
h
,c⁄° *
l
 = 0);

	@/home/lixing/include/FL/Fl_Scroll.H

22 #i‚de‡
Fl_S¸ﬁl_H


23 
	#Fl_S¸ﬁl_H


	)

25 
	~"Fl_Group.H
"

26 
	~"Fl_S¸ﬁlb¨.H
"

87 ˛as†
	cFL_EXPORT
 
	mFl_S¸ﬁl
 : 
public
 
Fl_Group
 {

89 
xposôi⁄_
, 
	myposôi⁄_
;

90 
	mﬁdx
, 
	mﬁdy
;

91 
	ms¸ﬁlb¨_size_
;

92 
hs¸ﬁlb¨_cb
(
Fl_Widgë
*, *);

93 
s¸ﬁlb¨_cb
(
Fl_Widgë
*, *);

94 
fix_s¸ﬁlb¨_‹dî
();

95 
døw_˛ù
(*,,,,);

97 #i‡
FLTK_ABI_VERSION
 >= 10303

98 
	m¥Ÿe˘ed
:

100 
¥iv©e
:

110 °ru˘ { 
x
,
	my
,
	mw
,
	mh
; } 
	tFl_Regi⁄_XYWH
;

113 
	ml
;

114 
	mr
;

115 
	mt
;

116 
	mb
;

117 } 
	tFl_Regi⁄_LRTB
;

120 
	mx
,
	my
,
	mw
,
	mh
;

121 
	mpos
;

122 
	msize
;

123 
	mfú°
;

124 
	mtŸÆ
;

125 } 
	tFl_S¸ﬁlb¨_D©a
;

126 
	ms¸ﬁlsize
;

127 
Fl_Regi⁄_XYWH
 
	mö√rbox
;

128 
Fl_Regi⁄_XYWH
 
	mö√rchûd
;

129 
Fl_Regi⁄_LRTB
 
	mchûd
;

130 
	mh√eded
;

131 
	mv√eded
;

132 
Fl_S¸ﬁlb¨_D©a
 
	mhs¸ﬁl
;

133 
Fl_S¸ﬁlb¨_D©a
 
	mvs¸ﬁl
;

134 } 
	gS¸ﬁlInfo
;

135 
ªˇlc_s¸ﬁlb¨s
(
S¸ﬁlInfo
 &
si
);

137 
	g¥Ÿe˘ed
:

139 
bbox
(&,&,&,&);

140 
døw
();

142 
	gpublic
:

144 
Fl_S¸ﬁlb¨
 
s¸ﬁlb¨
;

145 
Fl_S¸ﬁlb¨
 
	ghs¸ﬁlb¨
;

147 
ªsize
(,,,);

148 
h™dÀ
();

150 
Fl_S¸ﬁl
(
X
,
Y
,
W
,
H
,c⁄° *
l
=0);

153 
	gHORIZONTAL
 = 1,

154 
	gVERTICAL
 = 2,

155 
	gBOTH
 = 3,

156 
	gALWAYS_ON
 = 4,

157 
	gHORIZONTAL_ALWAYS
 = 5,

158 
	gVERTICAL_ALWAYS
 = 6,

159 
	gBOTH_ALWAYS
 = 7

163 
	$xposôi⁄
(Ëc⁄° { 
xposôi⁄_
;
	}
}

165 
	$yposôi⁄
(Ëc⁄° { 
yposôi⁄_
;
	}
}

166 
s¸ﬁl_to
(, );

167 
˛ór
();

177 
	$s¸ﬁlb¨_size
() const {

178 (
s¸ﬁlb¨_size_
);

179 
	}
}

199 
	$s¸ﬁlb¨_size
(
√wSize
) {

200 i‡–
√wSize
 !
s¸ﬁlb¨_size_
 ) 
	`ªdøw
();

201 
s¸ﬁlb¨_size_
 = 
√wSize
;

202 
	}
}

	@/home/lixing/include/FL/Fl_Secret_Input.H

22 #i‚de‡
Fl_Se¸ë_I≈ut_H


23 
	#Fl_Se¸ë_I≈ut_H


	)

25 
	~"Fl_I≈ut.H
"

35 ˛as†
	cFL_EXPORT
 
	mFl_Se¸ë_I≈ut
 : 
public
 
Fl_I≈ut
 {

36 
public
:

43 
Fl_Se¸ë_I≈ut
(
X
,
Y
,
W
,
H
,c⁄° *
l
 = 0);

44 
h™dÀ
();

	@/home/lixing/include/FL/Fl_Shared_Image.H

22 #i‚de‡
Fl_Sh¨ed_Image_H


23 
	#Fl_Sh¨ed_Image_H


	)

25 
	~"Fl_Image.H
"

29 
	gFl_Image
 *(*
	tFl_Sh¨ed_H™dÀr
)(c⁄° *
	t«me
, 
	tuch¨
 *
	thódî
,

30 
	thódîÀn
);

40 ˛as†
	cFL_EXPORT
 
	mFl_Sh¨ed_Image
 : 
public
 
Fl_Image
 {

42 
‰õnd
 
˛ass
 
Fl_JPEG_Image
;

43 
‰õnd
 
˛ass
 
	mFl_PNG_Image
;

45 
	m¥Ÿe˘ed
:

47 
Fl_Sh¨ed_Image
 **
images_
;

48 
	mnum_images_
;

49 
	mÆloc_images_
;

50 
Fl_Sh¨ed_H™dÀr
 *
	mh™dÀrs_
;

51 
	mnum_h™dÀrs_
;

52 
	mÆloc_h™dÀrs_
;

54 c⁄° *
	m«me_
;

55 
	m‹igöÆ_
;

56 
	mªfcou¡_
;

57 
Fl_Image
 *
	mimage_
;

58 
	mÆloc_image_
;

60 
com∑ª
(
Fl_Sh¨ed_Image
 **
i0
, Fl_Sh¨ed_Imagê**
i1
);

63 
Fl_Sh¨ed_Image
();

64 
Fl_Sh¨ed_Image
(c⁄° *
n
, 
Fl_Image
 *
img
 = 0);

65 
	mvútuÆ
 ~
Fl_Sh¨ed_Image
();

66 
add
();

67 
upd©e
();

69 
	mpublic
:

71 c⁄° *
	$«me
(Ë{  
«me_
; }

73 
	$ªfcou¡
(Ë{  
ªfcou¡_
; 
	}
}

74 
ªÀa£
();

75 
ªlﬂd
();

77 
vútuÆ
 
Fl_Image
 *
c›y
(
W
, 
H
);

78 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); 
	}
}

79 
vútuÆ
 
cﬁ‹_avîage
(
Fl_Cﬁ‹
 
c
, 
i
);

80 
vútuÆ
 
deßtuøã
();

81 
vútuÆ
 
døw
(
X
, 
Y
, 
W
, 
H
, 
cx
, 
cy
);

82 
	$døw
(
X
, 
Y
Ë{ 
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0); 
	}
}

83 
vútuÆ
 
unˇche
();

85 
Fl_Sh¨ed_Image
 *
föd
(c⁄° *
n
, 
W
 = 0, 
H
 = 0);

86 
Fl_Sh¨ed_Image
 *
gë
(c⁄° *
n
, 
W
 = 0, 
H
 = 0);

87 
Fl_Sh¨ed_Image
 **
images
();

88 
num_images
();

89 
add_h™dÀr
(
Fl_Sh¨ed_H™dÀr
 
f
);

90 
ªmove_h™dÀr
(
Fl_Sh¨ed_H™dÀr
 
f
);

99 
FL_EXPORT
 
Ê_ªgi°î_images
();

	@/home/lixing/include/FL/Fl_Slider.H

22 #i‚de‡
Fl_Slidî_H


23 
	#Fl_Slidî_H


	)

25 #i‚de‡
Fl_VÆu©‹_H


26 
	~"Fl_VÆu©‹.H
"

30 
	#FL_VERT_SLIDER
 0

	)

31 
	#FL_HOR_SLIDER
 1

	)

32 
	#FL_VERT_FILL_SLIDER
 2

	)

33 
	#FL_HOR_FILL_SLIDER
 3

	)

34 
	#FL_VERT_NICE_SLIDER
 4

	)

35 
	#FL_HOR_NICE_SLIDER
 5

	)

61 ˛as†
	cFL_EXPORT
 
	mFl_Slidî
 : 
public
 
Fl_VÆu©‹
 {

63 
¶idî_size_
;

64 
uch¨
 
	m¶idî_
;

65 
_Fl_Slidî
();

66 
døw_bg
(, , , );

68 
	m¥Ÿe˘ed
:

71 
døw
(, , , );

72 
h™dÀ
(, , , , );

73 
døw
();

75 
	mpublic
:

77 
h™dÀ
();

78 
Fl_Slidî
(
X
,
Y
,
W
,
H
, c⁄° *
L
 = 0);

79 
Fl_Slidî
(
uch¨
 
t
,
X
,
Y
,
W
,
H
, c⁄° *
L
);

81 
s¸ﬁlvÆue
(
pos
,
size
,
fú°
,
tŸÆ
);

82 
bounds
(
a
, 
b
);

87 
	$¶idî_size
(Ëc⁄° { 
¶idî_size_
;}

98 
	`¶idî_size
(
v
);

101 
Fl_Boxty≥
 
	$¶idî
(Ëc⁄° { (
Fl_Boxty≥
)
¶idî_
;
	}
}

104 
	$¶idî
(
Fl_Boxty≥
 
c
Ë{
¶idî_
 = c;
	}
}

	@/home/lixing/include/FL/Fl_Sys_Menu_Bar.H

19 #i‚de‡
Fl_Sys_Míu_B¨_H


20 
	#Fl_Sys_Míu_B¨_H


	)

22 
	~"Fl_Míu_B¨.H
"

23 
	~"x.H
"

25 #i‡
deföed
(
__APPLE__
Ë|| deföed(
FL_DOXYGEN
)

41 ˛as†
	cFL_EXPORT
 
	mFl_Sys_Míu_B¨
 : 
public
 
Fl_Míu_B¨
 {

42 
¥Ÿe˘ed
:

43 
upd©e
();

44 
døw
();

45 
	mpublic
:

46 
Fl_Sys_Míu_B¨
(
x
,
y
,
w
,
h
,c⁄° *
l
=0);

47 ~
Fl_Sys_Míu_B¨
();

50 c⁄° 
Fl_Míu_Iãm
 *
	$míu
(Ëc⁄° { 
Fl_Míu_
::
	`míu
();}

51 
	`míu
(c⁄° 
Fl_Míu_Iãm
 *
m
);

52 
	`add
(c⁄° * 
œbñ
, 
sh‹tcut
, 
Fl_CÆlback
*, *
u£r_d©a
=0, 
Êags
=0);

56 
	$add
(c⁄° * 
œbñ
, c⁄° * 
sh‹tcut
, 
Fl_CÆlback
* 
cb
, *
u£r_d©a
=0, 
Êags
=0) {

57  
	`add
(
œbñ
, 
	`Ê_ﬁd_sh‹tcut
(
sh‹tcut
), 
cb
, 
u£r_d©a
, 
Êags
);

58 
	}
}

59 
add
(c⁄° * 
°r
);

60 
ö£π
(
ödex
, c⁄° * 
œbñ
, 
sh‹tcut
, 
Fl_CÆlback
 *
cb
, *
u£r_d©a
=0, 
Êags
=0);

64 
	$ö£π
(
ödex
, c⁄° * 
œbñ
, c⁄° * 
sh‹tcut
, 
Fl_CÆlback
 *
cb
, *
u£r_d©a
=0, 
Êags
=0) {

65  
	`ö£π
(
ödex
, 
œbñ
, 
	`Ê_ﬁd_sh‹tcut
(
sh‹tcut
), 
cb
, 
u£r_d©a
, 
Êags
);

66 
	}
}

67 
ªmove
(
n
);

68 
ª∂a˚
(
ønk
, c⁄° *
«me
);

72 
˛ór
();

76 
˛ór_submíu
(
ödex
);

79 
	$globÆ
(Ë{
	}
};

82 
	$mode
 (
i
, 
Ê
) {

83 
Fl_Míu_
::
	`mode
(
i
, 
Ê
);

84 
	`upd©e
();

85 
	}
}

88 
	$mode
(
i
Ëc⁄° {  
Fl_Míu_
::
	`mode
(i); 
	}
}

91 
	$sh‹tcut
 (
i
, 
s
Ë{ 
Fl_Míu_
::
	`sh‹tcut
(i, s); 
	`upd©e
(); 
	}
};

96 
Fl_Míu_B¨
 
	tFl_Sys_Míu_B¨
;

	@/home/lixing/include/FL/Fl_Table.H

20 #i‚de‡
_FL_TABLE_H


21 
	#_FL_TABLE_H


	)

23 
	~<sys/ty≥s.h
>

24 
	~<°rög.h
>

25 #ifde‡
WIN32


26 
	~<mÆloc.h
>

28 
	~<°dlib.h
>

31 
	~<FL/Fl.H
>

32 
	~<FL/Fl_Group.H
>

33 
	~<FL/Fl_S¸ﬁl.H
>

34 
	~<FL/Fl_Box.H
>

35 
	~<FL/Fl_S¸ﬁlb¨.H
>

170 ˛as†
	cFL_EXPORT
 
	mFl_TabÀ
 : 
public
 
Fl_Group
 {

171 
public
:

175 
	eTabÀC⁄ãxt
 {

176 
CONTEXT_NONE
 = 0,

177 
	mCONTEXT_STARTPAGE
 = 0x01,

178 
	mCONTEXT_ENDPAGE
 = 0x02,

179 
	mCONTEXT_ROW_HEADER
 = 0x04,

180 
	mCONTEXT_COL_HEADER
 = 0x08,

181 
	mCONTEXT_CELL
 = 0x10,

182 
	mCONTEXT_TABLE
 = 0x20,

183 
	mCONTEXT_RC_RESIZE
 = 0x40

186 
	g¥iv©e
:

187 
_rows
, 
	g_cﬁs
;

188 
	g_row_hódî_w
;

189 
	g_cﬁ_hódî_h
;

190 
	g_row_posôi⁄
;

191 
	g_cﬁ_posôi⁄
;

193 
	g_row_hódî
;

194 
	g_cﬁ_hódî
;

195 
	g_row_ªsize
;

196 
	g_cﬁ_ªsize
;

197 
	g_row_ªsize_mö
;

198 
	g_cﬁ_ªsize_mö
;

201 
	g_ªdøw_t›row
;

202 
	g_ªdøw_bŸrow
;

203 
	g_ªdøw_À·cﬁ
;

204 
	g_ªdøw_rightcﬁ
;

205 
Fl_Cﬁ‹
 
	g_row_hódî_cﬁ‹
;

206 
Fl_Cﬁ‹
 
	g_cﬁ_hódî_cﬁ‹
;

208 
	g_auto_døg
;

209 
	g_£À˘ög
;

210 #i‡
FLTK_ABI_VERSION
 >= 10301

211 
	g_s¸ﬁlb¨_size
;

213 #i‡
FLTK_ABI_VERSION
 >= 10303

215 
	gTABCELLNAV
 = 1<<0,

217 
	gÊags_
;

221 ˛as†
	cFL_EXPORT
 
	gI¡Ve˘‹
 {

222 *
	g¨r
;

223 
	g_size
;

224 
öô
() {

225 
	g¨r
 = 
NULL
;

226 
	g_size
 = 0;

228 
c›y
(*
√w¨r
, 
√wsize
) {

229 
size
(
√wsize
);

230 
mem˝y
(
¨r
, 
√w¨r
, 
√wsize
 * ());

232 
	gpublic
:

233 
I¡Ve˘‹
(Ë{ 
öô
(); }

234 ~
I¡Ve˘‹
(Ë{ i‡–
	g¨r
 ) 
‰ì
(
¨r
);áº = 
NULL
; }

235 
I¡Ve˘‹
(I¡Ve˘‹&
o
Ë{ 
öô
(); 
c›y
(o.
¨r
, o.
_size
); }

236 
	gI¡Ve˘‹
& 
	g›î©‹
=(
I¡Ve˘‹
&
o
) {

237 
öô
();

238 
c›y
(
o
.
¨r
, o.
_size
);

239 (*
	gthis
);

241 
	g›î©‹
[](
	gx
Ëc⁄° { (
	g¨r
[
x
]); }

242 & 
	g›î©‹
[](
	gx
Ë{ (
	g¨r
[
x
]); }

243 
size
(Ë{ (
	g_size
); }

244 
size
(
cou¡
) {

245 i‡–
	gcou¡
 !
_size
 ) {

246 
¨r
 = (*)
ªÆloc
◊º, 
cou¡
 * ());

247 
	g_size
 = 
cou¡
;

250 
p›_back
(Ë{ 
	gtmp
 = 
¨r
[
_size
-1]; 
	g_size
--; (tmp); }

251 
push_back
(
vÆ
Ë{ 
	gx
 = 
_size
; 
size
(_size+1); 
	g¨r
[
x
] = val; }

252 
back
(Ë{ (
	g¨r
[
_size
-1]); }

255 
I¡Ve˘‹
 
	g_cﬁwidths
;

256 
I¡Ve˘‹
 
	g_rowheights
;

258 
Fl_Curs‹
 
	g_œ°_curs‹
;

261 
TabÀC⁄ãxt
 
	g_ˇŒback_c⁄ãxt
;

262 
	g_ˇŒback_row
, 
	g_ˇŒback_cﬁ
;

268 
	g_ªsizög_cﬁ
;

269 
	g_ªsizög_row
;

270 
	g_døggög_x
;

271 
	g_døggög_y
;

272 
	g_œ°_row
;

275 
_ªdøw_˚Œ
(
TabÀC⁄ãxt
 
c⁄ãxt
, 
R
, 
C
);

277 
_°¨t_auto_døg
();

278 
_°›_auto_døg
();

279 
_auto_døg_cb
();

280 
_auto_døg_cb2
(*
d
);

282 
	g¥Ÿe˘ed
:

283 
	eResizeFœg
 {

284 
RESIZE_NONE
 = 0,

285 
	gRESIZE_COL_LEFT
 = 1,

286 
	gRESIZE_COL_RIGHT
 = 2,

287 
	gRESIZE_ROW_ABOVE
 = 3,

288 
	gRESIZE_ROW_BELOW
 = 4

291 
	gèbÀ_w
, 
	gèbÀ_h
;

292 
	gt›row
, 
	gbŸrow
, 
	gÀ·cﬁ
, 
	grightcﬁ
;

295 
	gcuºít_row
, 
	gcuºít_cﬁ
;

296 
	g£À˘_row
, 
	g£À˘_cﬁ
;

299 
	gt›row_s¸ﬁÕos
;

300 
	gÀ·cﬁ_s¸ﬁÕos
;

303 
	gtix
, 
	gtiy
, 
	gtiw
, 
	gtih
;

304 
	gtox
, 
	gtoy
, 
	gtow
, 
	gtoh
;

305 
	gwix
, 
	gwiy
, 
	gwiw
, 
	gwih
;

307 
Fl_S¸ﬁl
 *
	gèbÀ
;

308 
Fl_S¸ﬁlb¨
 *
	gvs¸ﬁlb¨
;

309 
Fl_S¸ﬁlb¨
 *
	ghs¸ﬁlb¨
;

312 
h™dÀ
(
e
);

315 
ªˇlc_dimísi⁄s
();

316 
èbÀ_ªsized
();

317 
èbÀ_s¸ﬁÀd
();

318 
gë_bounds
(
TabÀC⁄ãxt
 
c⁄ãxt
,

319 &
X
, &
Y
, &
W
, &
H
);

320 
ch™ge_curs‹
(
Fl_Curs‹
 
√wcurs‹
);

321 
TabÀC⁄ãxt
 
curs‹2rowcﬁ
(&
R
, &
C
, 
ResizeFœg
 &
ªsizeÊag
);

323 
föd_˚Œ
(
TabÀC⁄ãxt
 
c⁄ãxt
,

324 
R
, 
C
, &
X
, &
Y
, &
W
, &
H
);

325 
row_cﬁ_˛amp
(
TabÀC⁄ãxt
 
c⁄ãxt
, &
R
, &
C
);

438 
vútuÆ
 
	$døw_˚Œ
(
TabÀC⁄ãxt
 
c⁄ãxt
, 
R
=0, 
C
=0,

439 
X
=0, 
Y
=0, 
W
=0, 
H
=0)

440 { 
	}
}

442 
row_s¸ﬁl_posôi⁄
(
row
);

443 
cﬁ_s¸ﬁl_posôi⁄
(
cﬁ
);

445 
	$is_Êtk_c⁄èöî
() {

446 –
Fl_Group
::
	`chûdªn
() > 3 );

447 
	}
}

449 
s¸ﬁl_cb
(
Fl_Widgë
*,*);

451 
damage_z⁄e
(
r1
, 
c1
, 
r2
, 
c2
, 
r3
 = 0, 
c3
 = 0);

453 
	$ªdøw_ønge
(
t›Row
, 
bŸRow
, 
À·Cﬁ
, 
rightCﬁ
) {

454 i‡–
_ªdøw_t›row
 == -1 ) {

456 
_ªdøw_t›row
 = 
t›Row
;

457 
_ªdøw_bŸrow
 = 
bŸRow
;

458 
_ªdøw_À·cﬁ
 = 
À·Cﬁ
;

459 
_ªdøw_rightcﬁ
 = 
rightCﬁ
;

462 i‡–
t›Row
 < 
_ªdøw_t›row
 ) _redraw_toprow =ÅopRow;

463 i‡–
bŸRow
 > 
_ªdøw_bŸrow
 ) _redraw_botrow = botRow;

464 i‡–
À·Cﬁ
 < 
_ªdøw_À·cﬁ
 ) _redraw_leftcol =ÜeftCol;

465 i‡–
rightCﬁ
 > 
_ªdøw_rightcﬁ
 ) _redraw_rightcol =ÑightCol;

469 
	`damage
(
FL_DAMAGE_CHILD
);

470 
	}
}

472 
	gpublic
:

478 
Fl_TabÀ
(
X
, 
Y
, 
W
, 
H
, c⁄° *
l
=0);

484 ~
Fl_TabÀ
();

491 
vútuÆ
 
	$˛ór
(Ë{ 
	`rows
(0); 
	`cﬁs
(0); 
èbÀ
->
	`˛ór
(); 
	}
}

500 
ölöe
 
	$èbÀ_box
(
Fl_Boxty≥
 
vÆ
) {

501 
èbÀ
->
	`box
(
vÆ
);

502 
	`èbÀ_ªsized
();

503 
	}
}

508 
ölöe
 
Fl_Boxty≥
 
	$èbÀ_box
( ) {

509 (
èbÀ
->
	`box
());

510 
	}
}

515 
vútuÆ
 
rows
(
vÆ
);

520 
ölöe
 
	$rows
() {

521 (
_rows
);

522 
	}
}

527 
vútuÆ
 
cﬁs
(
vÆ
);

532 
ölöe
 
	$cﬁs
() {

533 (
_cﬁs
);

534 
	}
}

564 
ölöe
 
	$visibÀ_˚Œs
(& 
r1
, & 
r2
, & 
c1
, & 
c2
) {

565 
r1
 = 
t›row
;

566 
r2
 = 
bŸrow
;

567 
c1
 = 
À·cﬁ
;

568 
c2
 = 
rightcﬁ
;

569 
	}
}

575 
	$is_öãø˘ive_ªsize
() {

576 (
_ªsizög_row
 !-1 || 
_ªsizög_cﬁ
 != -1);

577 
	}
}

582 
ölöe
 
	$row_ªsize
() {

583 (
_row_ªsize
);

584 
	}
}

592 
	$row_ªsize
(
Êag
) {

593 
_row_ªsize
 = 
Êag
;

594 
	}
}

599 
ölöe
 
	$cﬁ_ªsize
() {

600 (
_cﬁ_ªsize
);

601 
	}
}

608 
	$cﬁ_ªsize
(
Êag
) {

609 
_cﬁ_ªsize
 = 
Êag
;

610 
	}
}

617 
ölöe
 
	$cﬁ_ªsize_mö
() {

618 (
_cﬁ_ªsize_mö
);

619 
	}
}

624 
	$cﬁ_ªsize_mö
(
vÆ
) {

625 
_cﬁ_ªsize_mö
 = ( 
vÆ
 < 1 ) ? 1 : val;

626 
	}
}

631 
ölöe
 
	$row_ªsize_mö
() {

632 (
_row_ªsize_mö
);

633 
	}
}

640 
	$row_ªsize_mö
(
vÆ
) {

641 
_row_ªsize_mö
 = ( 
vÆ
 < 1 ) ? 1 : val;

642 
	}
}

647 
ölöe
 
	$row_hódî
() {

648 (
_row_hódî
);

649 
	}
}

655 
	$row_hódî
(
Êag
) {

656 
_row_hódî
 = 
Êag
;

657 
	`èbÀ_ªsized
();

658 
	`ªdøw
();

659 
	}
}

664 
ölöe
 
	$cﬁ_hódî
() {

665 (
_cﬁ_hódî
);

666 
	}
}

672 
	$cﬁ_hódî
(
Êag
) {

673 
_cﬁ_hódî
 = 
Êag
;

674 
	`èbÀ_ªsized
();

675 
	`ªdøw
();

676 
	}
}

681 
ölöe
 
	$cﬁ_hódî_height
(
height
) {

682 
_cﬁ_hódî_h
 = 
height
;

683 
	`èbÀ_ªsized
();

684 
	`ªdøw
();

685 
	}
}

690 
ölöe
 
	$cﬁ_hódî_height
() {

691 (
_cﬁ_hódî_h
);

692 
	}
}

697 
ölöe
 
	$row_hódî_width
(
width
) {

698 
_row_hódî_w
 = 
width
;

699 
	`èbÀ_ªsized
();

700 
	`ªdøw
();

701 
	}
}

706 
ölöe
 
	$row_hódî_width
() {

707 (
_row_hódî_w
);

708 
	}
}

713 
ölöe
 
	$row_hódî_cﬁ‹
(
Fl_Cﬁ‹
 
vÆ
) {

714 
_row_hódî_cﬁ‹
 = 
vÆ
;

715 
	`ªdøw
();

716 
	}
}

721 
ölöe
 
Fl_Cﬁ‹
 
	$row_hódî_cﬁ‹
() {

722 (
_row_hódî_cﬁ‹
);

723 
	}
}

728 
ölöe
 
	$cﬁ_hódî_cﬁ‹
(
Fl_Cﬁ‹
 
vÆ
) {

729 
_cﬁ_hódî_cﬁ‹
 = 
vÆ
;

730 
	`ªdøw
();

731 
	}
}

736 
ölöe
 
Fl_Cﬁ‹
 
	$cﬁ_hódî_cﬁ‹
() {

737 (
_cﬁ_hódî_cﬁ‹
);

738 
	}
}

746 
row_height
(
row
, 
height
);

751 
ölöe
 
	$row_height
(
row
) {

752 ((
row
<0 ||Ñow>=()
_rowheights
.
	`size
()) ? 0 : _rowheights[row]);

753 
	}
}

760 
cﬁ_width
(
cﬁ
, 
width
);

765 
ölöe
 
	$cﬁ_width
(
cﬁ
) {

766 ((
cﬁ
<0 || cﬁ>=()
_cﬁwidths
.
	`size
()) ? 0 : _colwidths[col]);

767 
	}
}

773 
	$row_height_Æl
(
height
) {

774  
r
=0;Ñ<
	`rows
();Ñ++ ) {

775 
	`row_height
(
r
, 
height
);

777 
	}
}

783 
	$cﬁ_width_Æl
(
width
) {

784  
c
=0; c<
	`cﬁs
(); c++ ) {

785 
	`cﬁ_width
(
c
, 
width
);

787 
	}
}

792 
row_posôi⁄
(
row
);

797 
cﬁ_posôi⁄
(
cﬁ
);

802 
	$row_posôi⁄
() {

803 (
_row_posôi⁄
);

804 
	}
}

809 
	$cﬁ_posôi⁄
() {

810 (
_cﬁ_posôi⁄
);

811 
	}
}

818 
ölöe
 
	$t›_row
(
row
) {

819 
	`row_posôi⁄
(
row
);

820 
	}
}

826 
ölöe
 
	$t›_row
() {

827 (
	`row_posôi⁄
());

828 
	}
}

829 
is_£À˘ed
(
r
, 
c
);

830 
gë_£À˘i⁄
(&
row_t›
, &
cﬁ_À·
, &
row_bŸ
, &
cﬁ_right
);

831 
£t_£À˘i⁄
(
row_t›
, 
cﬁ_À·
, 
row_bŸ
, 
cﬁ_right
);

832 
move_curs‹
(
R
, 
C
, 
shi·£À˘
);

833 
move_curs‹
(
R
, 
C
);

838 
ªsize
(
X
, 
Y
, 
W
, 
H
);

839 
døw
();

853 
	$öô_sizes
() {

854 
èbÀ
->
	`öô_sizes
();

855 
èbÀ
->
	`ªdøw
();

856 
	}
}

857 
	$add
(
Fl_Widgë
& 
wgt
) {

858 
èbÀ
->
	`add
(
wgt
);

859 i‡–
èbÀ
->
	`chûdªn
() > 2 ) {

860 
èbÀ
->
	`show
();

862 
èbÀ
->
	`hide
();

864 
	}
}

865 
	$add
(
Fl_Widgë
* 
wgt
) {

866 
	`add
(*
wgt
);

867 
	}
}

868 
	$ö£π
(
Fl_Widgë
& 
wgt
, 
n
) {

869 
èbÀ
->
	`ö£π
(
wgt
,
n
);

870 
	}
}

871 
	$ö£π
(
Fl_Widgë
& 
wgt
, Fl_Widgë* 
w2
) {

872 
èbÀ
->
	`ö£π
(
wgt
,
w2
);

873 
	}
}

874 
	$ªmove
(
Fl_Widgë
& 
wgt
) {

875 
èbÀ
->
	`ªmove
(
wgt
);

876 
	}
}

877 
	$begö
() {

878 
èbÀ
->
	`begö
();

879 
	}
}

880 
	$íd
() {

881 
èbÀ
->
	`íd
();

885 i‡–
èbÀ
->
	`chûdªn
() > 2 ) {

886 
èbÀ
->
	`show
();

888 
èbÀ
->
	`hide
();

890 
Fl_Group
::
	`cuºít
(Fl_Group::
	`∑ª¡
());

891 
	}
}

892 
Fl_Widgë
 * c⁄° *
	$¨øy
() {

893 (
èbÀ
->
	`¨øy
());

894 
	}
}

910 
Fl_Widgë
 *
	$chûd
(
n
) const {

911 (
èbÀ
->
	`chûd
(
n
));

912 
	}
}

922 
	$chûdªn
() const {

923 (
èbÀ
->
	`chûdªn
()-2);

924 
	}
}

925 
	$föd
(c⁄° 
Fl_Widgë
 *
wgt
) const {

926 (
èbÀ
->
	`föd
(
wgt
));

927 
	}
}

928 
	$föd
(c⁄° 
Fl_Widgë
 &
wgt
) const {

929 (
èbÀ
->
	`föd
(
wgt
));

930 
	}
}

938 
	$ˇŒback_row
() {

939 (
_ˇŒback_row
);

940 
	}
}

947 
	$ˇŒback_cﬁ
() {

948 (
_ˇŒback_cﬁ
);

949 
	}
}

956 
TabÀC⁄ãxt
 
	$ˇŒback_c⁄ãxt
() {

957 (
_ˇŒback_c⁄ãxt
);

958 
	}
}

960 
	$do_ˇŒback
(
TabÀC⁄ãxt
 
c⁄ãxt
, 
row
, 
cﬁ
) {

961 
_ˇŒback_c⁄ãxt
 = 
c⁄ãxt
;

962 
_ˇŒback_row
 = 
row
;

963 
_ˇŒback_cﬁ
 = 
cﬁ
;

964 
Fl_Widgë
::
	`do_ˇŒback
();

965 
	}
}

967 #i‡
FL_DOXYGEN


996 
whí
(
Fl_Whí
 
Êags
);

999 #i‡
FL_DOXYGEN


1077 
ˇŒback
(
Fl_Widgë
*, *);

1080 #i‡
FLTK_ABI_VERSION
 >= 10301

1091 
	$s¸ﬁlb¨_size
() const {

1092 (
_s¸ﬁlb¨_size
);

1093 
	}
}

1112 
	$s¸ﬁlb¨_size
(
√wSize
) {

1113 i‡–
√wSize
 !
_s¸ﬁlb¨_size
 ) 
	`ªdøw
();

1114 
_s¸ﬁlb¨_size
 = 
√wSize
;

1115 
	}
}

1117 #i‡
FLTK_ABI_VERSION
 >= 10303

1131 
	$èb_˚Œ_«v
(
vÆ
) {

1132 i‡–
vÆ
 ) 
Êags_
 |
TABCELLNAV
;

1133 
Êags_
 &~
TABCELLNAV
;

1134 
	}
}

1143 
	$èb_˚Œ_«v
() const {

1144 (
Êags_
 & 
TABCELLNAV
 ? 1 : 0);

1145 
	}
}

	@/home/lixing/include/FL/Fl_Text_Display.H

24 #i‚de‡
FL_TEXT_DISPLAY_H


25 
	#FL_TEXT_DISPLAY_H


	)

27 
	~"Ê_døw.H
"

28 
	~"Fl_Group.H
"

29 
	~"Fl_Widgë.H
"

30 
	~"Fl_S¸ﬁlb¨.H
"

31 
	~"Fl_Text_Buf„r.H
"

82 ˛as†
	cFL_EXPORT
 
	mFl_Text_Di•œy
: 
public
 
Fl_Group
 {

84 
public
:

90 
NORMAL_CURSOR
,

91 
	mCARET_CURSOR
,

92 
	mDIM_CURSOR
,

93 
	mBLOCK_CURSOR
,

94 
	mHEAVY_CURSOR
,

95 
	mSIMPLE_CURSOR


104 
	gCURSOR_POS
,

105 
	gCHARACTER_POS


114 
	gDRAG_NONE
 = -2,

115 
	gDRAG_START_DND
 = -1,

116 
	gDRAG_CHAR
 = 0,

117 
	gDRAG_WORD
 = 1,

118 
	gDRAG_LINE
 = 2

125 
	gWRAP_NONE
,

126 
	gWRAP_AT_COLUMN
,

127 
	gWRAP_AT_PIXEL
,

128 
	gWRAP_AT_BOUNDS


131 
‰õnd
 
Ê_ãxt_døg_me
(
pos
, 
Fl_Text_Di•œy
* 
d
);

133 (*
	tUnföished_StyÀ_Cb
)(, *);

139 
	sStyÀ_TabÀ_E¡ry
 {

140 
Fl_Cﬁ‹
 
cﬁ‹
;

141 
Fl_F⁄t
 
f⁄t
;

142 
Fl_F⁄tsize
 
size
;

143 
©å
;

144 
	}
};

146 
Fl_Text_Di•œy
(
X
, 
Y
, 
W
, 
H
, c⁄° *
l
 = 0);

147 ~
Fl_Text_Di•œy
();

149 
vútuÆ
 
h™dÀ
(
e
);

151 
buf„r
(
Fl_Text_Buf„r
* 
buf
);

158 
	$buf„r
(
Fl_Text_Buf„r
& 
buf
Ë{ 
	`buf„r
(&buf); 
	}
}

165 
Fl_Text_Buf„r
* 
	$buf„r
(Ëc⁄° {  
mBuf„r
; 
	}
}

167 
ªdi•œy_ønge
(
°¨t
, 
íd
);

168 
s¸ﬁl
(
t›LöeNum
, 
h‹izOff£t
);

169 
ö£π
(c⁄° * 
ãxt
);

170 
ovî°rike
(c⁄° * 
ãxt
);

171 
ö£π_posôi⁄
(
√wPos
);

177 
	$ö£π_posôi⁄
(Ëc⁄° {  
mCurs‹Pos
; 
	}
}

178 
	$posôi⁄_to_xy
(
pos
, * 
x
, * 
y
) const;

180 
	$ö_£À˘i⁄
(
x
, 
y
) const;

181 
	`show_ö£π_posôi⁄
();

183 
	`move_right
();

184 
	`move_À·
();

185 
	`move_up
();

186 
	`move_down
();

187 
	$cou¡_löes
(
°¨t
, 
íd
, 
boﬁ
 
°¨t_pos_is_löe_°¨t
) const;

188 
	$löe_°¨t
(
pos
) const;

189 
	$löe_íd
(
°¨tPos
, 
boﬁ
 
°¨tPosIsLöeSèπ
) const;

190 
	`skù_löes
(
°¨tPos
, 
nLöes
, 
boﬁ
 
°¨tPosIsLöeSèπ
);

191 
	`ªwöd_löes
(
°¨tPos
, 
nLöes
);

192 
	`√xt_w‹d
();

193 
	`¥evious_w‹d
();

195 
	`show_curs‹
(
b
 = 1);

200 
	$hide_curs‹
(Ë{ 
	`show_curs‹
(0); 
	}
}

202 
curs‹_°yÀ
(
°yÀ
);

208 
Fl_Cﬁ‹
 
	$curs‹_cﬁ‹
(Ëc⁄° { 
mCurs‹_cﬁ‹
;
	}
}

214 
	$curs‹_cﬁ‹
(
Fl_Cﬁ‹
 
n
Ë{
mCurs‹_cﬁ‹
 =Ç;
	}
}

220 
	$s¸ﬁlb¨_width
(Ëc⁄° {  
s¸ﬁlb¨_width_
; 
	}
}

226 
	$s¸ﬁlb¨_width
(
W
Ë{ 
s¸ﬁlb¨_width_
 = W; 
	}
}

232 
Fl_Align
 
	$s¸ﬁlb¨_Æign
(Ëc⁄° {  
s¸ﬁlb¨_Æign_
; 
	}
}

238 
	$s¸ﬁlb¨_Æign
(
Fl_Align
 
a
Ë{ 
s¸ﬁlb¨_Æign_
 =á; 
	}
}

245 
	$w‹d_°¨t
(
pos
Ëc⁄° {  
	`buf„r
()->
	`w‹d_°¨t
’os); 
	}
}

252 
	$w‹d_íd
(
pos
Ëc⁄° {  
	`buf„r
()->
	`w‹d_íd
’os); 
	}
}

255 
highlight_d©a
(
Fl_Text_Buf„r
 *
°yÀBuf„r
,

256 c⁄° 
StyÀ_TabÀ_E¡ry
 *
°yÀTabÀ
,

257 
nStyÀs
, 
unföishedStyÀ
,

258 
Unföished_StyÀ_Cb
 
unföishedHighlightCB
,

259 *
cbArg
);

261 
	$posôi⁄_°yÀ
(
löeSèπPos
, 
löeLí
, 
löeIndex
) const;

268 
	$sh‹tcut
(Ëc⁄° { 
sh‹tcut_
;
	}
}

275 
	$sh‹tcut
(
s
Ë{
sh‹tcut_
 = s;
	}
}

281 
Fl_F⁄t
 
	$ãxtf⁄t
(Ëc⁄° { 
ãxtf⁄t_
;
	}
}

287 
	$ãxtf⁄t
(
Fl_F⁄t
 
s
Ë{
ãxtf⁄t_
 = s; 
mCﬁumnSˇÀ
 = 0;
	}
}

293 
Fl_F⁄tsize
 
	$ãxtsize
(Ëc⁄° { 
ãxtsize_
;
	}
}

299 
	$ãxtsize
(
Fl_F⁄tsize
 
s
Ë{
ãxtsize_
 = s; 
mCﬁumnSˇÀ
 = 0;
	}
}

305 
Fl_Cﬁ‹
 
	$ãxtcﬁ‹
(Ëc⁄° { 
ãxtcﬁ‹_
;
	}
}

311 
	$ãxtcﬁ‹
(
Fl_Cﬁ‹
 
n
Ë{
ãxtcﬁ‹_
 =Ç;
	}
}

313 
	$wøµed_cﬁumn
(
row
, 
cﬁumn
) const;

314 
	$wøµed_row
(
row
) const;

315 
	`wøp_mode
(
wøp
, 
wøp_m¨gö
);

317 
vútuÆ
 
	`ªsize
(
X
, 
Y
, 
W
, 
H
);

324 
	$x_to_cﬁ
(
x
) const;

332 
	$cﬁ_to_x
(
cﬁ
) const;

334 
	`löíumbî_width
(
width
);

335 
	$löíumbî_width
() const;

336 
	`löíumbî_f⁄t
(
Fl_F⁄t
 
vÆ
);

337 
Fl_F⁄t
 
	$löíumbî_f⁄t
() const;

338 
	`löíumbî_size
(
Fl_F⁄tsize
 
vÆ
);

339 
Fl_F⁄tsize
 
	$löíumbî_size
() const;

340 
	`löíumbî_fgcﬁ‹
(
Fl_Cﬁ‹
 
vÆ
);

341 
Fl_Cﬁ‹
 
	$löíumbî_fgcﬁ‹
() const;

342 
	`löíumbî_bgcﬁ‹
(
Fl_Cﬁ‹
 
vÆ
);

343 
Fl_Cﬁ‹
 
	$löíumbî_bgcﬁ‹
() const;

344 
	`löíumbî_Æign
(
Fl_Align
 
vÆ
);

345 
Fl_Align
 
	$löíumbî_Æign
() const;

346 
	`löíumbî_f‹m©
(c⁄° * 
vÆ
);

347 c⁄° * 
	$löíumbî_f‹m©
() const;

349 
¥Ÿe˘ed
:

355 
vútuÆ
 
	`døw
();

356 
	`døw_ãxt
(
X
, 
Y
, 
W
, 
H
);

357 
	`døw_ønge
(
°¨t
, 
íd
);

358 
	`døw_curs‹
(, );

360 
	$døw_°rög
(
°yÀ
, 
x
, 
y
, 
toX
, c⁄° *
°rög
,

361 
nCh¨s
) const;

363 
	`døw_vlöe
(
visLöeNum
, 
À·Clù
, 
rightClù
,

364 
À·Ch¨Index
, 
rightCh¨Index
);

366 
	$föd_x
(c⁄° *
s
, 
Àn
, 
°yÀ
, 
x
) const;

369 
DRAW_LINE
,

370 
FIND_INDEX
,

371 
FIND_INDEX_FROM_ZERO
,

372 
GET_WIDTH


373 
	}
};

375 
	$h™dÀ_vlöe
(
mode
,

376 
löeSèπ
, 
löeLí
, 
À·Ch¨
, 
rightCh¨
,

377 
t›Clù
, 
bŸtomClù
,

378 
À·Clù
, 
rightClù
) const;

380 
	`døw_löe_numbîs
(
boﬁ
 
˛órAŒ
);

382 
	$˛ór_ª˘
(
°yÀ
, 
x
, 
y
, 
width
, 
height
) const;

383 
	`di•œy_ö£π
();

385 
	`off£t_löe_°¨ts
(
√wT›LöeNum
);

387 
	`ˇlc_löe_°¨ts
(
°¨tLöe
, 
ídLöe
);

389 
	`upd©e_löe_°¨ts
(
pos
, 
ch¨sIn£πed
, 
ch¨sDñëed
,

390 
löesIn£πed
, 
löesDñëed
, *
s¸ﬁÀd
);

392 
	`ˇlc_œ°_ch¨
();

394 
	$posôi⁄_to_löe
–
pos
, * 
löeNum
 ) const;

395 
	$°rög_width
(c⁄° * 
°rög
, 
Àngth
, 
°yÀ
) const;

397 
	`s¸ﬁl_timî_cb
(*);

399 
	`buf„r_¥edñëe_cb
(
pos
, 
nDñëed
, * 
cbArg
);

400 
	`buf„r_modifõd_cb
(
pos
, 
nIn£πed
, 
nDñëed
,

401 
nRe°yÀd
, c⁄° * 
dñëedText
,

402 * 
cbArg
);

404 
	`h_s¸ﬁlb¨_cb
(
Fl_S¸ﬁlb¨
* 
w
, 
Fl_Text_Di•œy
* 
d
);

405 
	`v_s¸ﬁlb¨_cb
–
Fl_S¸ﬁlb¨
* 
w
, 
Fl_Text_Di•œy
* 
d
);

406 
	`upd©e_v_s¸ﬁlb¨
();

407 
	`upd©e_h_s¸ﬁlb¨
();

408 
	$mósuª_vlöe
(
visLöeNum
) const;

409 
	$l⁄ge°_vlöe
() const;

410 
	$em±y_vlöes
() const;

411 
	$vlöe_Àngth
(
visLöeNum
) const;

412 
	$xy_to_posôi⁄
(
x
, 
y
, 
PosTy≥
 = 
CHARACTER_POS
) const;

414 
	$xy_to_rowcﬁ
(
x
, 
y
, * 
row
, * 
cﬁumn
,

415 
PosTy≥
 = 
CHARACTER_POS
) const;

416 
	`maöèö_absﬁuã_t›_löe_numbî
(
°©e
);

417 
	$gë_absﬁuã_t›_löe_numbî
() const;

418 
	`absﬁuã_t›_löe_numbî
(
ﬁdFú°Ch¨
);

419 
	$maöèöög_absﬁuã_t›_löe_numbî
() const;

420 
	`ª£t_absﬁuã_t›_löe_numbî
();

421 
	$posôi⁄_to_löecﬁ
(
pos
, * 
löeNum
, * 
cﬁumn
) const;

422 
	`s¸ﬁl_
(
t›LöeNum
, 
h‹izOff£t
);

424 
	`exãnd_ønge_f‹_°yÀs
(* 
°¨t
, * 
íd
);

426 
	`föd_wøp_ønge
(c⁄° *
dñëedText
, 
pos
, 
nIn£πed
,

427 
nDñëed
, *
modR™geSèπ
, *
modR™geEnd
,

428 *
löesIn£πed
, *
löesDñëed
);

429 
	`mósuª_dñëed_löes
(
pos
, 
nDñëed
);

430 
	$wøµed_löe_cou¡î
(
Fl_Text_Buf„r
 *
buf
, 
°¨tPos
, 
maxPos
,

431 
maxLöes
, 
boﬁ
 
°¨tPosIsLöeSèπ
,

432 
°yÀBufOff£t
, *
ªtPos
, *
ªtLöes
,

433 *
ªtLöeSèπ
, *
ªtLöeEnd
,

434 
boﬁ
 
cou¡La°LöeMissögNewLöe
 = 
åue
) const;

435 
	$föd_löe_íd
(
pos
, 
boﬁ
 
°¨t_pos_is_löe_°¨t
, *
löeEnd
,

436 *
√xtLöeSèπ
) const;

437 
	$mósuª_¥›‹ti⁄Æ_ch¨a˘î
(c⁄° *
s
, 
cﬁNum
, 
pos
) const;

438 
	$wøp_u£s_ch¨a˘î
(
löeEndPos
) const;

440 
damage_ønge1_°¨t
, 
damage_ønge1_íd
;

441 
damage_ønge2_°¨t
, 
damage_ønge2_íd
;

442 
mCurs‹Pos
;

443 
mCurs‹On
;

444 
mCurs‹OldY
;

445 
mCurs‹ToHöt
;

448 
mCurs‹StyÀ
;

449 
mCurs‹Pª„ºedXPos
;

450 
mNVisibÀLöes
;

451 
mNBuf„rLöes
;

452 
Fl_Text_Buf„r
* 
mBuf„r
;

453 
Fl_Text_Buf„r
* 
mStyÀBuf„r
;

455 
mFú°Ch¨
, 
mLa°Ch¨
;

459 
mC⁄töuousWøp
;

460 
mWøpM¨göPix
;

462 * 
mLöeSèπs
;

463 
mT›LöeNum
;

465 
mAbsT›LöeNum
;

469 
mNìdAbsT›LöeNum
;

472 
mH‹izOff£t
;

473 
mT›LöeNumHöt
;

475 
mH‹izOff£tHöt
;

476 
mNStyÀs
;

477 c⁄° 
StyÀ_TabÀ_E¡ry
 *
mStyÀTabÀ
;

479 
mUnföishedStyÀ
;

481 
Unföished_StyÀ_Cb
 
mUnföishedHighlightCB
;

483 * 
mHighlightCBArg
;

485 
mMaxsize
;

487 
mSuµªssResync
;

489 
mNLöesDñëed
;

492 
mModifyögTabDi°™˚
;

495 
muèbÀ
 
mCﬁumnSˇÀ
;

500 
Fl_Cﬁ‹
 
mCurs‹_cﬁ‹
;

502 
Fl_S¸ﬁlb¨
* 
mHS¸ﬁlB¨
;

503 
Fl_S¸ﬁlb¨
* 
mVS¸ﬁlB¨
;

504 
s¸ﬁlb¨_width_
;

505 
Fl_Align
 
s¸ﬁlb¨_Æign_
;

506 
døgPos
, 
døgTy≥
, 
døggög
;

507 
di•œy_ö£π_posôi⁄_höt
;

508 °ru˘ { 
x
, 
y
, 
w
, 
h
; 
	}
} 
	gãxt_¨ó
;

510 
	gsh‹tcut_
;

512 
Fl_F⁄t
 
	gãxtf⁄t_
;

513 
Fl_F⁄tsize
 
	gãxtsize_
;

514 
Fl_Cﬁ‹
 
	gãxtcﬁ‹_
;

517 
	gmLöeNumLe·
, 
	gmLöeNumWidth
;

520 #i‡
FLTK_ABI_VERSION
 >= 10303

521 
Fl_F⁄t
 
	glöíumbî_f⁄t_
;

522 
Fl_F⁄tsize
 
	glöíumbî_size_
;

523 
Fl_Cﬁ‹
 
	glöíumbî_fgcﬁ‹_
;

524 
Fl_Cﬁ‹
 
	glöíumbî_bgcﬁ‹_
;

525 
Fl_Align
 
	glöíumbî_Æign_
;

526 c⁄° * 
	glöíumbî_f‹m©_
;

	@/home/lixing/include/FL/Fl_Tile.H

19 #i‚de‡
Fl_Tûe_H


20 
	#Fl_Tûe_H


	)

22 
	~"Fl_Group.H
"

29 ˛as†
	cFL_EXPORT
 
	mFl_Tûe
 : 
public
 
Fl_Group
 {

30 
public
:

31 
h™dÀ
();

32 
Fl_Tûe
(
X
,
Y
,
W
,
H
,c⁄° *
l
=0);

33 
ªsize
(, , , );

34 
posôi⁄
(, , , );

	@/home/lixing/include/FL/Fl_Tiled_Image.H

22 #i‚de‡
Fl_Tûed_Image_H


23 
	#Fl_Tûed_Image_H


	)

25 
	~"Fl_Image.H
"

36 ˛as†
	cFL_EXPORT
 
	mFl_Tûed_Image
 : 
public
 
Fl_Image
 {

37 
¥Ÿe˘ed
:

39 
Fl_Image
 *
image_
;

40 
	mÆloc_image_
;

42 
	mpublic
:

44 
Fl_Tûed_Image
(
Fl_Image
 *
i
, 
W
 = 0, 
H
 = 0);

45 
	mvútuÆ
 ~
Fl_Tûed_Image
();

47 
vútuÆ
 
Fl_Image
 *
c›y
(
W
, 
H
);

48 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); }

49 
vútuÆ
 
	`cﬁ‹_avîage
(
Fl_Cﬁ‹
 
c
, 
i
);

50 
vútuÆ
 
	`deßtuøã
();

51 
vútuÆ
 
	`døw
(
X
, 
Y
, 
W
, 
H
, 
cx
, 
cy
);

52 
	$døw
(
X
, 
Y
Ë{ 
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0); 
	}
}

54 
Fl_Image
 *
	$image
(Ë{  
image_
; 
	}
}

	@/home/lixing/include/FL/Fl_Toggle_Button.H

22 #i‚de‡
Fl_ToggÀ_Buâ⁄_H


23 
	#Fl_ToggÀ_Buâ⁄_H


	)

25 
	~"Fl_Buâ⁄.H
"

36 ˛as†
	cFL_EXPORT
 
	mFl_ToggÀ_Buâ⁄
 : 
public
 
Fl_Buâ⁄
 {

37 
public
:

43 
Fl_ToggÀ_Buâ⁄
(
X
,
Y
,
W
,
H
,c⁄° *
l
=0);

	@/home/lixing/include/FL/Fl_Window.H

22 #i‚de‡
Fl_Wödow_H


23 
	#Fl_Wödow_H


	)

25 #ifde‡
WIN32


26 
	~<wödows.h
>

29 
	~"Fl_Group.H
"

30 
	~"Fl_Bôm≠.H
"

31 
	~<°dlib.h
>

33 
	#FL_WINDOW
 0xF0

34 
	#FL_DOUBLE_WINDOW
 0xF1

35 

	)

36 
˛ass
 
	gFl_X
;

37 
˛ass
 
	gFl_RGB_Image
;

57 ˛as†
	cFL_EXPORT
 
	mFl_Wödow
 : 
public
 
Fl_Group
 {

59 *
deÁu…_x˛ass_
;

63 #i‡
FLTK_ABI_VERSION
 < 10301

66 
	mno_fuŒs¸ìn_x
;

67 #i‡
FLTK_ABI_VERSION
 < 10301

70 
	mno_fuŒs¸ìn_y
;

71 #i‡
FLTK_ABI_VERSION
 < 10301

74 
	mno_fuŒs¸ìn_w
;

75 #i‡
FLTK_ABI_VERSION
 < 10301

78 
	mno_fuŒs¸ìn_h
;

79 #i‡
FLTK_ABI_VERSION
 < 10303

82 
	mfuŒs¸ìn_s¸ìn_t›
;

83 #i‡
FLTK_ABI_VERSION
 < 10303

86 
	mfuŒs¸ìn_s¸ìn_bŸtom
;

87 #i‡
FLTK_ABI_VERSION
 < 10303

90 
	mfuŒs¸ìn_s¸ìn_À·
;

91 #i‡
FLTK_ABI_VERSION
 < 10303

94 
	mfuŒs¸ìn_s¸ìn_right
;

96 
‰õnd
 
˛ass
 
	mFl_X
;

97 
Fl_X
 *
	mi
;

99 
	sic⁄_d©a
 {

100 c⁄° *
	mÀgacy_ic⁄
;

101 
Fl_RGB_Image
 **
	mic⁄s
;

102 
	mcou¡
;

103 #ifde‡
WIN32


104 
HICON
 
	mbig_ic⁄
;

105 
HICON
 
	msmÆl_ic⁄
;

109 c⁄° * 
	gic⁄œbñ_
;

110 * 
	gx˛ass_
;

111 
ic⁄_d©a
 *
	gic⁄_
;

113 
	gmöw
, 
	gmöh
, 
	gmaxw
, 
	gmaxh
;

114 
	gdw
, 
	gdh
, 
	ga•e˘
;

115 
uch¨
 
	gsize_ønge_£t
;

117 
Fl_Curs‹
 
	gcurs‹_deÁu…
;

118 #i‡
FLTK_ABI_VERSION
 < 10303

120 
Fl_Cﬁ‹
 
	gcurs‹_fg
, 
	gcurs‹_bg
;

123 
	g¥Ÿe˘ed
:

125 
	ssh≠e_d©a_ty≥
 {

126 
lw_
;

127 
	glh_
;

128 
Fl_Image
* 
	gsh≠e_
;

129 #i‡
deföed
(
__APPLE__
)

130 
CGImage
* 
	tCGImageRef
;

131 
CGImageRef
 
	gmask
;

133 
Fl_Bôm≠
 *
	gtodñëe_
;

136 #i‡
FLTK_ABI_VERSION
 < 10303 && !
	$deföed
(
FL_DOXYGEN
)

139 
sh≠e_d©a_ty≥
 *
sh≠e_d©a_
;

140 
¥iv©e
:

141 
	`sh≠e_bôm≠_
(
Fl_Bôm≠
* 
b
);

142 
	`sh≠e_Æpha_
(
Fl_RGB_Image
* 
img
, 
off£t
);

143 
	`sh≠e_pixm≠_
(
Fl_Pixm≠
* 
pixm≠
);

144 
public
:

145 
	`sh≠e
(c⁄° 
Fl_Image
* 
img
);

149 
ölöe
 
	$sh≠e
(c⁄° 
Fl_Image
& 
b
Ë{ 
	`sh≠e
(&b); 
	}
}

150 #i‡! (
deföed
(
WIN32
Ë|| deföed(
__APPLE__
Ë|| 
	$deföed
(
FL_DOXYGEN
))

151 
	`comböe_mask
();

153 
¥iv©e
:

156 
	`size_ønge_
();

157 
	`_Fl_Wödow
();

158 
	`fuŒs¸ìn_x
();

159 
	`fuŒs¸ìn_off_x
(
X
, 
Y
, 
W
, 
H
);

162 
	`Fl_Wödow
(c⁄° 
Fl_Wödow
&);

163 
Fl_Wödow
& 
›î©‹
=(const Fl_Window&);

165 
¥Ÿe˘ed
:

168 
Fl_Wödow
 *
cuºít_
;

169 
vútuÆ
 
	`døw
();

171 
vútuÆ
 
	`Êush
();

181 
	$f‹˚_posôi⁄
(
f‹˚
) {

182 i‡(
f‹˚
Ë
	`£t_Êag
(
FORCE_POSITION
);

183 
	`˛ór_Êag
(
FORCE_POSITION
);

184 
	}
}

193 
	$f‹˚_posôi⁄
(Ëc⁄° {  ((
	`Êags
(Ë& 
FORCE_POSITION
)?1:0); 
	}
}

195 
‰ì_ic⁄s
();

197 
	gpublic
:

227 
Fl_Wödow
(
w
, 
h
, c⁄° * 
tôÀ
= 0);

232 
Fl_Wödow
(
x
, 
y
, 
w
, 
h
, c⁄° * 
tôÀ
 = 0);

241 
	gvútuÆ
 ~
Fl_Wödow
();

243 
vútuÆ
 
h™dÀ
();

261 
vútuÆ
 
ªsize
(
X
,
Y
,
W
,
H
);

269 
b‹dî
(
b
);

274 
	$˛ór_b‹dî
(Ë{
	`£t_Êag
(
NOBORDER
);
	}
}

276 
	$b‹dî
(Ëc⁄° { !(
	`Êags
(Ë& 
NOBORDER
);
	}
}

278 
	$£t_ovîride
(Ë{
	`£t_Êag
(
NOBORDER
|
OVERRIDE
);
	}
}

280 
	$ovîride
(Ëc⁄° {  
	`Êags
()&
OVERRIDE
; 
	}
}

289 
	$£t_modÆ
(Ë{
	`£t_Êag
(
MODAL
);
	}
}

291 
	$modÆ
(Ëc⁄° { 
	`Êags
(Ë& 
MODAL
;
	}
}

298 
	$£t_n⁄_modÆ
(Ë{
	`£t_Êag
(
NON_MODAL
);
	}
}

300 
	$n⁄_modÆ
(Ëc⁄° { 
	`Êags
(Ë& (
NON_MODAL
|
MODAL
);
	}
}

339 
	$˛ór_modÆ_°©es
(Ë{
	`˛ór_Êag
(
NON_MODAL
 | 
MODAL
);
	}
}

354 
	$£t_míu_wödow
(Ë{
	`£t_Êag
(
MENU_WINDOW
);
	}
}

357 
	$míu_wödow
(Ëc⁄° { 
	`Êags
(Ë& 
MENU_WINDOW
;
	}
}

375 
	$£t_toﬁtù_wödow
(Ë{ 
	`£t_Êag
(
TOOLTIP_WINDOW
);

376 
	`˛ór_Êag
(
MENU_WINDOW
); 
	}
}

378 
	$toﬁtù_wödow
(Ëc⁄° { 
	`Êags
(Ë& 
TOOLTIP_WINDOW
;
	}
}

387 
hŸ•Ÿ
(
x
, 
y
, 
offs¸ìn
 = 0);

389 
hŸ•Ÿ
(c⁄° 
Fl_Widgë
*, 
offs¸ìn
 = 0);

391 
	$hŸ•Ÿ
(c⁄° 
Fl_Widgë
& 
p
, 
offs¸ìn
 = 0Ë{
	`hŸ•Ÿ
(&p,offs¸ìn);
	}
}

401 
	$‰ì_posôi⁄
(Ë{
	`˛ór_Êag
(
FORCE_POSITION
);
	}
}

438 
	$size_ønge
(
möw
, 
möh
, 
maxw
=0, 
maxh
=0, 
dw
=0, 
dh
=0, 
a•e˘
=0) {

439 
this
->
möw
 = minw;

440 
this
->
möh
 = minh;

441 
this
->
maxw
 = maxw;

442 
this
->
maxh
 = maxh;

443 
this
->
dw
 = dw;

444 
this
->
dh
 = dh;

445 
this
->
a•e˘
 =áspect;

446 
	`size_ønge_
();

447 
	}
}

450 c⁄° * 
	$œbñ
(Ëc⁄° { 
Fl_Widgë
::
	`œbñ
();
	}
}

452 c⁄° * 
	$ic⁄œbñ
(Ëc⁄° { 
ic⁄œbñ_
;
	}
}

454 
œbñ
(const *);

456 
ic⁄œbñ
(const *);

458 
œbñ
(c⁄° *Üabñ, c⁄° * 
ic⁄œbñ
);

459 
c›y_œbñ
(c⁄° * 
a
);

461 
deÁu…_x˛ass
(const *);

462 c⁄° *
deÁu…_x˛ass
();

463 c⁄° * 
	$x˛ass
() const;

464 
	`x˛ass
(c⁄° * 
c
);

466 
	`deÁu…_ic⁄
(c⁄° 
Fl_RGB_Image
*);

467 
	`deÁu…_ic⁄s
(c⁄° 
Fl_RGB_Image
*[], );

468 
	`ic⁄
(c⁄° 
Fl_RGB_Image
*);

469 
	`ic⁄s
(c⁄° 
Fl_RGB_Image
*[], );

471 #ifde‡
WIN32


472 
	`deÁu…_ic⁄s
(
HICON
 
big_ic⁄
, HICON 
smÆl_ic⁄
);

473 
	`ic⁄s
(
HICON
 
big_ic⁄
, HICON 
smÆl_ic⁄
);

477 c⁄° * 
	$ic⁄
() const;

478 
	`ic⁄
(c⁄° * 
ic
);

485 
	$shown
(Ë{ 
i
 !0;
	}
}

501 
vútuÆ
 
show
();

506 
vútuÆ
 
hide
();

527 
show
(
¨gc
, **
¨gv
);

530 
waô_f‹_expo£
();

543 
fuŒs¸ìn
();

547 
fuŒs¸ìn_off
();

552 
fuŒs¸ìn_off
(
X
,
Y
,
W
,
H
);

556 
	$fuŒs¸ìn_a˘ive
(Ëc⁄° {  
	`Êags
(Ë& 
FULLSCREEN
; 
	}
}

567 
fuŒs¸ìn_s¸ìns
(
t›
, 
bŸtom
, 
À·
, 
right
);

583 
ic⁄ize
();

585 
	$x_roŸ
() const ;

586 
	$y_roŸ
() const ;

588 
Fl_Wödow
 *
	`cuºít
();

598 
	`make_cuºít
();

601 
vútuÆ
 
Fl_Wödow
* 
	$as_wödow
(Ë{  
this
; 
	}
}

613 
curs‹
(
Fl_Curs‹
);

614 
curs‹
(c⁄° 
Fl_RGB_Image
*, , );

615 
deÁu…_curs‹
(
Fl_Curs‹
);

618 
curs‹
(
Fl_Curs‹
 
c
, 
Fl_Cﬁ‹
, Fl_Cﬁ‹=
FL_WHITE
);

619 
deÁu…_curs‹
(
Fl_Curs‹
 
c
, 
Fl_Cﬁ‹
, Fl_Cﬁ‹=
FL_WHITE
);

621 
deÁu…_ˇŒback
(
Fl_Wödow
*, * 
v
);

627 
dec‹©ed_w
();

633 
dec‹©ed_h
();

	@/home/lixing/include/FL/fl_ask.H

23 #i‚de‡
Ê_ask_H


24 
	#Ê_ask_H


	)

26 
	~"Enumî©i⁄s.H
"

28 
˛ass
 
	gFl_Widgë
;

32 
	eFl_Bìp
 {

33 
	mFL_BEEP_DEFAULT
 = 0,

34 
	mFL_BEEP_MESSAGE
,

35 
	mFL_BEEP_ERROR
,

36 
	mFL_BEEP_QUESTION
,

37 
	mFL_BEEP_PASSWORD
,

38 
	mFL_BEEP_NOTIFICATION


41 #ifde‡
__GNUC__


42 
	#__Ê_©å
(
x
Ë
	`__©åibuã__
 (x)

	)

44 
	#__Ê_©å
(
x
)

	)

47 
FL_EXPORT
 
Ê_bìp
(
ty≥
 = 
FL_BEEP_DEFAULT
);

48 
FL_EXPORT
 
	$Ê_mesßge
(c⁄° *,...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

49 
FL_EXPORT
 
	$Ê_Æît
(c⁄° *,...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

53 
FL_EXPORT
 
	$Ê_ask
(c⁄° *,...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2), 
__dïªˇãd__
));

54 
FL_EXPORT
 
	$Ê_choi˚
(c⁄° *
q
,c⁄° *
b0
,c⁄° *
b1
,c⁄° *
b2
,...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 5)));

55 
FL_EXPORT
 c⁄° *
	$Ê_öput
(c⁄° *
œbñ
, c⁄° *
deÊt
 = 0, ...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 3)));

56 
FL_EXPORT
 c⁄° *
	$Ê_∑ssw‹d
(c⁄° *
œbñ
, c⁄° *
deÊt
 = 0, ...Ë
	`__Ê_©å
((
	`__f‹m©__
 (
__¥ötf__
, 1, 3)));

58 
FL_EXPORT
 
Fl_Widgë
 *
	`Ê_mesßge_ic⁄
();

59 
FL_EXPORT
 
Fl_F⁄t
 
Ê_mesßge_f⁄t_
;

60 
FL_EXPORT
 
Fl_F⁄tsize
 
Ê_mesßge_size_
;

61 
ölöe
 
	$Ê_mesßge_f⁄t
(
Fl_F⁄t
 
f
, 
Fl_F⁄tsize
 
s
) {

62 
Ê_mesßge_f⁄t_
 = 
f
; 
Ê_mesßge_size_
 = 
s
;
	}
}

64 
FL_EXPORT
 
Ê_mesßge_hŸ•Ÿ
(
íabÀ
);

65 
FL_EXPORT
 
Ê_mesßge_hŸ•Ÿ
();

67 
FL_EXPORT
 
Ê_mesßge_tôÀ
(c⁄° *
tôÀ
);

68 
FL_EXPORT
 
Ê_mesßge_tôÀ_deÁu…
(c⁄° *
tôÀ
);

71 
FL_EXPORT
 c⁄° * 
Ê_no
;

72 
FL_EXPORT
 c⁄° * 
Ê_yes
;

73 
FL_EXPORT
 c⁄° * 
Ê_ok
;

74 
FL_EXPORT
 c⁄° * 
Ê_ˇn˚l
;

75 
FL_EXPORT
 c⁄° * 
Ê_˛o£
;

	@/home/lixing/include/FL/fl_draw.H

24 #i‚de‡
Ê_døw_H


25 
	#Ê_døw_H


	)

27 
	~<FL/x.H
>

28 
	~<FL/Enumî©i⁄s.H
>

29 
	~<FL/Fl_Wödow.H
>

30 
	~<FL/Fl_Devi˚.H
>

33 
˛ass
 
	gFl_Image
;

36 
FL_EXPORT
 
Ê_døw_sh‹tcut
;

52 
ölöe
 
	$Ê_cﬁ‹
(
Fl_Cﬁ‹
 
c
Ë{
Ê_gøphics_drivî
->
	`cﬁ‹
(c); 
	}
}

54 
ölöe
 
	$Ê_cﬁ‹
(
c
Ë{
	`Ê_cﬁ‹
((
Fl_Cﬁ‹
)c);
	}
}

65 
ölöe
 
	$Ê_cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
Ë{
Ê_gøphics_drivî
->
	`cﬁ‹
‘,g,b); 
	}
}

70 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_cﬁ‹
(Ë{ 
Ê_gøphics_drivî
->
	`cﬁ‹
();
	}
}

82 
ölöe
 
	$Ê_push_˛ù
(
x
, 
y
, 
w
, 
h
Ë{
Ê_gøphics_drivî
->
	`push_˛ù
(x,y,w,h); 
	}
}

91 
	#Ê_˛ù
 
Ê_push_˛ù


	)

95 
ölöe
 
	$Ê_push_no_˛ù
(Ë{
Ê_gøphics_drivî
->
	`push_no_˛ù
(); 
	}
}

103 
ölöe
 
	$Ê_p›_˛ù
(Ë{
Ê_gøphics_drivî
->
	`p›_˛ù
(); 
	}
}

114 
ölöe
 
	$Ê_nŸ_˛ù≥d
(
x
, 
y
, 
w
, 
h
Ë{ 
Ê_gøphics_drivî
->
	`nŸ_˛ù≥d
(x,y,w,h); 
	}
}

126 
ölöe
 
	$Ê_˛ù_box
(
x
 , 
y
, 
w
, 
h
, & 
X
, & 
Y
, & 
W
, & 
H
)

127 { 
Ê_gøphics_drivî
->
	`˛ù_box
(
x
,
y
,
w
,
h
,
X
,
Y
,
W
,
H
); 
	}
}

129 
ölöe
 
	$Ê_ª°‹e_˛ù
(Ë{ 
Ê_gøphics_drivî
->
	`ª°‹e_˛ù
(); 
	}
}

136 
ölöe
 
	$Ê_˛ù_ªgi⁄
(
Fl_Regi⁄
 
r
Ë{ 
Ê_gøphics_drivî
->
	`˛ù_ªgi⁄
‘); 
	}
}

140 
ölöe
 
Fl_Regi⁄
 
	$Ê_˛ù_ªgi⁄
(Ë{  
Ê_gøphics_drivî
->
	`˛ù_ªgi⁄
(); 
	}
}

147 
ölöe
 
	$Ê_poöt
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`poöt
(x,y); 
	}
}

177 
ölöe
 
	$Ê_löe_°yÀ
(
°yÀ
, 
width
=0, * 
dashes
=0Ë{
Ê_gøphics_drivî
->
	`löe_°yÀ
(°yÀ,width,dashes); 
	}
}

179 
	mFL_SOLID
 = 0,

180 
	mFL_DASH
 = 1,

181 
	mFL_DOT
 = 2,

182 
	mFL_DASHDOT
 = 3,

183 
	mFL_DASHDOTDOT
 = 4,

185 
	mFL_CAP_FLAT
 = 0x100,

186 
	mFL_CAP_ROUND
 = 0x200,

187 
	mFL_CAP_SQUARE
 = 0x300,

189 
	mFL_JOIN_MITER
 = 0x1000,

190 
	mFL_JOIN_ROUND
 = 0x2000,

191 
	mFL_JOIN_BEVEL
 = 0x3000

201 
ölöe
 
	$Ê_ª˘
(
x
, 
y
, 
w
, 
h
Ë{ 
Ê_gøphics_drivî
->
	`ª˘
(x,y,w,h); 
	}
}

204 
ölöe
 
	$Ê_ª˘
(
x
, 
y
, 
w
, 
h
, 
Fl_Cﬁ‹
 
c
Ë{
	`Ê_cﬁ‹
(c); 
	`Ê_ª˘
(x,y,w,h);
	}
}

206 
ölöe
 
	$Ê_ª˘f
(
x
, 
y
, 
w
, 
h
Ë{ 
Ê_gøphics_drivî
->
	`ª˘f
(x,y,w,h); 
	}
}

208 
ölöe
 
	$Ê_ª˘f
(
x
, 
y
, 
w
, 
h
, 
Fl_Cﬁ‹
 
c
Ë{
	`Ê_cﬁ‹
(c); 
	`Ê_ª˘f
(x,y,w,h);
	}
}

217 
FL_EXPORT
 
Ê_ª˘f
(
x
, 
y
, 
w
, 
h
, 
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

223 
ölöe
 
	$Ê_löe
(
x
, 
y
, 
x1
, 
y1
Ë{
Ê_gøphics_drivî
->
	`löe
(x,y,x1,y1); 
	}
}

227 
ölöe
 
	$Ê_löe
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
Ë{
Ê_gøphics_drivî
->
	`löe
(x,y,x1,y1,x2,y2); 
	}
}

233 
ölöe
 
	$Ê_lo›
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
Ë{
Ê_gøphics_drivî
->
	`lo›
(x,y,x1,y1,x2,y2); 
	}
}

237 
ölöe
 
	$Ê_lo›
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
)

238 {
Ê_gøphics_drivî
->
	`lo›
(
x
,
y
,
x1
,
y1
,
x2
,
y2
,
x3
,
y3
); 
	}
}

244 
ölöe
 
	$Ê_pﬁyg⁄
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
Ë{
Ê_gøphics_drivî
->
	`pﬁyg⁄
(x,y,x1,y1,x2,y2); 
	}
}

248 
ölöe
 
	$Ê_pﬁyg⁄
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
)

249 { 
Ê_gøphics_drivî
->
	`pﬁyg⁄
(
x
,
y
,
x1
,
y1
,
x2
,
y2
,
x3
,
y3
); 
	}
}

255 
ölöe
 
	$Ê_xylöe
(
x
, 
y
, 
x1
Ë{
Ê_gøphics_drivî
->
	`xylöe
(x,y,x1);
	}
}

259 
ölöe
 
	$Ê_xylöe
(
x
, 
y
, 
x1
, 
y2
Ë{
Ê_gøphics_drivî
->
	`xylöe
(x,y,x1,y2);
	}
}

264 
ölöe
 
	$Ê_xylöe
(
x
, 
y
, 
x1
, 
y2
, 
x3
Ë{
Ê_gøphics_drivî
->
	`xylöe
(x,y,x1,y2,x3);
	}
}

270 
ölöe
 
	$Ê_yxlöe
(
x
, 
y
, 
y1
Ë{
Ê_gøphics_drivî
->
	`yxlöe
(x,y,y1);
	}
}

274 
ölöe
 
	$Ê_yxlöe
(
x
, 
y
, 
y1
, 
x2
Ë{
Ê_gøphics_drivî
->
	`yxlöe
(x,y,y1,x2);
	}
}

279 
ölöe
 
	$Ê_yxlöe
(
x
, 
y
, 
y1
, 
x2
, 
y3
Ë{
Ê_gøphics_drivî
->
	`yxlöe
(x,y,y1,x2,y3);
	}
}

304 
ölöe
 
	$Ê_¨c
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
Ë{
Ê_gøphics_drivî
->
	`¨c
(x,y,w,h,a1,a2); 
	}
}

317 
ölöe
 
	$Ê_põ
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
Ë{
Ê_gøphics_drivî
->
	`põ
(x,y,w,h,a1,a2); 
	}
}

319 
FL_EXPORT
 
Ê_ch‹d
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

326 
ölöe
 
	$Ê_push_m©rix
(Ë{ 
Ê_gøphics_drivî
->
	`push_m©rix
(); 
	}
}

330 
ölöe
 
	$Ê_p›_m©rix
(Ë{ 
Ê_gøphics_drivî
->
	`p›_m©rix
(); 
	}
}

335 
ölöe
 
	$Ê_sˇÀ
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`sˇÀ
(x, y); 
	}
}

340 
ölöe
 
	$Ê_sˇÀ
(
x
Ë{ 
Ê_gøphics_drivî
->
	`sˇÀ
(x, x); 
	}
}

345 
ölöe
 
	$Ê_å™¶©e
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`å™¶©e
(x, y); 
	}
}

350 
ölöe
 
	$Ê_rŸ©e
(
d
Ë{ 
Ê_gøphics_drivî
->
	`rŸ©e
(d); 
	}
}

357 
ölöe
 
	$Ê_mu…_m©rix
(
a
, 
b
, 
c
, 
d
, 
x
,
y
)

358 { 
Ê_gøphics_drivî
->
	`mu…_m©rix
(
a
, 
b
, 
c
, 
d
, 
x
, 
y
); 
	}
}

362 
ölöe
 
	$Ê_begö_poöts
(Ë{
Ê_gøphics_drivî
->
	`begö_poöts
(); 
	}
}

366 
ölöe
 
	$Ê_begö_löe
(Ë{
Ê_gøphics_drivî
->
	`begö_löe
(); 
	}
}

370 
ölöe
 
	$Ê_begö_lo›
(Ë{
Ê_gøphics_drivî
->
	`begö_lo›
(); 
	}
}

374 
ölöe
 
	$Ê_begö_pﬁyg⁄
(Ë{
Ê_gøphics_drivî
->
	`begö_pﬁyg⁄
(); 
	}
}

379 
ölöe
 
	$Ê_vîãx
(
x
, 
y
Ë{
Ê_gøphics_drivî
->
	`vîãx
(x,y); 
	}
}

388 
ölöe
 
	$Ê_curve
(
X0
, 
Y0
, 
X1
, 
Y1
, 
X2
, 
Y2
, 
X3
, 
Y3
)

389 {
Ê_gøphics_drivî
->
	`curve
(
X0
,
Y0
,
X1
,
Y1
,
X2
,
Y2
,
X3
,
Y3
); 
	}
}

416 
ölöe
 
	$Ê_¨c
(
x
, 
y
, 
r
, 
°¨t
, 
íd
Ë{
Ê_gøphics_drivî
->
	`¨c
(x,y,r,°¨t,íd); 
	}
}

424 
ölöe
 
	$Ê_cú˛e
(
x
, 
y
, 
r
Ë{
Ê_gøphics_drivî
->
	`cú˛e
(x,y,r); 
	}
}

428 
ölöe
 
	$Ê_íd_poöts
(Ë{
Ê_gøphics_drivî
->
	`íd_poöts
(); 
	}
}

432 
ölöe
 
	$Ê_íd_löe
(Ë{
Ê_gøphics_drivî
->
	`íd_löe
(); 
	}
}

436 
ölöe
 
	$Ê_íd_lo›
(Ë{
Ê_gøphics_drivî
->
	`íd_lo›
(); 
	}
}

440 
ölöe
 
	$Ê_íd_pﬁyg⁄
(Ë{
Ê_gøphics_drivî
->
	`íd_pﬁyg⁄
(); 
	}
}

455 
ölöe
 
	$Ê_begö_com∂ex_pﬁyg⁄
(Ë{
Ê_gøphics_drivî
->
	`begö_com∂ex_pﬁyg⁄
(); 
	}
}

462 
ölöe
 
	$Ê_g≠
(Ë{
Ê_gøphics_drivî
->
	`g≠
(); 
	}
}

466 
ölöe
 
	$Ê_íd_com∂ex_pﬁyg⁄
(Ë{
Ê_gøphics_drivî
->
	`íd_com∂ex_pﬁyg⁄
(); 
	}
}

472 
ölöe
 
	$Ê_å™sf‹m_x
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`å™sf‹m_x
(x, y); 
	}
}

477 
ölöe
 
	$Ê_å™sf‹m_y
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`å™sf‹m_y
(x, y); 
	}
}

482 
ölöe
 
	$Ê_å™sf‹m_dx
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`å™sf‹m_dx
(x, y); 
	}
}

487 
ölöe
 
	$Ê_å™sf‹m_dy
(
x
, 
y
Ë{ 
Ê_gøphics_drivî
->
	`å™sf‹m_dy
(x, y); 
	}
}

492 
ölöe
 
	$Ê_å™sf‹med_vîãx
(
xf
, 
yf
Ë{
Ê_gøphics_drivî
->
	`å™sf‹med_vîãx
(xf,yf); 
	}
}

509 
ölöe
 
	$Ê_f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
fsize
Ë{ 
Ê_gøphics_drivî
->
	`f⁄t
(Á˚,fsize); 
	}
}

515 
ölöe
 
Fl_F⁄t
 
	$Ê_f⁄t
(Ë{ 
Ê_gøphics_drivî
->
	`f⁄t
();
	}
}

520 
ölöe
 
Fl_F⁄tsize
 
	$Ê_size
(Ë{ 
Ê_gøphics_drivî
->
	`size
();
	}
}

527 
ölöe
 
	$Ê_height
(Ë{ 
Ê_gøphics_drivî
->
	`height
();
	}
}

528 
FL_EXPORT
 
Ê_height
(
f⁄t
, 
size
);

533 
ölöe
 
	$Ê_des˚¡
(Ë{ 
Ê_gøphics_drivî
->
	`des˚¡
();
	}
}

536 
FL_EXPORT
 
Ê_width
(c⁄° * 
txt
);

539 
ölöe
 
	$Ê_width
(c⁄° * 
txt
, 
n
Ë{ 
Ê_gøphics_drivî
->
	`width
—xt,Ç);
	}
}

544 
ölöe
 
	$Ê_width
(
c
Ë{ 
Ê_gøphics_drivî
->
	`width
(c);
	}
}

555 
FL_EXPORT
 
Ê_ãxt_exã¡s
(c⁄° *, & 
dx
, & 
dy
, & 
w
, & 
h
);

559 
ölöe
 
	$Ê_ãxt_exã¡s
(c⁄° *
t
, 
n
, & 
dx
, & 
dy
, & 
w
, & 
h
)

560 {
Ê_gøphics_drivî
->
	`ãxt_exã¡s
(
t
, 
n
, 
dx
, 
dy
, 
w
, 
h
);
	}
}

570 
FL_EXPORT
 c⁄° *
Ê_œtö1_to_loˇl
(c⁄° *
t
, 
n
=-1);

577 
FL_EXPORT
 c⁄° *
Ê_loˇl_to_œtö1
(c⁄° *
t
, 
n
=-1);

584 
FL_EXPORT
 c⁄° *
Ê_mac_rom™_to_loˇl
(c⁄° *
t
, 
n
=-1);

591 
FL_EXPORT
 c⁄° *
Ê_loˇl_to_mac_rom™
(c⁄° *
t
, 
n
=-1);

606 
FL_EXPORT
 
Ê_døw
(c⁄° * 
°r
, 
x
, 
y
);

614 
FL_EXPORT
 
Ê_døw
(
™gÀ
, c⁄° * 
°r
, 
x
, 
y
);

618 
ölöe
 
	$Ê_døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
Ë{
Ê_gøphics_drivî
->
	`døw
(°r,n,x,y); 
	}
}

623 
ölöe
 
	$Ê_døw
(
™gÀ
, c⁄° * 
°r
, 
n
, 
x
, 
y
Ë{
Ê_gøphics_drivî
->
	`døw
◊ngÀ,°r,n,x,y); 
	}
}

627 
ölöe
 
	$Ê_πl_døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
Ë{
Ê_gøphics_drivî
->
	`πl_døw
(°r,n,x,y); 
	}
}

628 
FL_EXPORT
 
Ê_mósuª
(c⁄° * 
°r
, & 
x
, & 
y
,

629 
døw_symbﬁs
 = 1);

630 
FL_EXPORT
 
Ê_døw
(c⁄° * 
°r
, 
x
, 
y
, 
w
, 
h
,

631 
Fl_Align
 
Æign
,

632 
Fl_Image
* 
img
=0, 
døw_symbﬁs
 = 1);

633 
FL_EXPORT
 
Ê_døw
(c⁄° * 
°r
, 
x
, 
y
, 
w
, 
h
,

634 
Fl_Align
 
Æign
,

635 (*
ˇŒthis
)(const *,,,),

636 
Fl_Image
* 
img
=0, 
døw_symbﬁs
 = 1);

639 
FL_EXPORT
 
	`Ê_‰ame
(c⁄° * 
s
, 
x
, 
y
, 
w
, 
h
);

640 
FL_EXPORT
 
	`Ê_‰ame2
(c⁄° * 
s
, 
x
, 
y
, 
w
, 
h
);

641 
FL_EXPORT
 
	`Ê_døw_box
(
Fl_Boxty≥
, 
x
, 
y
, 
w
, 
h
, 
Fl_Cﬁ‹
);

680 
ölöe
 
	$Ê_døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=3, 
L
=0)

681 { 
Ê_gøphics_drivî
->
	`døw_image
(
buf
, 
X
, 
Y
, 
W
, 
H
, 
D
, 
L
); 
	}
}

687 
ölöe
 
	$Ê_døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=1, 
L
=0)

688 { 
Ê_gøphics_drivî
->
	`døw_image_m⁄o
(
buf
, 
X
, 
Y
, 
W
, 
H
, 
D
, 
L
); 
	}
}

723 
ölöe
 
	$Ê_døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=3)

724 { 
Ê_gøphics_drivî
->
	`døw_image
(
cb
, 
d©a
, 
X
, 
Y
, 
W
, 
H
, 
D
); 
	}
}

730 
ölöe
 
	$Ê_døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=1)

731 { 
Ê_gøphics_drivî
->
	`døw_image_m⁄o
(
cb
, 
d©a
, 
X
, 
Y
, 
W
, 
H
, 
D
); 
	}
}

739 
FL_EXPORT
 
Ê_ˇn_do_Æpha_bÀndög
();

759 
FL_EXPORT
 
uch¨
 *
Ê_ªad_image
(uch¨ *
p
,
X
,
Y
,
W
,
H
,
Æpha
=0);

762 
FL_EXPORT
 
Ê_døw_pixm≠
–* c⁄°* 
d©a
, 
x
,
y
,
Fl_Cﬁ‹
=
FL_GRAY
);

763 
FL_EXPORT
 
Ê_døw_pixm≠
(c⁄° * c⁄°* 
cd©a
, 
x
,
y
,
Fl_Cﬁ‹
=
FL_GRAY
);

764 
FL_EXPORT
 
Ê_mósuª_pixm≠
–* c⁄°* 
d©a
, &
w
, &
h
);

765 
FL_EXPORT
 
Ê_mósuª_pixm≠
(c⁄° * c⁄°* 
cd©a
, &
w
, &
h
);

768 
FL_EXPORT
 
Ê_s¸ﬁl
(
X
, 
Y
, 
W
, 
H
, 
dx
, 
dy
,

769 (*
døw_¨ó
)(*, ,,,), * 
d©a
);

770 
FL_EXPORT
 c⁄° * 
	`Ê_sh‹tcut_œbñ
(
sh‹tcut
);

771 
FL_EXPORT
 c⁄° * 
	`Ê_sh‹tcut_œbñ
(
sh‹tcut
, c⁄° **
eom
);

772 
FL_EXPORT
 
	`Ê_ﬁd_sh‹tcut
(c⁄° * 
s
);

773 
FL_EXPORT
 
	`Ê_ovîœy_ª˘
(
x
,
y
,
w
,
h
);

774 
FL_EXPORT
 
	`Ê_ovîœy_˛ór
();

775 
FL_EXPORT
 
	`Ê_curs‹
(
Fl_Curs‹
);

776 
FL_EXPORT
 
	`Ê_curs‹
(
Fl_Curs‹
, 
Fl_Cﬁ‹
 
fg
, Fl_Cﬁ‹ 
bg
=
FL_WHITE
);

777 
FL_EXPORT
 c⁄° * 
	`Ê_ex∑nd_ãxt
(c⁄° * 
‰om
, * 
buf
, 
maxbuf
,

778 
maxw
, & 
n
, &
width
,

779 
wøp
, 
døw_symbﬁs
 = 0);

783 
FL_EXPORT
 
	`Ê_£t_°©us
(
X
, 
Y
, 
W
, 
H
);

785 
FL_EXPORT
 
	`Ê_£t_•Ÿ
(
f⁄t
, 
size
, 
X
, 
Y
, 
W
, 
H
, 
Fl_Wödow
 *
wö
=0);

787 
FL_EXPORT
 
	`Ê_ª£t_•Ÿ
();

792 
FL_EXPORT
 
	`Ê_døw_symbﬁ
(c⁄° * 
œbñ
,
x
,
y
,
w
,
h
, 
Fl_Cﬁ‹
);

793 
FL_EXPORT
 
	`Ê_add_symbﬁ
(c⁄° * 
«me
, (*
døwô
)(
Fl_Cﬁ‹
), 
sˇœbÀ
);

	@/home/lixing/include/FL/gl.h

42 #i‚de‡
FL_gl_H


43 
	#FL_gl_H


	)

45 
	~"Enumî©i⁄s.H
"

46 #ifde‡
WIN32


47 
	~<wödows.h
>

49 #i‚de‡
APIENTRY


50 #i‡
deföed
(
__CYGWIN__
)

51 
	#APIENTRY
 
	`__©åibuã__
 ((
__°dˇŒ__
))

	)

53 
	#APIENTRY


	)

57 #ifde‡
__APPLE__


58 
	~<O≥nGL/gl.h
>

60 
	~<GL/gl.h
>

63 
FL_EXPORT
 
gl_°¨t
();

64 
FL_EXPORT
 
gl_föish
();

66 
FL_EXPORT
 
gl_cﬁ‹
(
Fl_Cﬁ‹
 
i
);

68 
ölöe
 
	$gl_cﬁ‹
(
c
Ë{
	`gl_cﬁ‹
((
Fl_Cﬁ‹
)c);
	}
}

70 
FL_EXPORT
 
gl_ª˘
(
x
,
y
,
w
,
h
);

75 
ölöe
 
	$gl_ª˘f
(
x
,
y
,
w
,
h
Ë{
	`glRe˘i
(x,y,x+w,y+h);
	}
}

77 
FL_EXPORT
 
gl_f⁄t
(
f⁄tid
, 
size
);

78 
FL_EXPORT
 
gl_height
();

79 
FL_EXPORT
 
gl_des˚¡
();

80 
FL_EXPORT
 
gl_width
(const *);

81 
FL_EXPORT
 
gl_width
(c⁄° *, 
n
);

82 
FL_EXPORT
 
gl_width
(
uch¨
);

84 
FL_EXPORT
 
gl_døw
(const *);

85 
FL_EXPORT
 
gl_døw
(c⁄° *, 
n
);

86 
FL_EXPORT
 
gl_døw
(c⁄° *, 
x
, 
y
);

87 
FL_EXPORT
 
gl_døw
(c⁄° *, 
x
, 
y
);

88 
FL_EXPORT
 
gl_døw
(c⁄° *, 
n
, 
x
, 
y
);

89 
FL_EXPORT
 
gl_døw
(c⁄° *, 
n
, 
x
, 
y
);

90 
FL_EXPORT
 
gl_døw
(c⁄° *, 
x
, 
y
, 
w
, 
h
, 
Fl_Align
);

91 
FL_EXPORT
 
gl_mósuª
(c⁄° *, & 
x
, & 
y
);

92 #ifde‡
__APPLE__


93 
FL_EXPORT
 
gl_ãxtuª_pûe_height
(
max
);

94 
FL_EXPORT
 
gl_ãxtuª_pûe_height
();

97 
FL_EXPORT
 
gl_døw_image
(c⁄° 
uch¨
 *, 
x
,
y
,
w
,
h
, 
d
=3, 
ld
=0);

	@/home/lixing/include/FL/glu.h

26 #i‚de‡
FL_glu_H


27 
	#FL_glu_H


	)

29 
	~"Enumî©i⁄s.H
"

30 #ifde‡
WIN32


31 
	~<wödows.h
>

33 #i‚de‡
APIENTRY


34 #i‡
deföed
(
__CYGWIN__
)

35 
	#APIENTRY
 
	`__©åibuã__
 ((
__°dˇŒ__
))

	)

37 
	#APIENTRY


	)

41 #ifde‡
__APPLE__


42 
	~<O≥nGL/glu.h
>

44 
	~<GL/glu.h
>

	@/home/lixing/include/FL/glut.H

31 #i‚de‡
Fl_glut_H


32 
	#Fl_glut_H


	)

34 
	~"gl.h
"

37 
	~"Fl.H
"

38 
	~"Fl_Gl_Wödow.H
"

44 ˛as†
	cFL_EXPORT
 
	mFl_Glut_Wödow
 : 
public
 
Fl_Gl_Wödow
 {

45 
_öô
();

46 
	mmou£_down
;

47 
	m¥Ÿe˘ed
:

48 
døw
();

49 
døw_ovîœy
();

50 
h™dÀ
();

51 
	mpublic
:

52 
numbî
;

53 
	mmíu
[3];

54 
make_cuºít
();

55 (*
	mdi•œy
)();

56 (*
	movîœydi•œy
)();

57 (*
ªsh≠e
)(
w
, 
h
);

58 (*
keybﬂrd
)(
uch¨
, 
x
, 
y
);

59 (*
mou£
)(
b
, 
°©e
, 
x
, 
y
);

60 (*
mŸi⁄
)(
x
, 
y
);

61 (*
∑ssivemŸi⁄
)(
x
, 
y
);

62 (*
íåy
)();

63 (*
visibûôy
)();

64 (*
•ecül
)(, 
x
, 
y
);

65 
	`Fl_Glut_Wödow
(
w
, 
h
, const *);

66 
	`Fl_Glut_Wödow
(
x
, 
y
, 
w
, 
h
, const *);

67 ~
	`Fl_Glut_Wödow
();

70 
FL_EXPORT
 
Fl_Glut_Wödow
 *
glut_wödow
;

71 
FL_EXPORT
 
glut_míu
;

74 
FL_EXPORT
 (*
glut_idÀ_fun˘i⁄
)();

75 
FL_EXPORT
 (*
glut_míu°©e_fun˘i⁄
)();

76 
FL_EXPORT
 (*
glut_míu°©us_fun˘i⁄
)(,,);

82 
FL_EXPORT
 
	`glutInô
(*
¨g˝
, **
¨gv
);

84 
FL_EXPORT
 
	`glutInôDi•œyMode
(
mode
);

86 
	#GLUT_RGB
 
FL_RGB


	)

87 
	#GLUT_RGBA
 
FL_RGB


	)

88 
	#GLUT_INDEX
 
FL_INDEX


	)

89 
	#GLUT_SINGLE
 
FL_SINGLE


	)

90 
	#GLUT_DOUBLE
 
FL_DOUBLE


	)

91 
	#GLUT_ACCUM
 
FL_ACCUM


	)

92 
	#GLUT_ALPHA
 
FL_ALPHA


	)

93 
	#GLUT_DEPTH
 
FL_DEPTH


	)

94 
	#GLUT_STENCIL
 
FL_STENCIL


	)

95 
	#GLUT_MULTISAMPLE
 
FL_MULTISAMPLE


	)

96 
	#GLUT_STEREO
 
FL_STEREO


	)

99 
FL_EXPORT
 
	`glutInôWödowPosôi⁄
(
x
, 
y
);

101 
FL_EXPORT
 
	`glutInôWödowSize
(
w
, 
h
);

103 
FL_EXPORT
 
	`glutMaöLo›
();

105 
FL_EXPORT
 
	`glutCª©eWödow
(*
tôÀ
);

106 
FL_EXPORT
 
	`glutCª©eWödow
(c⁄° *
tôÀ
);

108 
FL_EXPORT
 
	`glutCª©eSubWödow
(
wö
, 
x
, 
y
, 
width
, 
height
);

110 
FL_EXPORT
 
	`glutDe°royWödow
(
wö
);

112 
ölöe
 
	$glutPo°Redi•œy
(Ë{
glut_wödow
->
	`ªdøw
();
	}
}

114 
FL_EXPORT
 
glutPo°WödowRedi•œy
(
wö
);

116 
FL_EXPORT
 
glutSw≠Buf„rs
();

118 
ölöe
 
	$glutGëWödow
(Ë{ 
glut_wödow
->
numbî
;
	}
}

120 
FL_EXPORT
 
glutSëWödow
(
wö
);

122 
ölöe
 
	$glutSëWödowTôÀ
(*
t
Ë{
glut_wödow
->
	`œbñ
—);
	}
}

124 
ölöe
 
	$glutSëIc⁄TôÀ
(*
t
Ë{
glut_wödow
->
	`ic⁄œbñ
—);
	}
}

126 
ölöe
 
	$glutPosôi⁄Wödow
(
x
, 
y
Ë{
glut_wödow
->
	`posôi⁄
(x,y);
	}
}

128 
ölöe
 
	$glutResh≠eWödow
(
w
, 
h
Ë{
glut_wödow
->
	`size
(w,h);
	}
}

130 
ölöe
 
	$glutP›Wödow
(Ë{
glut_wödow
->
	`show
();
	}
}

132 
ölöe
 
	$glutPushWödow
(Ë{ 
	}
}

134 
ölöe
 
	$glutIc⁄ifyWödow
(Ë{
glut_wödow
->
	`ic⁄ize
();
	}
}

136 
ölöe
 
	$glutShowWödow
(Ë{
glut_wödow
->
	`show
();
	}
}

138 
ölöe
 
	$glutHideWödow
(Ë{
glut_wödow
->
	`hide
();
	}
}

140 
ölöe
 
	$glutFuŒS¸ìn
(Ë{
glut_wödow
->
	`fuŒs¸ìn
();
	}
}

142 
ölöe
 
	$glutSëCurs‹
(
Fl_Curs‹
 
curs‹
Ë{
glut_wödow
->
	`curs‹
(curs‹);
	}
}

144 
	#GLUT_CURSOR_RIGHT_ARROW
 ((
Fl_Curs‹
)2)

	)

145 
	#GLUT_CURSOR_LEFT_ARROW
 ((
Fl_Curs‹
)67)

	)

146 
	#GLUT_CURSOR_INFO
 
FL_CURSOR_HAND


	)

147 
	#GLUT_CURSOR_DESTROY
 ((
Fl_Curs‹
)45)

	)

148 
	#GLUT_CURSOR_HELP
 
FL_CURSOR_HELP


	)

149 
	#GLUT_CURSOR_CYCLE
 ((
Fl_Curs‹
)26)

	)

150 
	#GLUT_CURSOR_SPRAY
 ((
Fl_Curs‹
)63)

	)

151 
	#GLUT_CURSOR_WAIT
 
FL_CURSOR_WAIT


	)

152 
	#GLUT_CURSOR_TEXT
 
FL_CURSOR_INSERT


	)

153 
	#GLUT_CURSOR_CROSSHAIR
 
FL_CURSOR_CROSS


	)

154 
	#GLUT_CURSOR_UP_DOWN
 
FL_CURSOR_NS


	)

155 
	#GLUT_CURSOR_LEFT_RIGHT
 
FL_CURSOR_WE


	)

156 
	#GLUT_CURSOR_TOP_SIDE
 
FL_CURSOR_N


	)

157 
	#GLUT_CURSOR_BOTTOM_SIDE
 
FL_CURSOR_S


	)

158 
	#GLUT_CURSOR_LEFT_SIDE
 
FL_CURSOR_W


	)

159 
	#GLUT_CURSOR_RIGHT_SIDE
 
FL_CURSOR_E


	)

160 
	#GLUT_CURSOR_TOP_LEFT_CORNER
 
FL_CURSOR_NW


	)

161 
	#GLUT_CURSOR_TOP_RIGHT_CORNER
 
FL_CURSOR_NE


	)

162 
	#GLUT_CURSOR_BOTTOM_RIGHT_CORNER
 
FL_CURSOR_SE


	)

163 
	#GLUT_CURSOR_BOTTOM_LEFT_CORNER
 
FL_CURSOR_SW


	)

164 
	#GLUT_CURSOR_INHERIT
 
FL_CURSOR_DEFAULT


	)

165 
	#GLUT_CURSOR_NONE
 
FL_CURSOR_NONE


	)

166 
	#GLUT_CURSOR_FULL_CROSSHAIR
 
FL_CURSOR_CROSS


	)

168 
ölöe
 
	$glutW¨pPoöãr
(, Ë{ 
	}
}

170 
ölöe
 
	$glutE°ablishOvîœy
(Ë{
glut_wödow
->
	`make_ovîœy_cuºít
();
	}
}

172 
ölöe
 
	$glutRemoveOvîœy
(Ë{
glut_wödow
->
	`hide_ovîœy
();
	}
}

174 
ölöe
 
	$glutU£Layî
(
GLíum
 
œyî
) {

175 
œyî
 ? 
glut_wödow
->
	`make_ovîœy_cuºít
(Ë: glut_wödow->
	`make_cuºít
();
	}
}

176 íum {
	mGLUT_NORMAL
, 
	mGLUT_OVERLAY
};

178 
ölöe
 
	$glutPo°OvîœyRedi•œy
(Ë{
glut_wödow
->
	`ªdøw_ovîœy
();
	}
}

180 
ölöe
 
	$glutShowOvîœy
(Ë{
glut_wödow
->
	`ªdøw_ovîœy
();
	}
}

182 
ölöe
 
	$glutHideOvîœy
(Ë{
glut_wödow
->
	`hide_ovîœy
();
	}
}

184 
FL_EXPORT
 
glutCª©eMíu
((*)());

186 
FL_EXPORT
 
	`glutDe°royMíu
(
míu
);

188 
ölöe
 
	$glutGëMíu
(Ë{ 
glut_míu
;
	}
}

190 
ölöe
 
	$glutSëMíu
(
m
Ë{
glut_míu
 = m;
	}
}

192 
FL_EXPORT
 
glutAddMíuE¡ry
(*
œbñ
, 
vÆue
);

194 
FL_EXPORT
 
glutAddSubMíu
(*
œbñ
, 
submíu
);

196 
FL_EXPORT
 
glutCh™geToMíuE¡ry
(
ôem
, *
œbña
, 
vÆue
);

198 
FL_EXPORT
 
glutCh™geToSubMíu
(
ôem
, *
œbñ
, 
submíu
);

200 
FL_EXPORT
 
glutRemoveMíuIãm
(
ôem
);

202 
ölöe
 
	$glutAâachMíu
(
b
Ë{
glut_wödow
->
míu
[b] = 
glut_míu
;
	}
}

204 
ölöe
 
	$glutDëachMíu
(
b
Ë{
glut_wödow
->
míu
[b] = 0;
	}
}

206 
ölöe
 
glutDi•œyFunc
((*
f
)()Ë{
glut_wödow
->
di•œy
 = f;
	}
}

208 
ölöe
 
glutResh≠eFunc
((*
f
)(
w
, 
h
)Ë{
glut_wödow
->
ªsh≠e
=f;
	}
}

210 
ölöe
 
glutKeybﬂrdFunc
((*
f
)(
uch¨
 
key
, 
x
, 
y
)) {

211 
glut_wödow
->
keybﬂrd
 = 
f
;
	}
}

213 
ölöe
 
glutMou£Func
((*
f
)(
b
, 
°©e
, 
x
, 
y
)) {

214 
glut_wödow
->
mou£
 = 
f
;
	}
}

215 
	#GLUT_LEFT_BUTTON
 0

	)

216 
	#GLUT_MIDDLE_BUTTON
 1

	)

217 
	#GLUT_RIGHT_BUTTON
 2

	)

218 
	#GLUT_DOWN
 0

	)

219 
	#GLUT_UP
 1

	)

221 
ölöe
 
glutMŸi⁄Func
((*
f
)(
x
, 
y
)Ë{
glut_wödow
->
mŸi⁄
f;
	}
}

223 
ölöe
 
glutPassiveMŸi⁄Func
((*
f
)(
x
, 
y
)) {

224 
glut_wödow
->
∑ssivemŸi⁄

f
;
	}
}

226 
ölöe
 
glutE¡ryFunc
((*
f
)(
s
)Ë{
glut_wödow
->
íåy
 = f;
	}
}

227 íum {
	mGLUT_LEFT
, 
	mGLUT_ENTERED
};

229 
ölöe
 
glutVisibûôyFunc
((*
f
)(
s
)Ë{
glut_wödow
->
visibûôy
=f;
	}
}

230 íum {
	mGLUT_NOT_VISIBLE
, 
	mGLUT_VISIBLE
};

232 
FL_EXPORT
 
glutIdÀFunc
((*
f
)());

235 
ölöe
 
glutTimîFunc
(
m£c
, (*
f
)(), 
vÆue
) {

236 #i‡
	`deföed
(
__LP64__
)

237 
Fl
::
	`add_timeout
(
m£c
*.001, ((*)(*))
f
, (*Ë(Ë
vÆue
);

239 
Fl
::
	`add_timeout
(
m£c
*.001, ((*)(*))
f
, (*)
vÆue
);

241 
	}
}

243 
ölöe
 
glutMíuSèãFunc
((*
f
)(
°©e
)) {

244 
glut_míu°©e_fun˘i⁄
 = 
f
;
	}
}

246 
ölöe
 
glutMíuSètusFunc
((*
f
)(
°©us
, 
x
, 
y
)) {

247 
glut_míu°©us_fun˘i⁄
 = 
f
;
	}
}

248 íum {
	mGLUT_MENU_NOT_IN_USE
, 
	mGLUT_MENU_IN_USE
};

250 
ölöe
 
glutS≥cülFunc
((*
f
)(
key
, 
x
, 
y
)) {

251 
glut_wödow
->
•ecül
 = 
f
;
	}
}

252 
	#GLUT_KEY_F1
 1

	)

253 
	#GLUT_KEY_F2
 2

	)

254 
	#GLUT_KEY_F3
 3

	)

255 
	#GLUT_KEY_F4
 4

	)

256 
	#GLUT_KEY_F5
 5

	)

257 
	#GLUT_KEY_F6
 6

	)

258 
	#GLUT_KEY_F7
 7

	)

259 
	#GLUT_KEY_F8
 8

	)

260 
	#GLUT_KEY_F9
 9

	)

261 
	#GLUT_KEY_F10
 10

	)

262 
	#GLUT_KEY_F11
 11

	)

263 
	#GLUT_KEY_F12
 12

	)

265 
	#GLUT_KEY_LEFT
 
FL_Le·


	)

266 
	#GLUT_KEY_UP
 
FL_Up


	)

267 
	#GLUT_KEY_RIGHT
 
FL_Right


	)

268 
	#GLUT_KEY_DOWN
 
FL_Down


	)

269 
	#GLUT_KEY_PAGE_UP
 
FL_Page_Up


	)

270 
	#GLUT_KEY_PAGE_DOWN
 
FL_Page_Down


	)

271 
	#GLUT_KEY_HOME
 
FL_Home


	)

272 
	#GLUT_KEY_END
 
FL_End


	)

273 
	#GLUT_KEY_INSERT
 
FL_In£π


	)

289 
ölöe
 
glutOvîœyDi•œyFunc
((*
f
)()) {

290 
glut_wödow
->
ovîœydi•œy
 = 
f
;
	}
}

307 
FL_EXPORT
 
glutGë
(
GLíum
 
ty≥
);

309 
	mGLUT_RETURN_ZERO
 = 0,

310 
	mGLUT_WINDOW_X
,

311 
	mGLUT_WINDOW_Y
,

312 
	mGLUT_WINDOW_WIDTH
,

313 
	mGLUT_WINDOW_HEIGHT
,

314 
	mGLUT_WINDOW_PARENT
,

315 
	mGLUT_SCREEN_WIDTH
,

316 
	mGLUT_SCREEN_HEIGHT
,

317 
	mGLUT_MENU_NUM_ITEMS
,

318 
	mGLUT_DISPLAY_MODE_POSSIBLE
,

319 
	mGLUT_INIT_WINDOW_X
,

320 
	mGLUT_INIT_WINDOW_Y
,

321 
	mGLUT_INIT_WINDOW_WIDTH
,

322 
	mGLUT_INIT_WINDOW_HEIGHT
,

323 
	mGLUT_INIT_DISPLAY_MODE
,

324 
	mGLUT_WINDOW_BUFFER_SIZE
,

325 
	mGLUT_VERSION


333 
	#GLUT_WINDOW_STENCIL_SIZE
 
GL_STENCIL_BITS


	)

334 
	#GLUT_WINDOW_DEPTH_SIZE
 
GL_DEPTH_BITS


	)

335 
	#GLUT_WINDOW_RED_SIZE
 
GL_RED_BITS


	)

336 
	#GLUT_WINDOW_GREEN_SIZE
 
GL_GREEN_BITS


	)

337 
	#GLUT_WINDOW_BLUE_SIZE
 
GL_BLUE_BITS


	)

338 
	#GLUT_WINDOW_ALPHA_SIZE
 
GL_ALPHA_BITS


	)

339 
	#GLUT_WINDOW_ACCUM_RED_SIZE
 
GL_ACCUM_RED_BITS


	)

340 
	#GLUT_WINDOW_ACCUM_GREEN_SIZE
 
GL_ACCUM_GREEN_BITS


	)

341 
	#GLUT_WINDOW_ACCUM_BLUE_SIZE
 
GL_ACCUM_BLUE_BITS


	)

342 
	#GLUT_WINDOW_ACCUM_ALPHA_SIZE
 
GL_ACCUM_ALPHA_BITS


	)

343 
	#GLUT_WINDOW_DOUBLEBUFFER
 
GL_DOUBLEBUFFER


	)

344 
	#GLUT_WINDOW_RGBA
 
GL_RGBA


	)

345 
	#GLUT_WINDOW_COLORMAP_SIZE
 
GL_INDEX_BITS


	)

346 #ifde‡
GL_SAMPLES_SGIS


347 
	#GLUT_WINDOW_NUM_SAMPLES
 
GL_SAMPLES_SGIS


	)

349 
	#GLUT_WINDOW_NUM_SAMPLES
 
GLUT_RETURN_ZERO


	)

351 
	#GLUT_WINDOW_STEREO
 
GL_STEREO


	)

353 
	#GLUT_HAS_KEYBOARD
 600

	)

354 
	#GLUT_HAS_MOUSE
 601

	)

355 
	#GLUT_HAS_SPACEBALL
 602

	)

356 
	#GLUT_HAS_DIAL_AND_BUTTON_BOX
 603

	)

357 
	#GLUT_HAS_TABLET
 604

	)

358 
	#GLUT_NUM_MOUSE_BUTTONS
 605

	)

359 
	#GLUT_NUM_SPACEBALL_BUTTONS
 606

	)

360 
	#GLUT_NUM_BUTTON_BOX_BUTTONS
 607

	)

361 
	#GLUT_NUM_DIALS
 608

	)

362 
	#GLUT_NUM_TABLET_BUTTONS
 609

	)

363 
FL_EXPORT
 
glutDevi˚Gë
(
GLíum
 
ty≥
);

366 
	#GLUT_ACTIVE_SHIFT
 
FL_SHIFT


	)

367 
	#GLUT_ACTIVE_CTRL
 
FL_CTRL


	)

368 
	#GLUT_ACTIVE_ALT
 
FL_ALT


	)

369 
ölöe
 
	$glutGëModifõrs
(Ë{ 
Fl
::
	`evít_°©e
(Ë& (
GLUT_ACTIVE_SHIFT
 | 
GLUT_ACTIVE_CTRL
 | 
GLUT_ACTIVE_ALT
);
	}
}

371 
FL_EXPORT
 
glutLayîGë
(
GLíum
);

372 
	#GLUT_OVERLAY_POSSIBLE
 800

	)

375 
	#GLUT_TRANSPARENT_INDEX
 803

	)

376 
	#GLUT_NORMAL_DAMAGED
 804

	)

377 
	#GLUT_OVERLAY_DAMAGED
 805

	)

380 (*
GLUT¥oc
)();

383 
FL_EXPORT
 
GLUT¥oc
 
glutGëProcAddªss
(c⁄° *
¥ocName
);

407 
	sFl_Glut_Bôm≠_F⁄t
 {
Fl_F⁄t
 
	mf⁄t
; 
Fl_F⁄tsize
 
	msize
;};

409 
FL_EXPORT
 
Fl_Glut_Bôm≠_F⁄t


410 
glutBôm≠9By15
, 
glutBôm≠8By13
, 
glutBôm≠TimesRom™10
,

411 
glutBôm≠TimesRom™24
, 
glutBôm≠Hñvëiˇ10
, 
glutBôm≠Hñvëiˇ12
,

412 
glutBôm≠Hñvëiˇ18
;

413 
	#GLUT_BITMAP_9_BY_15
 (&
glutBôm≠9By15
)

	)

414 
	#GLUT_BITMAP_8_BY_13
 (&
glutBôm≠8By13
)

	)

415 
	#GLUT_BITMAP_TIMES_ROMAN_10
 (&
glutBôm≠TimesRom™10
)

	)

416 
	#GLUT_BITMAP_TIMES_ROMAN_24
 (&
glutBôm≠TimesRom™24
)

	)

417 
	#GLUT_BITMAP_HELVETICA_10
 (&
glutBôm≠Hñvëiˇ10
)

	)

418 
	#GLUT_BITMAP_HELVETICA_12
 (&
glutBôm≠Hñvëiˇ12
)

	)

419 
	#GLUT_BITMAP_HELVETICA_18
 (&
glutBôm≠Hñvëiˇ18
)

	)

421 
FL_EXPORT
 
glutBôm≠Ch¨a˘î
(*
f⁄t
, 
ch¨a˘î
);

422 
FL_EXPORT
 
glutBôm≠Height
(*
f⁄t
);

423 
FL_EXPORT
 
glutBôm≠Lígth
(*
f⁄t
, c⁄° *
°rög
);

424 
FL_EXPORT
 
glutBôm≠Såög
(*
f⁄t
, c⁄° *
°rög
);

425 
FL_EXPORT
 
glutBôm≠Width
(*
f⁄t
, 
ch¨a˘î
);

427 
FL_EXPORT
 
glutExãnsi⁄Suµ‹ãd
(*
«me
);

430 
	sFl_Glut_SåokeVîãx
 {

431 
GLÊﬂt
 
	mX
, 
	mY
;

434 
	sFl_Glut_SåokeSåù
 {

435 
	mNumbî
;

436 c⁄° 
Fl_Glut_SåokeVîãx
* 
	mVîti˚s
;

439 
	sFl_Glut_SåokeCh¨
 {

440 
GLÊﬂt
 
	mRight
;

441 
	mNumbî
;

442 c⁄° 
Fl_Glut_SåokeSåù
* 
	mSåùs
;

445 
	sFl_Glut_SåokeF⁄t
 {

446 * 
	mName
;

447 
	mQu™tôy
;

448 
GLÊﬂt
 
	mHeight
;

449 c⁄° 
Fl_Glut_SåokeCh¨
** 
	mCh¨a˘îs
;

451 
FL_EXPORT
 
Fl_Glut_SåokeF⁄t
 
glutSåokeRom™
;

452 
FL_EXPORT
 
Fl_Glut_SåokeF⁄t
 
glutSåokeM⁄oRom™
;

453 
	#GLUT_STROKE_ROMAN
 (&
glutSåokeRom™
)

	)

454 
	#GLUT_STROKE_MONO_ROMAN
 (&
glutSåokeM⁄oRom™
)

	)

456 
FL_EXPORT
 
glutSåokeCh¨a˘î
(*
f⁄t
, 
ch¨a˘î
);

457 
FL_EXPORT
 
GLÊﬂt
 
glutSåokeHeight
(*
f⁄t
);

458 
FL_EXPORT
 
glutSåokeLígth
(*
f⁄t
, c⁄° *
°rög
);

459 
FL_EXPORT
 
glutSåokeSåög
(*
f⁄t
, c⁄° *
°rög
);

460 
FL_EXPORT
 
glutSåokeWidth
(*
f⁄t
, 
ch¨a˘î
);

463 
FL_EXPORT
 
glutWúeSphîe
(
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

464 
FL_EXPORT
 
glutSﬁidSphîe
(
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

465 
FL_EXPORT
 
glutWúeC⁄e
(
GLdoubÀ
 
ba£
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

466 
FL_EXPORT
 
glutSﬁidC⁄e
(
GLdoubÀ
 
ba£
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

467 
FL_EXPORT
 
glutWúeCube
(
GLdoubÀ
 
size
);

468 
FL_EXPORT
 
glutSﬁidCube
(
GLdoubÀ
 
size
);

469 
FL_EXPORT
 
glutWúeT‹us
(
GLdoubÀ
 
ö√rRadius
, GLdoubÀ 
ouãrRadius
, 
GLöt
 
sides
, GLöà
rögs
);

470 
FL_EXPORT
 
glutSﬁidT‹us
(
GLdoubÀ
 
ö√rRadius
, GLdoubÀ 
ouãrRadius
, 
GLöt
 
sides
, GLöà
rögs
);

471 
FL_EXPORT
 
glutWúeDodeˇhedr⁄
();

472 
FL_EXPORT
 
glutSﬁidDodeˇhedr⁄
();

473 
FL_EXPORT
 
glutWúeTópŸ
(
GLdoubÀ
 
size
);

474 
FL_EXPORT
 
glutSﬁidTópŸ
(
GLdoubÀ
 
size
);

475 
FL_EXPORT
 
glutWúeO˘ahedr⁄
();

476 
FL_EXPORT
 
glutSﬁidO˘ahedr⁄
();

477 
FL_EXPORT
 
glutWúeTëøhedr⁄
();

478 
FL_EXPORT
 
glutSﬁidTëøhedr⁄
();

479 
FL_EXPORT
 
glutWúeIcoßhedr⁄
();

480 
FL_EXPORT
 
glutSﬁidIcoßhedr⁄
();

	@/home/lixing/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

40 
	#__WIN32__


	)

43 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

44 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

45 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

46 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

47 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 
	#GLAPI
 

	)

51 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

52 
	#GLAPIENTRY


	)

54 
	#GLAPIENTRY
 
__°dˇŒ


	)

56 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

57 
	#GLAPI
 

	)

58 
	#GLAPIENTRY
 
__°dˇŒ


	)

59 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

60 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

61 
	#GLAPIENTRY


	)

72 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

73 #i‚de‡
WIN32_LEAN_AND_MEAN


74 
	#WIN32_LEAN_AND_MEAN
 1

	)

76 
	~<wödows.h
>

79 #i‚de‡
GLAPI


80 
	#GLAPI
 

	)

83 #i‚de‡
GLAPIENTRY


84 
	#GLAPIENTRY


	)

87 #i‚de‡
APIENTRY


88 
	#APIENTRY
 
GLAPIENTRY


	)

92 #i‚de‡
APIENTRYP


93 
	#APIENTRYP
 
APIENTRY
 *

	)

96 #i‚de‡
GLAPIENTRYP


97 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

106 #ifde‡
__˝lu•lus


112 
	#GL_VERSION_1_1
 1

	)

113 
	#GL_VERSION_1_2
 1

	)

114 
	#GL_VERSION_1_3
 1

	)

115 
	#GL_ARB_imagög
 1

	)

121 
	tGLíum
;

122 
	tGLboﬁón
;

123 
	tGLbôfõld
;

124 
	tGLvoid
;

125 sig√d 
	tGLbyã
;

126 
	tGLsh‹t
;

127 
	tGLöt
;

128 
	tGLubyã
;

129 
	tGLush‹t
;

130 
	tGLuöt
;

131 
	tGLsizei
;

132 
	tGLÊﬂt
;

133 
	tGL˛ampf
;

134 
	tGLdoubÀ
;

135 
	tGL˛ampd
;

144 
	#GL_FALSE
 0

	)

145 
	#GL_TRUE
 1

	)

148 
	#GL_BYTE
 0x1400

	)

149 
	#GL_UNSIGNED_BYTE
 0x1401

	)

150 
	#GL_SHORT
 0x1402

	)

151 
	#GL_UNSIGNED_SHORT
 0x1403

	)

152 
	#GL_INT
 0x1404

	)

153 
	#GL_UNSIGNED_INT
 0x1405

	)

154 
	#GL_FLOAT
 0x1406

	)

155 
	#GL_2_BYTES
 0x1407

	)

156 
	#GL_3_BYTES
 0x1408

	)

157 
	#GL_4_BYTES
 0x1409

	)

158 
	#GL_DOUBLE
 0x140A

	)

161 
	#GL_POINTS
 0x0000

	)

162 
	#GL_LINES
 0x0001

	)

163 
	#GL_LINE_LOOP
 0x0002

	)

164 
	#GL_LINE_STRIP
 0x0003

	)

165 
	#GL_TRIANGLES
 0x0004

	)

166 
	#GL_TRIANGLE_STRIP
 0x0005

	)

167 
	#GL_TRIANGLE_FAN
 0x0006

	)

168 
	#GL_QUADS
 0x0007

	)

169 
	#GL_QUAD_STRIP
 0x0008

	)

170 
	#GL_POLYGON
 0x0009

	)

173 
	#GL_VERTEX_ARRAY
 0x8074

	)

174 
	#GL_NORMAL_ARRAY
 0x8075

	)

175 
	#GL_COLOR_ARRAY
 0x8076

	)

176 
	#GL_INDEX_ARRAY
 0x8077

	)

177 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

178 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

179 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

180 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

181 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

182 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

183 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

184 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

185 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

186 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

187 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

188 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

189 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

190 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

191 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

192 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

193 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

194 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

195 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

196 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

197 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

198 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

199 
	#GL_V2F
 0x2A20

	)

200 
	#GL_V3F
 0x2A21

	)

201 
	#GL_C4UB_V2F
 0x2A22

	)

202 
	#GL_C4UB_V3F
 0x2A23

	)

203 
	#GL_C3F_V3F
 0x2A24

	)

204 
	#GL_N3F_V3F
 0x2A25

	)

205 
	#GL_C4F_N3F_V3F
 0x2A26

	)

206 
	#GL_T2F_V3F
 0x2A27

	)

207 
	#GL_T4F_V4F
 0x2A28

	)

208 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

209 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

210 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

211 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

212 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

215 
	#GL_MATRIX_MODE
 0x0BA0

	)

216 
	#GL_MODELVIEW
 0x1700

	)

217 
	#GL_PROJECTION
 0x1701

	)

218 
	#GL_TEXTURE
 0x1702

	)

221 
	#GL_POINT_SMOOTH
 0x0B10

	)

222 
	#GL_POINT_SIZE
 0x0B11

	)

223 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

224 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

227 
	#GL_LINE_SMOOTH
 0x0B20

	)

228 
	#GL_LINE_STIPPLE
 0x0B24

	)

229 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

230 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

231 
	#GL_LINE_WIDTH
 0x0B21

	)

232 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

233 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

236 
	#GL_POINT
 0x1B00

	)

237 
	#GL_LINE
 0x1B01

	)

238 
	#GL_FILL
 0x1B02

	)

239 
	#GL_CW
 0x0900

	)

240 
	#GL_CCW
 0x0901

	)

241 
	#GL_FRONT
 0x0404

	)

242 
	#GL_BACK
 0x0405

	)

243 
	#GL_POLYGON_MODE
 0x0B40

	)

244 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

245 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

246 
	#GL_EDGE_FLAG
 0x0B43

	)

247 
	#GL_CULL_FACE
 0x0B44

	)

248 
	#GL_CULL_FACE_MODE
 0x0B45

	)

249 
	#GL_FRONT_FACE
 0x0B46

	)

250 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

251 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

252 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

253 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

254 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

257 
	#GL_COMPILE
 0x1300

	)

258 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

259 
	#GL_LIST_BASE
 0x0B32

	)

260 
	#GL_LIST_INDEX
 0x0B33

	)

261 
	#GL_LIST_MODE
 0x0B30

	)

264 
	#GL_NEVER
 0x0200

	)

265 
	#GL_LESS
 0x0201

	)

266 
	#GL_EQUAL
 0x0202

	)

267 
	#GL_LEQUAL
 0x0203

	)

268 
	#GL_GREATER
 0x0204

	)

269 
	#GL_NOTEQUAL
 0x0205

	)

270 
	#GL_GEQUAL
 0x0206

	)

271 
	#GL_ALWAYS
 0x0207

	)

272 
	#GL_DEPTH_TEST
 0x0B71

	)

273 
	#GL_DEPTH_BITS
 0x0D56

	)

274 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

275 
	#GL_DEPTH_FUNC
 0x0B74

	)

276 
	#GL_DEPTH_RANGE
 0x0B70

	)

277 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

278 
	#GL_DEPTH_COMPONENT
 0x1902

	)

281 
	#GL_LIGHTING
 0x0B50

	)

282 
	#GL_LIGHT0
 0x4000

	)

283 
	#GL_LIGHT1
 0x4001

	)

284 
	#GL_LIGHT2
 0x4002

	)

285 
	#GL_LIGHT3
 0x4003

	)

286 
	#GL_LIGHT4
 0x4004

	)

287 
	#GL_LIGHT5
 0x4005

	)

288 
	#GL_LIGHT6
 0x4006

	)

289 
	#GL_LIGHT7
 0x4007

	)

290 
	#GL_SPOT_EXPONENT
 0x1205

	)

291 
	#GL_SPOT_CUTOFF
 0x1206

	)

292 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

293 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

294 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

295 
	#GL_AMBIENT
 0x1200

	)

296 
	#GL_DIFFUSE
 0x1201

	)

297 
	#GL_SPECULAR
 0x1202

	)

298 
	#GL_SHININESS
 0x1601

	)

299 
	#GL_EMISSION
 0x1600

	)

300 
	#GL_POSITION
 0x1203

	)

301 
	#GL_SPOT_DIRECTION
 0x1204

	)

302 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

303 
	#GL_COLOR_INDEXES
 0x1603

	)

304 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

305 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

306 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

307 
	#GL_FRONT_AND_BACK
 0x0408

	)

308 
	#GL_SHADE_MODEL
 0x0B54

	)

309 
	#GL_FLAT
 0x1D00

	)

310 
	#GL_SMOOTH
 0x1D01

	)

311 
	#GL_COLOR_MATERIAL
 0x0B57

	)

312 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

313 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

314 
	#GL_NORMALIZE
 0x0BA1

	)

317 
	#GL_CLIP_PLANE0
 0x3000

	)

318 
	#GL_CLIP_PLANE1
 0x3001

	)

319 
	#GL_CLIP_PLANE2
 0x3002

	)

320 
	#GL_CLIP_PLANE3
 0x3003

	)

321 
	#GL_CLIP_PLANE4
 0x3004

	)

322 
	#GL_CLIP_PLANE5
 0x3005

	)

325 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

326 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

327 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

328 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

329 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

330 
	#GL_ACCUM
 0x0100

	)

331 
	#GL_ADD
 0x0104

	)

332 
	#GL_LOAD
 0x0101

	)

333 
	#GL_MULT
 0x0103

	)

334 
	#GL_RETURN
 0x0102

	)

337 
	#GL_ALPHA_TEST
 0x0BC0

	)

338 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

339 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

342 
	#GL_BLEND
 0x0BE2

	)

343 
	#GL_BLEND_SRC
 0x0BE1

	)

344 
	#GL_BLEND_DST
 0x0BE0

	)

345 
	#GL_ZERO
 0

	)

346 
	#GL_ONE
 1

	)

347 
	#GL_SRC_COLOR
 0x0300

	)

348 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

349 
	#GL_SRC_ALPHA
 0x0302

	)

350 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

351 
	#GL_DST_ALPHA
 0x0304

	)

352 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

353 
	#GL_DST_COLOR
 0x0306

	)

354 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

355 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

358 
	#GL_FEEDBACK
 0x1C01

	)

359 
	#GL_RENDER
 0x1C00

	)

360 
	#GL_SELECT
 0x1C02

	)

363 
	#GL_2D
 0x0600

	)

364 
	#GL_3D
 0x0601

	)

365 
	#GL_3D_COLOR
 0x0602

	)

366 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

367 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

368 
	#GL_POINT_TOKEN
 0x0701

	)

369 
	#GL_LINE_TOKEN
 0x0702

	)

370 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

371 
	#GL_POLYGON_TOKEN
 0x0703

	)

372 
	#GL_BITMAP_TOKEN
 0x0704

	)

373 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

374 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

375 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

376 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

377 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

378 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

381 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

382 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

385 
	#GL_FOG
 0x0B60

	)

386 
	#GL_FOG_MODE
 0x0B65

	)

387 
	#GL_FOG_DENSITY
 0x0B62

	)

388 
	#GL_FOG_COLOR
 0x0B66

	)

389 
	#GL_FOG_INDEX
 0x0B61

	)

390 
	#GL_FOG_START
 0x0B63

	)

391 
	#GL_FOG_END
 0x0B64

	)

392 
	#GL_LINEAR
 0x2601

	)

393 
	#GL_EXP
 0x0800

	)

394 
	#GL_EXP2
 0x0801

	)

397 
	#GL_LOGIC_OP
 0x0BF1

	)

398 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

399 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

400 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

401 
	#GL_CLEAR
 0x1500

	)

402 
	#GL_SET
 0x150F

	)

403 
	#GL_COPY
 0x1503

	)

404 
	#GL_COPY_INVERTED
 0x150C

	)

405 
	#GL_NOOP
 0x1505

	)

406 
	#GL_INVERT
 0x150A

	)

407 
	#GL_AND
 0x1501

	)

408 
	#GL_NAND
 0x150E

	)

409 
	#GL_OR
 0x1507

	)

410 
	#GL_NOR
 0x1508

	)

411 
	#GL_XOR
 0x1506

	)

412 
	#GL_EQUIV
 0x1509

	)

413 
	#GL_AND_REVERSE
 0x1502

	)

414 
	#GL_AND_INVERTED
 0x1504

	)

415 
	#GL_OR_REVERSE
 0x150B

	)

416 
	#GL_OR_INVERTED
 0x150D

	)

419 
	#GL_STENCIL_BITS
 0x0D57

	)

420 
	#GL_STENCIL_TEST
 0x0B90

	)

421 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

422 
	#GL_STENCIL_FUNC
 0x0B92

	)

423 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

424 
	#GL_STENCIL_FAIL
 0x0B94

	)

425 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

426 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

427 
	#GL_STENCIL_REF
 0x0B97

	)

428 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

429 
	#GL_STENCIL_INDEX
 0x1901

	)

430 
	#GL_KEEP
 0x1E00

	)

431 
	#GL_REPLACE
 0x1E01

	)

432 
	#GL_INCR
 0x1E02

	)

433 
	#GL_DECR
 0x1E03

	)

436 
	#GL_NONE
 0

	)

437 
	#GL_LEFT
 0x0406

	)

438 
	#GL_RIGHT
 0x0407

	)

442 
	#GL_FRONT_LEFT
 0x0400

	)

443 
	#GL_FRONT_RIGHT
 0x0401

	)

444 
	#GL_BACK_LEFT
 0x0402

	)

445 
	#GL_BACK_RIGHT
 0x0403

	)

446 
	#GL_AUX0
 0x0409

	)

447 
	#GL_AUX1
 0x040A

	)

448 
	#GL_AUX2
 0x040B

	)

449 
	#GL_AUX3
 0x040C

	)

450 
	#GL_COLOR_INDEX
 0x1900

	)

451 
	#GL_RED
 0x1903

	)

452 
	#GL_GREEN
 0x1904

	)

453 
	#GL_BLUE
 0x1905

	)

454 
	#GL_ALPHA
 0x1906

	)

455 
	#GL_LUMINANCE
 0x1909

	)

456 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

457 
	#GL_ALPHA_BITS
 0x0D55

	)

458 
	#GL_RED_BITS
 0x0D52

	)

459 
	#GL_GREEN_BITS
 0x0D53

	)

460 
	#GL_BLUE_BITS
 0x0D54

	)

461 
	#GL_INDEX_BITS
 0x0D51

	)

462 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

463 
	#GL_AUX_BUFFERS
 0x0C00

	)

464 
	#GL_READ_BUFFER
 0x0C02

	)

465 
	#GL_DRAW_BUFFER
 0x0C01

	)

466 
	#GL_DOUBLEBUFFER
 0x0C32

	)

467 
	#GL_STEREO
 0x0C33

	)

468 
	#GL_BITMAP
 0x1A00

	)

469 
	#GL_COLOR
 0x1800

	)

470 
	#GL_DEPTH
 0x1801

	)

471 
	#GL_STENCIL
 0x1802

	)

472 
	#GL_DITHER
 0x0BD0

	)

473 
	#GL_RGB
 0x1907

	)

474 
	#GL_RGBA
 0x1908

	)

477 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

478 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

479 
	#GL_MAX_LIGHTS
 0x0D31

	)

480 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

481 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

482 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

483 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

484 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

485 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

486 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

487 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

488 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

489 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

492 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

493 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

494 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

495 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

496 
	#GL_CURRENT_INDEX
 0x0B01

	)

497 
	#GL_CURRENT_COLOR
 0x0B00

	)

498 
	#GL_CURRENT_NORMAL
 0x0B02

	)

499 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

500 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

501 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

502 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

503 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

504 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

505 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

506 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

507 
	#GL_INDEX_MODE
 0x0C30

	)

508 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

509 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

510 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

511 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

512 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

513 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

514 
	#GL_RENDER_MODE
 0x0C40

	)

515 
	#GL_RGBA_MODE
 0x0C31

	)

516 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

517 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

518 
	#GL_VIEWPORT
 0x0BA2

	)

521 
	#GL_AUTO_NORMAL
 0x0D80

	)

522 
	#GL_MAP1_COLOR_4
 0x0D90

	)

523 
	#GL_MAP1_INDEX
 0x0D91

	)

524 
	#GL_MAP1_NORMAL
 0x0D92

	)

525 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

526 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

527 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

528 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

529 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

530 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

531 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

532 
	#GL_MAP2_INDEX
 0x0DB1

	)

533 
	#GL_MAP2_NORMAL
 0x0DB2

	)

534 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

535 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

536 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

537 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

538 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

539 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

540 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

541 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

542 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

543 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

544 
	#GL_COEFF
 0x0A00

	)

545 
	#GL_ORDER
 0x0A01

	)

546 
	#GL_DOMAIN
 0x0A02

	)

549 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

550 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

551 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

552 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

553 
	#GL_FOG_HINT
 0x0C54

	)

554 
	#GL_DONT_CARE
 0x1100

	)

555 
	#GL_FASTEST
 0x1101

	)

556 
	#GL_NICEST
 0x1102

	)

559 
	#GL_SCISSOR_BOX
 0x0C10

	)

560 
	#GL_SCISSOR_TEST
 0x0C11

	)

563 
	#GL_MAP_COLOR
 0x0D10

	)

564 
	#GL_MAP_STENCIL
 0x0D11

	)

565 
	#GL_INDEX_SHIFT
 0x0D12

	)

566 
	#GL_INDEX_OFFSET
 0x0D13

	)

567 
	#GL_RED_SCALE
 0x0D14

	)

568 
	#GL_RED_BIAS
 0x0D15

	)

569 
	#GL_GREEN_SCALE
 0x0D18

	)

570 
	#GL_GREEN_BIAS
 0x0D19

	)

571 
	#GL_BLUE_SCALE
 0x0D1A

	)

572 
	#GL_BLUE_BIAS
 0x0D1B

	)

573 
	#GL_ALPHA_SCALE
 0x0D1C

	)

574 
	#GL_ALPHA_BIAS
 0x0D1D

	)

575 
	#GL_DEPTH_SCALE
 0x0D1E

	)

576 
	#GL_DEPTH_BIAS
 0x0D1F

	)

577 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

578 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

579 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

580 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

581 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

582 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

583 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

584 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

585 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

586 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

587 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

588 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

589 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

590 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

591 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

592 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

593 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

594 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

595 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

596 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

597 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

598 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

599 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

600 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

601 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

602 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

603 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

604 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

605 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

606 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

607 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

608 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

609 
	#GL_ZOOM_X
 0x0D16

	)

610 
	#GL_ZOOM_Y
 0x0D17

	)

613 
	#GL_TEXTURE_ENV
 0x2300

	)

614 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

615 
	#GL_TEXTURE_1D
 0x0DE0

	)

616 
	#GL_TEXTURE_2D
 0x0DE1

	)

617 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

618 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

619 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

620 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

621 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

622 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

623 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

624 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

625 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

626 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

627 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

628 
	#GL_TEXTURE_WIDTH
 0x1000

	)

629 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

630 
	#GL_TEXTURE_BORDER
 0x1005

	)

631 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

632 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

633 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

634 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

635 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

636 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

637 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

638 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

639 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

640 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

641 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

642 
	#GL_OBJECT_LINEAR
 0x2401

	)

643 
	#GL_OBJECT_PLANE
 0x2501

	)

644 
	#GL_EYE_LINEAR
 0x2400

	)

645 
	#GL_EYE_PLANE
 0x2502

	)

646 
	#GL_SPHERE_MAP
 0x2402

	)

647 
	#GL_DECAL
 0x2101

	)

648 
	#GL_MODULATE
 0x2100

	)

649 
	#GL_NEAREST
 0x2600

	)

650 
	#GL_REPEAT
 0x2901

	)

651 
	#GL_CLAMP
 0x2900

	)

652 
	#GL_S
 0x2000

	)

653 
	#GL_T
 0x2001

	)

654 
	#GL_R
 0x2002

	)

655 
	#GL_Q
 0x2003

	)

658 
	#GL_VENDOR
 0x1F00

	)

659 
	#GL_RENDERER
 0x1F01

	)

660 
	#GL_VERSION
 0x1F02

	)

661 
	#GL_EXTENSIONS
 0x1F03

	)

664 
	#GL_NO_ERROR
 0

	)

665 
	#GL_INVALID_ENUM
 0x0500

	)

666 
	#GL_INVALID_VALUE
 0x0501

	)

667 
	#GL_INVALID_OPERATION
 0x0502

	)

668 
	#GL_STACK_OVERFLOW
 0x0503

	)

669 
	#GL_STACK_UNDERFLOW
 0x0504

	)

670 
	#GL_OUT_OF_MEMORY
 0x0505

	)

673 
	#GL_CURRENT_BIT
 0x00000001

	)

674 
	#GL_POINT_BIT
 0x00000002

	)

675 
	#GL_LINE_BIT
 0x00000004

	)

676 
	#GL_POLYGON_BIT
 0x00000008

	)

677 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

678 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

679 
	#GL_LIGHTING_BIT
 0x00000040

	)

680 
	#GL_FOG_BIT
 0x00000080

	)

681 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

682 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

683 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

684 
	#GL_VIEWPORT_BIT
 0x00000800

	)

685 
	#GL_TRANSFORM_BIT
 0x00001000

	)

686 
	#GL_ENABLE_BIT
 0x00002000

	)

687 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

688 
	#GL_HINT_BIT
 0x00008000

	)

689 
	#GL_EVAL_BIT
 0x00010000

	)

690 
	#GL_LIST_BIT
 0x00020000

	)

691 
	#GL_TEXTURE_BIT
 0x00040000

	)

692 
	#GL_SCISSOR_BIT
 0x00080000

	)

693 
	#GL_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

697 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

698 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

699 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

700 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

701 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

702 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

703 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

704 
	#GL_ALPHA4
 0x803B

	)

705 
	#GL_ALPHA8
 0x803C

	)

706 
	#GL_ALPHA12
 0x803D

	)

707 
	#GL_ALPHA16
 0x803E

	)

708 
	#GL_LUMINANCE4
 0x803F

	)

709 
	#GL_LUMINANCE8
 0x8040

	)

710 
	#GL_LUMINANCE12
 0x8041

	)

711 
	#GL_LUMINANCE16
 0x8042

	)

712 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

713 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

714 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

715 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

716 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

717 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

718 
	#GL_INTENSITY
 0x8049

	)

719 
	#GL_INTENSITY4
 0x804A

	)

720 
	#GL_INTENSITY8
 0x804B

	)

721 
	#GL_INTENSITY12
 0x804C

	)

722 
	#GL_INTENSITY16
 0x804D

	)

723 
	#GL_R3_G3_B2
 0x2A10

	)

724 
	#GL_RGB4
 0x804F

	)

725 
	#GL_RGB5
 0x8050

	)

726 
	#GL_RGB8
 0x8051

	)

727 
	#GL_RGB10
 0x8052

	)

728 
	#GL_RGB12
 0x8053

	)

729 
	#GL_RGB16
 0x8054

	)

730 
	#GL_RGBA2
 0x8055

	)

731 
	#GL_RGBA4
 0x8056

	)

732 
	#GL_RGB5_A1
 0x8057

	)

733 
	#GL_RGBA8
 0x8058

	)

734 
	#GL_RGB10_A2
 0x8059

	)

735 
	#GL_RGBA12
 0x805A

	)

736 
	#GL_RGBA16
 0x805B

	)

737 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

738 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

739 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

740 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

748 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

750 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

752 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

754 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

756 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

758 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

760 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

762 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

764 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

766 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

768 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

770 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

772 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

774 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

776 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

778 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

780 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

784 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

786 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

788 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

790 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

792 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

798 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

800 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

803 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

805 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

810 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

812 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

814 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

817 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

819 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

822 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

824 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

827 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

829 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

831 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

833 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

835 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

837 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

844 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

846 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

848 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

850 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

857 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

859 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

866 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

868 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

869 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

870 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

872 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

873 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

874 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

876 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

877 
GLsizei
 
width
, GLsizeò
height
 );

879 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

881 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

883 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

885 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

886 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

888 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

889 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

891 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

892 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

893 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

894 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

896 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

897 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

899 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

900 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

907 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

909 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

911 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

913 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

915 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

917 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

919 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

920 c⁄° 
GLvoid
 *
li°s
 );

922 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

929 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

931 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

934 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

935 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

936 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

937 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

939 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

940 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

941 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

942 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

944 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

945 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

946 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

947 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

949 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

950 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

951 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

952 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

954 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

955 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

956 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

957 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

959 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

960 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

961 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

965 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

966 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

967 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

968 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

969 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

971 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

972 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

973 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

974 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

975 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

979 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

980 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

981 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

982 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

984 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

985 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

986 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

987 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

988 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

990 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

991 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

992 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

993 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

994 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

995 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

996 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

997 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

999 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1000 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1001 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1002 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1003 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1004 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1005 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1006 
GLöt
 
blue
, GLöà
Æpha
 );

1007 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1008 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1009 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1010 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1011 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1012 
GLuöt
 
blue
, GLuöà
Æpha
 );

1013 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1014 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1017 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1026 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1032 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1036 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1037 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1038 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1039 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1041 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1042 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1043 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1044 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1046 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1047 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1048 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1049 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1051 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1052 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1053 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1054 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1056 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1078 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1079 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1080 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1082 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1083 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1084 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1085 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1087 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1088 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1089 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1090 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1092 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1109 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1114 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1124 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1125 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1127 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1128 c⁄° 
GLvoid
 *
±r
 );

1130 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1131 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1133 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1134 c⁄° 
GLvoid
 *
±r
 );

1136 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1137 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1139 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1141 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1143 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1145 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1147 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1148 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1150 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1151 c⁄° 
GLvoid
 *
poöãr
 );

1157 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1159 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1160 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1161 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1162 c⁄° 
GLÊﬂt
 *
∑øms
 );

1163 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1164 c⁄° 
GLöt
 *
∑øms
 );

1166 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1167 
GLÊﬂt
 *
∑øms
 );

1168 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1169 
GLöt
 *
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1172 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1173 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1174 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1176 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1177 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1178 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1179 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1181 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1182 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1184 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1191 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1193 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1194 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1196 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1197 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1199 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1200 c⁄° 
GLÊﬂt
 *
vÆues
 );

1201 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1202 c⁄° 
GLuöt
 *
vÆues
 );

1203 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1204 c⁄° 
GLush‹t
 *
vÆues
 );

1206 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1207 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1208 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1210 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1211 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1212 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1213 c⁄° 
GLubyã
 *
bôm≠
 );

1215 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1216 
GLsizei
 
width
, GLsizeò
height
,

1217 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1218 
GLvoid
 *
pixñs
 );

1220 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1221 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1222 c⁄° 
GLvoid
 *
pixñs
 );

1224 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1225 
GLsizei
 
width
, GLsizeò
height
,

1226 
GLíum
 
ty≥
 );

1232 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1234 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1236 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1238 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1246 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1247 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1248 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1250 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1251 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1252 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1254 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1255 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1256 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1259 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1260 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1262 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1263 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1265 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1266 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1269 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1270 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1272 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1273 c⁄° 
GLÊﬂt
 *
∑øms
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1275 c⁄° 
GLöt
 *
∑øms
 );

1277 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1278 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1279 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1280 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1283 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1285 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1289 
GLöt
 
öã∫ÆF‹m©
,

1290 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1291 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1292 c⁄° 
GLvoid
 *
pixñs
 );

1294 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1295 
GLöt
 
öã∫ÆF‹m©
,

1296 
GLsizei
 
width
, GLsizeò
height
,

1297 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1298 c⁄° 
GLvoid
 *
pixñs
 );

1300 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1301 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1302 
GLvoid
 *
pixñs
 );

1307 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1309 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1311 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1313 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1314 c⁄° 
GLuöt
 *
ãxtuªs
,

1315 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1317 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1318 c⁄° 
GLuöt
 *
ãxtuªs
,

1319 
GLboﬁón
 *
ªsidí˚s
 );

1321 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1324 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1325 
GLöt
 
xoff£t
,

1326 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1327 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1330 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1331 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1332 
GLsizei
 
width
, GLsizeò
height
,

1333 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1334 c⁄° 
GLvoid
 *
pixñs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1338 
GLíum
 
öã∫Æf‹m©
,

1339 
GLöt
 
x
, GLöà
y
,

1340 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1343 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1344 
GLíum
 
öã∫Æf‹m©
,

1345 
GLöt
 
x
, GLöà
y
,

1346 
GLsizei
 
width
, GLsizeò
height
,

1347 
GLöt
 
b‹dî
 );

1350 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1351 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1352 
GLsizei
 
width
 );

1355 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1356 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1357 
GLöt
 
x
, GLöà
y
,

1358 
GLsizei
 
width
, GLsizeò
height
 );

1365 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1366 
GLöt
 
°ride
,

1367 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1368 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1369 
GLöt
 
°ride
,

1370 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1372 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1373 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1374 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1375 c⁄° 
GLdoubÀ
 *
poöts
 );

1376 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1377 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1378 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1379 c⁄° 
GLÊﬂt
 *
poöts
 );

1381 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1382 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1383 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1385 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1386 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1388 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1389 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1391 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1392 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1394 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1395 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1397 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1398 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1401 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1402 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1403 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1405 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1407 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1409 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1411 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1418 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1420 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1422 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1424 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1431 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1433 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1435 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1437 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1439 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1441 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1443 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1451 
	#GL_RESCALE_NORMAL
 0x803A

	)

1452 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1453 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1454 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1455 
	#GL_BGR
 0x80E0

	)

1456 
	#GL_BGRA
 0x80E1

	)

1457 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1458 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1459 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1460 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1461 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1462 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1463 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1464 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1465 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1466 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1467 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1468 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1469 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1470 
	#GL_SINGLE_COLOR
 0x81F9

	)

1471 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1472 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1473 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1474 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1475 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1476 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1477 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1478 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1479 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1480 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1481 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1482 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1483 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1484 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1485 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1486 
	#GL_TEXTURE_3D
 0x806F

	)

1487 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1488 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1489 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1490 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1491 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1493 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1494 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1496 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1497 
GLöt
 
öã∫ÆF‹m©
,

1498 
GLsizei
 
width
, GLsizeò
height
,

1499 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1500 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1501 c⁄° 
GLvoid
 *
pixñs
 );

1503 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1504 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1505 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1506 
GLsizei
 
height
, GLsizeò
dïth
,

1507 
GLíum
 
f‹m©
,

1508 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1510 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1511 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1512 
GLöt
 
zoff£t
, GLöà
x
,

1513 
GLöt
 
y
, 
GLsizei
 
width
,

1514 
GLsizei
 
height
 );

1516 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1517 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1518 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1519 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1526 
	#GL_CONSTANT_COLOR
 0x8001

	)

1527 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1528 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1529 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1530 
	#GL_COLOR_TABLE
 0x80D0

	)

1531 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1532 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1533 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1534 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1535 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1536 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1537 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1538 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1539 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1540 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1541 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1542 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1543 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1544 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1545 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1546 
	#GL_CONVOLUTION_1D
 0x8010

	)

1547 
	#GL_CONVOLUTION_2D
 0x8011

	)

1548 
	#GL_SEPARABLE_2D
 0x8012

	)

1549 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1550 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1551 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1552 
	#GL_REDUCE
 0x8016

	)

1553 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1554 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1555 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1556 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1557 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1558 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1559 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1560 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1561 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1562 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1563 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1564 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1565 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1566 
	#GL_CONSTANT_BORDER
 0x8151

	)

1567 
	#GL_REPLICATE_BORDER
 0x8153

	)

1568 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1569 
	#GL_COLOR_MATRIX
 0x80B1

	)

1570 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1571 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1572 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1573 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1574 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1575 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1576 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1577 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1578 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1579 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1580 
	#GL_HISTOGRAM
 0x8024

	)

1581 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1582 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1583 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1584 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1585 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1586 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1587 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1588 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1589 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1590 
	#GL_MINMAX
 0x802E

	)

1591 
	#GL_MINMAX_FORMAT
 0x802F

	)

1592 
	#GL_MINMAX_SINK
 0x8030

	)

1593 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1594 
	#GL_BLEND_EQUATION
 0x8009

	)

1595 
	#GL_MIN
 0x8007

	)

1596 
	#GL_MAX
 0x8008

	)

1597 
	#GL_FUNC_ADD
 0x8006

	)

1598 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1599 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1600 
	#GL_BLEND_COLOR
 0x8005

	)

1603 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1604 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1605 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1607 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1608 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1609 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1610 c⁄° 
GLvoid
 *
d©a
 );

1612 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1613 c⁄° 
GLöt
 *
∑øms
);

1615 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1616 c⁄° 
GLÊﬂt
 *
∑øms
);

1618 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1619 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1621 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1622 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1624 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1625 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1627 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1628 
GLÊﬂt
 *
∑øms
 );

1630 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1631 
GLöt
 *
∑øms
 );

1633 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1635 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1636 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1638 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1639 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1641 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1643 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1644 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1645 
GLvoid
 *
vÆues
 );

1647 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1648 
GLÊﬂt
 *
∑øms
 );

1650 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1651 
GLöt
 *
∑øms
 );

1653 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1654 
GLboﬁón
 
sök
 );

1656 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1659 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1660 
GLvoid
 *
vÆues
 );

1662 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1663 
GLÊﬂt
 *
∑øms
 );

1665 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1666 
GLöt
 *
∑øms
 );

1668 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1669 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1670 c⁄° 
GLvoid
 *
image
 );

1672 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1673 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1674 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1677 
GLÊﬂt
 
∑øms
 );

1679 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1680 c⁄° 
GLÊﬂt
 *
∑øms
 );

1682 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLöt
 
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1686 c⁄° 
GLöt
 *
∑øms
 );

1688 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1689 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1691 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1692 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1693 
GLsizei
 
height
);

1695 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1696 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1698 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1699 
GLÊﬂt
 *
∑øms
 );

1701 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1702 
GLöt
 *
∑øms
 );

1704 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1705 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1706 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1708 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1709 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1719 
	#GL_TEXTURE0
 0x84C0

	)

1720 
	#GL_TEXTURE1
 0x84C1

	)

1721 
	#GL_TEXTURE2
 0x84C2

	)

1722 
	#GL_TEXTURE3
 0x84C3

	)

1723 
	#GL_TEXTURE4
 0x84C4

	)

1724 
	#GL_TEXTURE5
 0x84C5

	)

1725 
	#GL_TEXTURE6
 0x84C6

	)

1726 
	#GL_TEXTURE7
 0x84C7

	)

1727 
	#GL_TEXTURE8
 0x84C8

	)

1728 
	#GL_TEXTURE9
 0x84C9

	)

1729 
	#GL_TEXTURE10
 0x84CA

	)

1730 
	#GL_TEXTURE11
 0x84CB

	)

1731 
	#GL_TEXTURE12
 0x84CC

	)

1732 
	#GL_TEXTURE13
 0x84CD

	)

1733 
	#GL_TEXTURE14
 0x84CE

	)

1734 
	#GL_TEXTURE15
 0x84CF

	)

1735 
	#GL_TEXTURE16
 0x84D0

	)

1736 
	#GL_TEXTURE17
 0x84D1

	)

1737 
	#GL_TEXTURE18
 0x84D2

	)

1738 
	#GL_TEXTURE19
 0x84D3

	)

1739 
	#GL_TEXTURE20
 0x84D4

	)

1740 
	#GL_TEXTURE21
 0x84D5

	)

1741 
	#GL_TEXTURE22
 0x84D6

	)

1742 
	#GL_TEXTURE23
 0x84D7

	)

1743 
	#GL_TEXTURE24
 0x84D8

	)

1744 
	#GL_TEXTURE25
 0x84D9

	)

1745 
	#GL_TEXTURE26
 0x84DA

	)

1746 
	#GL_TEXTURE27
 0x84DB

	)

1747 
	#GL_TEXTURE28
 0x84DC

	)

1748 
	#GL_TEXTURE29
 0x84DD

	)

1749 
	#GL_TEXTURE30
 0x84DE

	)

1750 
	#GL_TEXTURE31
 0x84DF

	)

1751 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1752 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1753 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1755 
	#GL_NORMAL_MAP
 0x8511

	)

1756 
	#GL_REFLECTION_MAP
 0x8512

	)

1757 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1758 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1759 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1760 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1761 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1762 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1763 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1764 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1765 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1766 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1768 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1769 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1770 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1771 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1772 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1773 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1774 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1775 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1776 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1777 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1778 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1780 
	#GL_MULTISAMPLE
 0x809D

	)

1781 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1782 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1783 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1784 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1785 
	#GL_SAMPLES
 0x80A9

	)

1786 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1787 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1788 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1790 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1791 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1792 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1793 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1795 
	#GL_COMBINE
 0x8570

	)

1796 
	#GL_COMBINE_RGB
 0x8571

	)

1797 
	#GL_COMBINE_ALPHA
 0x8572

	)

1798 
	#GL_SOURCE0_RGB
 0x8580

	)

1799 
	#GL_SOURCE1_RGB
 0x8581

	)

1800 
	#GL_SOURCE2_RGB
 0x8582

	)

1801 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1802 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1803 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1804 
	#GL_OPERAND0_RGB
 0x8590

	)

1805 
	#GL_OPERAND1_RGB
 0x8591

	)

1806 
	#GL_OPERAND2_RGB
 0x8592

	)

1807 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1808 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1809 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1810 
	#GL_RGB_SCALE
 0x8573

	)

1811 
	#GL_ADD_SIGNED
 0x8574

	)

1812 
	#GL_INTERPOLATE
 0x8575

	)

1813 
	#GL_SUBTRACT
 0x84E7

	)

1814 
	#GL_CONSTANT
 0x8576

	)

1815 
	#GL_PRIMARY_COLOR
 0x8577

	)

1816 
	#GL_PREVIOUS
 0x8578

	)

1818 
	#GL_DOT3_RGB
 0x86AE

	)

1819 
	#GL_DOT3_RGBA
 0x86AF

	)

1821 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1823 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1825 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1827 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1829 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1831 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1833 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1835 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1837 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1839 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1841 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1843 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1845 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1847 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1849 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1851 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1853 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1855 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1857 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1859 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1861 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1863 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1865 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1867 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1869 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1906 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1908 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1910 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1912 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1914 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1917 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1918 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1919 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1920 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1921 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1922 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1923 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1924 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1925 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1932 #i‚de‡
GL_ARB_mu…ôextuª


1933 
	#GL_ARB_mu…ôextuª
 1

	)

1935 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1936 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1937 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1938 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1939 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1940 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1941 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1942 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1943 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1944 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1945 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1946 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1947 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1948 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1949 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1950 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1951 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1952 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1953 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1954 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1955 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1956 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1957 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1958 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1959 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1960 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1961 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1962 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1963 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1964 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1965 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1966 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1967 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1968 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1969 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1971 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1972 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1973 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

1974 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1975 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

1976 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1977 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

1978 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1979 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

1980 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1981 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1982 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1983 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

1984 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1985 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

1986 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1987 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

1988 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1989 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1990 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1991 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1992 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1993 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

1994 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1995 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1996 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1997 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1998 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1999 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2000 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2001 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2002 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2006 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2007 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2008 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2009 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2010 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2011 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2012 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2013 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2014 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2015 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2016 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2017 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2018 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2019 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2020 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2021 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2022 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2023 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2024 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2025 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2026 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2027 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2028 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2029 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2030 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2031 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2032 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2033 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2034 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2035 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2036 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2037 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2049 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2055 
	~<GL/gÀxt.h
>

2065 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2066 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2068 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2069 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2070 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2071 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2072 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2077 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2078 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2080 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2082 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2083 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2089 #i‚de‡
GL_OES_EGL_image


2090 * 
	tGLeglImageOES
;

2093 #i‚de‡
GL_OES_EGL_image


2094 
	#GL_OES_EGL_image
 1

	)

2095 #ifde‡
GL_GLEXT_PROTOTYPES


2096 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2097 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2099 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2100 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2111 #ifde‡
__˝lu•lus


	@/home/lixing/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/home/lixing/include/GL/glut.h

1 #i‚de‡
__glut_h__


2 
	#__glut_h__


	)

10 #i‡
deföed
(
_WIN32
)

11 #i‚de‡
WIN32_LEAN_AND_MEAN


12 
	#WIN32_LEAN_AND_MEAN
 1

	)

14 
	~<wödows.h
>

17 
	~<GL/gl.h
>

18 
	~<GL/glu.h
>

20 #ifde‡
__˝lu•lus


24 #i‡
deföed
(
_WIN32
)

28 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
GLUT_BUILDING_LIB
Ë&& !deföed(
GLUT_NO_LIB_PRAGMA
)

29 #¥agm®
commít
 (
lib
, "winmm.lib")

32 #ifde‡
GLUT_USE_SGI_OPENGL


33 #¥agm®
commít
 (
lib
, "opengl.lib")

34 #¥agm®
commít
 (
lib
, "glu.lib")

35 #¥agm®
commít
 (
lib
, "glut.lib")

37 #¥agm®
commít
 (
lib
, "opengl32.lib")

38 #¥agm®
commít
 (
lib
, "glu32.lib")

39 #¥agm®
commít
 (
lib
, "glut32.lib")

46 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
GLUT_NO_WARNING_DISABLE
)

47 #¥agm®
w¨nög
 (
dißbÀ
:4244)

48 #¥agm®
w¨nög
 (
dißbÀ
:4305)

72 #i‡!
deföed
(
_MSC_VER
Ë&& !deföed(
__MINGW32__
Ë&& !deföed(
__cde˛
)

74 
	#__cde˛


	)

75 
	#GLUT_DEFINED___CDECL


	)

77 #i‡
deföed
(
_WIN32
Ë&& !deföed(
GLUT_DISABLE_ATEXIT_HACK
)

78 
	~<°dlib.h
>

82 
	#GLUTCALLBACK
 
__cde˛


	)

85 
	#GLUTAPIENTRYV
 
__cde˛


	)

91 #i‡(
_MSC_VER
 >800Ë|| 
deföed
(
__MINGW32__
Ë|| deföed(
_STDCALL_SUPPORTED
Ë|| deföed(
__CYGWIN32__
)

92 
	#GLUTAPIENTRY
 
__°dˇŒ


	)

94 
	#GLUTAPIENTRY


	)

98 #i‡(
deföed
(
BUILD_GLUT32
Ë|| deföed(
GLUT_BUILDING_LIB
)Ë&& !deföed(
GLUT_STATIC
)

99 
	#GLUTAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

100 #ñi‡!
deföed
(
GLUT_STATIC
)

101 
	#GLUTAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

103 
	#GLUTAPI
 

	)

106 #ñi‡
deföed
(
__GNUC__
)

108 
	#GLUTAPIENTRY


	)

109 
	#GLUTAPIENTRYV


	)

110 
	#GLUTCALLBACK


	)

111 
	#GLUTAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

116 
	#GLUTAPIENTRY


	)

117 
	#GLUTAPIENTRYV


	)

118 
	#GLUTCALLBACK


	)

119 
	#GLUTAPI
 

	)

147 #i‚de‡
GLUT_API_VERSION


148 
	#GLUT_API_VERSION
 5

	)

187 #i‚de‡
GLUT_XLIB_IMPLEMENTATION


188 
	#GLUT_XLIB_IMPLEMENTATION
 15

	)

192 
	#GLUT_RGB
 0

	)

193 
	#GLUT_RGBA
 
GLUT_RGB


	)

194 
	#GLUT_INDEX
 1

	)

195 
	#GLUT_SINGLE
 0

	)

196 
	#GLUT_DOUBLE
 2

	)

197 
	#GLUT_ACCUM
 4

	)

198 
	#GLUT_ALPHA
 8

	)

199 
	#GLUT_DEPTH
 16

	)

200 
	#GLUT_STENCIL
 32

	)

201 #i‡(
GLUT_API_VERSION
 >= 2)

202 
	#GLUT_MULTISAMPLE
 128

	)

203 
	#GLUT_STEREO
 256

	)

205 #i‡(
GLUT_API_VERSION
 >= 3)

206 
	#GLUT_LUMINANCE
 512

	)

210 
	#GLUT_LEFT_BUTTON
 0

	)

211 
	#GLUT_MIDDLE_BUTTON
 1

	)

212 
	#GLUT_RIGHT_BUTTON
 2

	)

215 
	#GLUT_DOWN
 0

	)

216 
	#GLUT_UP
 1

	)

218 #i‡(
GLUT_API_VERSION
 >= 2)

220 
	#GLUT_KEY_F1
 1

	)

221 
	#GLUT_KEY_F2
 2

	)

222 
	#GLUT_KEY_F3
 3

	)

223 
	#GLUT_KEY_F4
 4

	)

224 
	#GLUT_KEY_F5
 5

	)

225 
	#GLUT_KEY_F6
 6

	)

226 
	#GLUT_KEY_F7
 7

	)

227 
	#GLUT_KEY_F8
 8

	)

228 
	#GLUT_KEY_F9
 9

	)

229 
	#GLUT_KEY_F10
 10

	)

230 
	#GLUT_KEY_F11
 11

	)

231 
	#GLUT_KEY_F12
 12

	)

233 
	#GLUT_KEY_LEFT
 100

	)

234 
	#GLUT_KEY_UP
 101

	)

235 
	#GLUT_KEY_RIGHT
 102

	)

236 
	#GLUT_KEY_DOWN
 103

	)

237 
	#GLUT_KEY_PAGE_UP
 104

	)

238 
	#GLUT_KEY_PAGE_DOWN
 105

	)

239 
	#GLUT_KEY_HOME
 106

	)

240 
	#GLUT_KEY_END
 107

	)

241 
	#GLUT_KEY_INSERT
 108

	)

245 
	#GLUT_LEFT
 0

	)

246 
	#GLUT_ENTERED
 1

	)

249 
	#GLUT_MENU_NOT_IN_USE
 0

	)

250 
	#GLUT_MENU_IN_USE
 1

	)

253 
	#GLUT_NOT_VISIBLE
 0

	)

254 
	#GLUT_VISIBLE
 1

	)

257 
	#GLUT_HIDDEN
 0

	)

258 
	#GLUT_FULLY_RETAINED
 1

	)

259 
	#GLUT_PARTIALLY_RETAINED
 2

	)

260 
	#GLUT_FULLY_COVERED
 3

	)

263 
	#GLUT_RED
 0

	)

264 
	#GLUT_GREEN
 1

	)

265 
	#GLUT_BLUE
 2

	)

268 
	#GLUT_NORMAL
 0

	)

269 
	#GLUT_OVERLAY
 1

	)

271 #i‡
deföed
(
_WIN32
Ë|| deföed (
GLUT_IMPORT_LIB
)

273 
	#GLUT_STROKE_ROMAN
 ((*)0)

	)

274 
	#GLUT_STROKE_MONO_ROMAN
 ((*)1)

	)

277 
	#GLUT_BITMAP_9_BY_15
 ((*)2)

	)

278 
	#GLUT_BITMAP_8_BY_13
 ((*)3)

	)

279 
	#GLUT_BITMAP_TIMES_ROMAN_10
 ((*)4)

	)

280 
	#GLUT_BITMAP_TIMES_ROMAN_24
 ((*)5)

	)

281 #i‡(
GLUT_API_VERSION
 >= 3)

282 
	#GLUT_BITMAP_HELVETICA_10
 ((*)6)

	)

283 
	#GLUT_BITMAP_HELVETICA_12
 ((*)7)

	)

284 
	#GLUT_BITMAP_HELVETICA_18
 ((*)8)

	)

288 
GLUTAPI
 *
glutSåokeRom™
;

289 
GLUTAPI
 *
glutSåokeM⁄oRom™
;

292 
	#GLUT_STROKE_ROMAN
 (&
glutSåokeRom™
)

	)

293 
	#GLUT_STROKE_MONO_ROMAN
 (&
glutSåokeM⁄oRom™
)

	)

296 
GLUTAPI
 *
glutBôm≠9By15
;

297 
GLUTAPI
 *
glutBôm≠8By13
;

298 
GLUTAPI
 *
glutBôm≠TimesRom™10
;

299 
GLUTAPI
 *
glutBôm≠TimesRom™24
;

300 
GLUTAPI
 *
glutBôm≠Hñvëiˇ10
;

301 
GLUTAPI
 *
glutBôm≠Hñvëiˇ12
;

302 
GLUTAPI
 *
glutBôm≠Hñvëiˇ18
;

305 
	#GLUT_BITMAP_9_BY_15
 (&
glutBôm≠9By15
)

	)

306 
	#GLUT_BITMAP_8_BY_13
 (&
glutBôm≠8By13
)

	)

307 
	#GLUT_BITMAP_TIMES_ROMAN_10
 (&
glutBôm≠TimesRom™10
)

	)

308 
	#GLUT_BITMAP_TIMES_ROMAN_24
 (&
glutBôm≠TimesRom™24
)

	)

309 #i‡(
GLUT_API_VERSION
 >= 3)

310 
	#GLUT_BITMAP_HELVETICA_10
 (&
glutBôm≠Hñvëiˇ10
)

	)

311 
	#GLUT_BITMAP_HELVETICA_12
 (&
glutBôm≠Hñvëiˇ12
)

	)

312 
	#GLUT_BITMAP_HELVETICA_18
 (&
glutBôm≠Hñvëiˇ18
)

	)

317 
	#GLUT_WINDOW_X
 100

	)

318 
	#GLUT_WINDOW_Y
 101

	)

319 
	#GLUT_WINDOW_WIDTH
 102

	)

320 
	#GLUT_WINDOW_HEIGHT
 103

	)

321 
	#GLUT_WINDOW_BUFFER_SIZE
 104

	)

322 
	#GLUT_WINDOW_STENCIL_SIZE
 105

	)

323 
	#GLUT_WINDOW_DEPTH_SIZE
 106

	)

324 
	#GLUT_WINDOW_RED_SIZE
 107

	)

325 
	#GLUT_WINDOW_GREEN_SIZE
 108

	)

326 
	#GLUT_WINDOW_BLUE_SIZE
 109

	)

327 
	#GLUT_WINDOW_ALPHA_SIZE
 110

	)

328 
	#GLUT_WINDOW_ACCUM_RED_SIZE
 111

	)

329 
	#GLUT_WINDOW_ACCUM_GREEN_SIZE
 112

	)

330 
	#GLUT_WINDOW_ACCUM_BLUE_SIZE
 113

	)

331 
	#GLUT_WINDOW_ACCUM_ALPHA_SIZE
 114

	)

332 
	#GLUT_WINDOW_DOUBLEBUFFER
 115

	)

333 
	#GLUT_WINDOW_RGBA
 116

	)

334 
	#GLUT_WINDOW_PARENT
 117

	)

335 
	#GLUT_WINDOW_NUM_CHILDREN
 118

	)

336 
	#GLUT_WINDOW_COLORMAP_SIZE
 119

	)

337 #i‡(
GLUT_API_VERSION
 >= 2)

338 
	#GLUT_WINDOW_NUM_SAMPLES
 120

	)

339 
	#GLUT_WINDOW_STEREO
 121

	)

341 #i‡(
GLUT_API_VERSION
 >= 3)

342 
	#GLUT_WINDOW_CURSOR
 122

	)

344 
	#GLUT_SCREEN_WIDTH
 200

	)

345 
	#GLUT_SCREEN_HEIGHT
 201

	)

346 
	#GLUT_SCREEN_WIDTH_MM
 202

	)

347 
	#GLUT_SCREEN_HEIGHT_MM
 203

	)

348 
	#GLUT_MENU_NUM_ITEMS
 300

	)

349 
	#GLUT_DISPLAY_MODE_POSSIBLE
 400

	)

350 
	#GLUT_INIT_WINDOW_X
 500

	)

351 
	#GLUT_INIT_WINDOW_Y
 501

	)

352 
	#GLUT_INIT_WINDOW_WIDTH
 502

	)

353 
	#GLUT_INIT_WINDOW_HEIGHT
 503

	)

354 
	#GLUT_INIT_DISPLAY_MODE
 504

	)

355 #i‡(
GLUT_API_VERSION
 >= 2)

356 
	#GLUT_ELAPSED_TIME
 700

	)

358 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 13)

359 
	#GLUT_WINDOW_FORMAT_ID
 123

	)

362 #i‡(
GLUT_API_VERSION
 >= 2)

364 
	#GLUT_HAS_KEYBOARD
 600

	)

365 
	#GLUT_HAS_MOUSE
 601

	)

366 
	#GLUT_HAS_SPACEBALL
 602

	)

367 
	#GLUT_HAS_DIAL_AND_BUTTON_BOX
 603

	)

368 
	#GLUT_HAS_TABLET
 604

	)

369 
	#GLUT_NUM_MOUSE_BUTTONS
 605

	)

370 
	#GLUT_NUM_SPACEBALL_BUTTONS
 606

	)

371 
	#GLUT_NUM_BUTTON_BOX_BUTTONS
 607

	)

372 
	#GLUT_NUM_DIALS
 608

	)

373 
	#GLUT_NUM_TABLET_BUTTONS
 609

	)

375 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 13)

376 
	#GLUT_DEVICE_IGNORE_KEY_REPEAT
 610

	)

377 
	#GLUT_DEVICE_KEY_REPEAT
 611

	)

378 
	#GLUT_HAS_JOYSTICK
 612

	)

379 
	#GLUT_OWNS_JOYSTICK
 613

	)

380 
	#GLUT_JOYSTICK_BUTTONS
 614

	)

381 
	#GLUT_JOYSTICK_AXES
 615

	)

382 
	#GLUT_JOYSTICK_POLL_RATE
 616

	)

385 #i‡(
GLUT_API_VERSION
 >= 3)

387 
	#GLUT_OVERLAY_POSSIBLE
 800

	)

388 
	#GLUT_LAYER_IN_USE
 801

	)

389 
	#GLUT_HAS_OVERLAY
 802

	)

390 
	#GLUT_TRANSPARENT_INDEX
 803

	)

391 
	#GLUT_NORMAL_DAMAGED
 804

	)

392 
	#GLUT_OVERLAY_DAMAGED
 805

	)

394 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

396 
	#GLUT_VIDEO_RESIZE_POSSIBLE
 900

	)

397 
	#GLUT_VIDEO_RESIZE_IN_USE
 901

	)

398 
	#GLUT_VIDEO_RESIZE_X_DELTA
 902

	)

399 
	#GLUT_VIDEO_RESIZE_Y_DELTA
 903

	)

400 
	#GLUT_VIDEO_RESIZE_WIDTH_DELTA
 904

	)

401 
	#GLUT_VIDEO_RESIZE_HEIGHT_DELTA
 905

	)

402 
	#GLUT_VIDEO_RESIZE_X
 906

	)

403 
	#GLUT_VIDEO_RESIZE_Y
 907

	)

404 
	#GLUT_VIDEO_RESIZE_WIDTH
 908

	)

405 
	#GLUT_VIDEO_RESIZE_HEIGHT
 909

	)

409 
	#GLUT_NORMAL
 0

	)

410 
	#GLUT_OVERLAY
 1

	)

413 
	#GLUT_ACTIVE_SHIFT
 1

	)

414 
	#GLUT_ACTIVE_CTRL
 2

	)

415 
	#GLUT_ACTIVE_ALT
 4

	)

419 
	#GLUT_CURSOR_RIGHT_ARROW
 0

	)

420 
	#GLUT_CURSOR_LEFT_ARROW
 1

	)

422 
	#GLUT_CURSOR_INFO
 2

	)

423 
	#GLUT_CURSOR_DESTROY
 3

	)

424 
	#GLUT_CURSOR_HELP
 4

	)

425 
	#GLUT_CURSOR_CYCLE
 5

	)

426 
	#GLUT_CURSOR_SPRAY
 6

	)

427 
	#GLUT_CURSOR_WAIT
 7

	)

428 
	#GLUT_CURSOR_TEXT
 8

	)

429 
	#GLUT_CURSOR_CROSSHAIR
 9

	)

431 
	#GLUT_CURSOR_UP_DOWN
 10

	)

432 
	#GLUT_CURSOR_LEFT_RIGHT
 11

	)

434 
	#GLUT_CURSOR_TOP_SIDE
 12

	)

435 
	#GLUT_CURSOR_BOTTOM_SIDE
 13

	)

436 
	#GLUT_CURSOR_LEFT_SIDE
 14

	)

437 
	#GLUT_CURSOR_RIGHT_SIDE
 15

	)

438 
	#GLUT_CURSOR_TOP_LEFT_CORNER
 16

	)

439 
	#GLUT_CURSOR_TOP_RIGHT_CORNER
 17

	)

440 
	#GLUT_CURSOR_BOTTOM_RIGHT_CORNER
 18

	)

441 
	#GLUT_CURSOR_BOTTOM_LEFT_CORNER
 19

	)

443 
	#GLUT_CURSOR_INHERIT
 100

	)

445 
	#GLUT_CURSOR_NONE
 101

	)

447 
	#GLUT_CURSOR_FULL_CROSSHAIR
 102

	)

451 
GLUTAPI
 
GLUTAPIENTRY
 
glutInô
(*
¨g˝
, **
¨gv
);

452 #i‡
deföed
(
_WIN32
Ë&& !deföed(
GLUT_DISABLE_ATEXIT_HACK
)

453 
GLUTAPI
 
GLUTAPIENTRY
 
__glutInôWôhExô
(*
¨g˝
, **
¨gv
, (
__cde˛
 *
exôfunc
)());

454 #i‚de‡
GLUT_BUILDING_LIB


455 
	#glutInô
(
__¨g˝
, 
__¨gv
Ë
	`__glutInôWôhExô
(__¨g˝, __¨gv, 
exô
)

	)

458 
GLUTAPI
 
GLUTAPIENTRY
 
glutInôDi•œyMode
(
mode
);

459 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

460 
GLUTAPI
 
GLUTAPIENTRY
 
glutInôDi•œySåög
(c⁄° *
°rög
);

462 
GLUTAPI
 
GLUTAPIENTRY
 
glutInôWödowPosôi⁄
(
x
, 
y
);

463 
GLUTAPI
 
GLUTAPIENTRY
 
glutInôWödowSize
(
width
, 
height
);

464 
GLUTAPI
 
GLUTAPIENTRY
 
glutMaöLo›
();

467 
GLUTAPI
 
GLUTAPIENTRY
 
glutCª©eWödow
(c⁄° *
tôÀ
);

468 #i‡
deföed
(
_WIN32
Ë&& !deföed(
GLUT_DISABLE_ATEXIT_HACK
)

469 
GLUTAPI
 
GLUTAPIENTRY
 
__glutCª©eWödowWôhExô
(c⁄° *
tôÀ
, (
__cde˛
 *
exôfunc
)());

470 #i‚de‡
GLUT_BUILDING_LIB


471 
	#glutCª©eWödow
(
__tôÀ
Ë
	`__glutCª©eWödowWôhExô
(__tôÀ, 
exô
)

	)

474 
GLUTAPI
 
GLUTAPIENTRY
 
glutCª©eSubWödow
(
wö
, 
x
, 
y
, 
width
, 
height
);

475 
GLUTAPI
 
GLUTAPIENTRY
 
glutDe°royWödow
(
wö
);

476 
GLUTAPI
 
GLUTAPIENTRY
 
glutPo°Redi•œy
();

477 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 11)

478 
GLUTAPI
 
GLUTAPIENTRY
 
glutPo°WödowRedi•œy
(
wö
);

480 
GLUTAPI
 
GLUTAPIENTRY
 
glutSw≠Buf„rs
();

481 
GLUTAPI
 
GLUTAPIENTRY
 
glutGëWödow
();

482 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëWödow
(
wö
);

483 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëWödowTôÀ
(c⁄° *
tôÀ
);

484 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëIc⁄TôÀ
(c⁄° *
tôÀ
);

485 
GLUTAPI
 
GLUTAPIENTRY
 
glutPosôi⁄Wödow
(
x
, 
y
);

486 
GLUTAPI
 
GLUTAPIENTRY
 
glutResh≠eWödow
(
width
, 
height
);

487 
GLUTAPI
 
GLUTAPIENTRY
 
glutP›Wödow
();

488 
GLUTAPI
 
GLUTAPIENTRY
 
glutPushWödow
();

489 
GLUTAPI
 
GLUTAPIENTRY
 
glutIc⁄ifyWödow
();

490 
GLUTAPI
 
GLUTAPIENTRY
 
glutShowWödow
();

491 
GLUTAPI
 
GLUTAPIENTRY
 
glutHideWödow
();

492 #i‡(
GLUT_API_VERSION
 >= 3)

493 
GLUTAPI
 
GLUTAPIENTRY
 
glutFuŒS¸ìn
();

494 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëCurs‹
(
curs‹
);

495 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

496 
GLUTAPI
 
GLUTAPIENTRY
 
glutW¨pPoöãr
(
x
, 
y
);

500 
GLUTAPI
 
GLUTAPIENTRY
 
glutE°ablishOvîœy
();

501 
GLUTAPI
 
GLUTAPIENTRY
 
glutRemoveOvîœy
();

502 
GLUTAPI
 
GLUTAPIENTRY
 
glutU£Layî
(
GLíum
 
œyî
);

503 
GLUTAPI
 
GLUTAPIENTRY
 
glutPo°OvîœyRedi•œy
();

504 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 11)

505 
GLUTAPI
 
GLUTAPIENTRY
 
glutPo°WödowOvîœyRedi•œy
(
wö
);

507 
GLUTAPI
 
GLUTAPIENTRY
 
glutShowOvîœy
();

508 
GLUTAPI
 
GLUTAPIENTRY
 
glutHideOvîœy
();

512 
GLUTAPI
 
GLUTAPIENTRY
 
glutCª©eMíu
((
GLUTCALLBACK
 *
func
)());

513 #i‡
deföed
(
_WIN32
Ë&& !deföed(
GLUT_DISABLE_ATEXIT_HACK
)

514 
GLUTAPI
 
GLUTAPIENTRY
 
__glutCª©eMíuWôhExô
((
GLUTCALLBACK
 *
func
)(), (
__cde˛
 *
exôfunc
)());

515 #i‚de‡
GLUT_BUILDING_LIB


516 
	#glutCª©eMíu
(
__func
Ë
	`__glutCª©eMíuWôhExô
(__func, 
exô
)

	)

519 
GLUTAPI
 
GLUTAPIENTRY
 
glutDe°royMíu
(
míu
);

520 
GLUTAPI
 
GLUTAPIENTRY
 
glutGëMíu
();

521 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëMíu
(
míu
);

522 
GLUTAPI
 
GLUTAPIENTRY
 
glutAddMíuE¡ry
(c⁄° *
œbñ
, 
vÆue
);

523 
GLUTAPI
 
GLUTAPIENTRY
 
glutAddSubMíu
(c⁄° *
œbñ
, 
submíu
);

524 
GLUTAPI
 
GLUTAPIENTRY
 
glutCh™geToMíuE¡ry
(
ôem
, c⁄° *
œbñ
, 
vÆue
);

525 
GLUTAPI
 
GLUTAPIENTRY
 
glutCh™geToSubMíu
(
ôem
, c⁄° *
œbñ
, 
submíu
);

526 
GLUTAPI
 
GLUTAPIENTRY
 
glutRemoveMíuIãm
(
ôem
);

527 
GLUTAPI
 
GLUTAPIENTRY
 
glutAâachMíu
(
buâ⁄
);

528 
GLUTAPI
 
GLUTAPIENTRY
 
glutDëachMíu
(
buâ⁄
);

531 
GLUTAPI
 
GLUTAPIENTRY
 
glutDi•œyFunc
((
GLUTCALLBACK
 *
func
)());

532 
GLUTAPI
 
GLUTAPIENTRY
 
glutResh≠eFunc
((
GLUTCALLBACK
 *
func
)(
width
, 
height
));

533 
GLUTAPI
 
GLUTAPIENTRY
 
glutKeybﬂrdFunc
((
GLUTCALLBACK
 *
func
)(
key
, 
x
, 
y
));

534 
GLUTAPI
 
GLUTAPIENTRY
 
glutMou£Func
((
GLUTCALLBACK
 *
func
)(
buâ⁄
, 
°©e
, 
x
, 
y
));

535 
GLUTAPI
 
GLUTAPIENTRY
 
glutMŸi⁄Func
((
GLUTCALLBACK
 *
func
)(
x
, 
y
));

536 
GLUTAPI
 
GLUTAPIENTRY
 
glutPassiveMŸi⁄Func
((
GLUTCALLBACK
 *
func
)(
x
, 
y
));

537 
GLUTAPI
 
GLUTAPIENTRY
 
glutE¡ryFunc
((
GLUTCALLBACK
 *
func
)(
°©e
));

538 
GLUTAPI
 
GLUTAPIENTRY
 
glutVisibûôyFunc
((
GLUTCALLBACK
 *
func
)(
°©e
));

539 
GLUTAPI
 
GLUTAPIENTRY
 
glutIdÀFunc
((
GLUTCALLBACK
 *
func
)());

540 
GLUTAPI
 
GLUTAPIENTRY
 
glutTimîFunc
(
mûlis
, (
GLUTCALLBACK
 *
func
)(
vÆue
), value);

541 
GLUTAPI
 
GLUTAPIENTRY
 
glutMíuSèãFunc
((
GLUTCALLBACK
 *
func
)(
°©e
));

542 #i‡(
GLUT_API_VERSION
 >= 2)

543 
GLUTAPI
 
GLUTAPIENTRY
 
glutS≥cülFunc
((
GLUTCALLBACK
 *
func
)(
key
, 
x
, 
y
));

544 
GLUTAPI
 
GLUTAPIENTRY
 
glutS∑˚bÆlMŸi⁄Func
((
GLUTCALLBACK
 *
func
)(
x
, 
y
, 
z
));

545 
GLUTAPI
 
GLUTAPIENTRY
 
glutS∑˚bÆlRŸ©eFunc
((
GLUTCALLBACK
 *
func
)(
x
, 
y
, 
z
));

546 
GLUTAPI
 
GLUTAPIENTRY
 
glutS∑˚bÆlBuâ⁄Func
((
GLUTCALLBACK
 *
func
)(
buâ⁄
, 
°©e
));

547 
GLUTAPI
 
GLUTAPIENTRY
 
glutBuâ⁄BoxFunc
((
GLUTCALLBACK
 *
func
)(
buâ⁄
, 
°©e
));

548 
GLUTAPI
 
GLUTAPIENTRY
 
glutDülsFunc
((
GLUTCALLBACK
 *
func
)(
dül
, 
vÆue
));

549 
GLUTAPI
 
GLUTAPIENTRY
 
glutTabÀtMŸi⁄Func
((
GLUTCALLBACK
 *
func
)(
x
, 
y
));

550 
GLUTAPI
 
GLUTAPIENTRY
 
glutTabÀtBuâ⁄Func
((
GLUTCALLBACK
 *
func
)(
buâ⁄
, 
°©e
, 
x
, 
y
));

551 #i‡(
GLUT_API_VERSION
 >= 3)

552 
GLUTAPI
 
GLUTAPIENTRY
 
glutMíuSètusFunc
((
GLUTCALLBACK
 *
func
)(
°©us
, 
x
, 
y
));

553 
GLUTAPI
 
GLUTAPIENTRY
 
glutOvîœyDi•œyFunc
((
GLUTCALLBACK
 *
func
)());

554 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

555 
GLUTAPI
 
GLUTAPIENTRY
 
glutWödowSètusFunc
((
GLUTCALLBACK
 *
func
)(
°©e
));

557 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 13)

558 
GLUTAPI
 
GLUTAPIENTRY
 
glutKeybﬂrdUpFunc
((
GLUTCALLBACK
 *
func
)(
key
, 
x
, 
y
));

559 
GLUTAPI
 
GLUTAPIENTRY
 
glutS≥cülUpFunc
((
GLUTCALLBACK
 *
func
)(
key
, 
x
, 
y
));

560 
GLUTAPI
 
GLUTAPIENTRY
 
glutJoy°ickFunc
((
GLUTCALLBACK
 *
func
)(
buâ⁄Mask
, 
x
, 
y
, 
z
), 
pﬁlI¡îvÆ
);

566 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëCﬁ‹
(
ndx
, 
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

567 
GLUTAPI
 
GLÊﬂt
 
GLUTAPIENTRY
 
glutGëCﬁ‹
(
ndx
, 
comp⁄ít
);

568 
GLUTAPI
 
GLUTAPIENTRY
 
glutC›yCﬁ‹m≠
(
wö
);

571 
GLUTAPI
 
GLUTAPIENTRY
 
glutGë
(
GLíum
 
ty≥
);

572 
GLUTAPI
 
GLUTAPIENTRY
 
glutDevi˚Gë
(
GLíum
 
ty≥
);

573 #i‡(
GLUT_API_VERSION
 >= 2)

575 
GLUTAPI
 
GLUTAPIENTRY
 
glutExãnsi⁄Suµ‹ãd
(c⁄° *
«me
);

577 #i‡(
GLUT_API_VERSION
 >= 3)

578 
GLUTAPI
 
GLUTAPIENTRY
 
glutGëModifõrs
();

579 
GLUTAPI
 
GLUTAPIENTRY
 
glutLayîGë
(
GLíum
 
ty≥
);

581 #i‡(
GLUT_API_VERSION
 >= 5)

582 (*
GLUT¥oc
)();

583 
GLUTAPI
 
GLUT¥oc
 
GLUTAPIENTRY
 
glutGëProcAddªss
(c⁄° *
¥ocName
);

587 
GLUTAPI
 
GLUTAPIENTRY
 
glutBôm≠Ch¨a˘î
(*
f⁄t
, 
ch¨a˘î
);

588 
GLUTAPI
 
GLUTAPIENTRY
 
glutBôm≠Width
(*
f⁄t
, 
ch¨a˘î
);

589 
GLUTAPI
 
GLUTAPIENTRY
 
glutSåokeCh¨a˘î
(*
f⁄t
, 
ch¨a˘î
);

590 
GLUTAPI
 
GLUTAPIENTRY
 
glutSåokeWidth
(*
f⁄t
, 
ch¨a˘î
);

591 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

592 
GLUTAPI
 
GLUTAPIENTRY
 
glutBôm≠Lígth
(*
f⁄t
, c⁄° *
°rög
);

593 
GLUTAPI
 
GLUTAPIENTRY
 
glutSåokeLígth
(*
f⁄t
, c⁄° *
°rög
);

597 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeSphîe
(
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

598 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidSphîe
(
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

599 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeC⁄e
(
GLdoubÀ
 
ba£
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

600 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidC⁄e
(
GLdoubÀ
 
ba£
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

601 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeCube
(
GLdoubÀ
 
size
);

602 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidCube
(
GLdoubÀ
 
size
);

603 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeT‹us
(
GLdoubÀ
 
ö√rRadius
, GLdoubÀ 
ouãrRadius
, 
GLöt
 
sides
, GLöà
rögs
);

604 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidT‹us
(
GLdoubÀ
 
ö√rRadius
, GLdoubÀ 
ouãrRadius
, 
GLöt
 
sides
, GLöà
rögs
);

605 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeDodeˇhedr⁄
();

606 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidDodeˇhedr⁄
();

607 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeTópŸ
(
GLdoubÀ
 
size
);

608 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidTópŸ
(
GLdoubÀ
 
size
);

609 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeO˘ahedr⁄
();

610 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidO˘ahedr⁄
();

611 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeTëøhedr⁄
();

612 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidTëøhedr⁄
();

613 
GLUTAPI
 
GLUTAPIENTRY
 
glutWúeIcoßhedr⁄
();

614 
GLUTAPI
 
GLUTAPIENTRY
 
glutSﬁidIcoßhedr⁄
();

616 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 9)

618 
GLUTAPI
 
GLUTAPIENTRY
 
glutVideoResizeGë
(
GLíum
 
∑øm
);

619 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëupVideoResizög
();

620 
GLUTAPI
 
GLUTAPIENTRY
 
glutSt›VideoResizög
();

621 
GLUTAPI
 
GLUTAPIENTRY
 
glutVideoResize
(
x
, 
y
, 
width
, 
height
);

622 
GLUTAPI
 
GLUTAPIENTRY
 
glutVideoP™
(
x
, 
y
, 
width
, 
height
);

625 
GLUTAPI
 
GLUTAPIENTRY
 
glutRï‹tEº‹s
();

628 #i‡(
GLUT_API_VERSION
 >4 || 
GLUT_XLIB_IMPLEMENTATION
 >= 13)

631 
	#GLUT_KEY_REPEAT_OFF
 0

	)

632 
	#GLUT_KEY_REPEAT_ON
 1

	)

633 
	#GLUT_KEY_REPEAT_DEFAULT
 2

	)

636 
	#GLUT_JOYSTICK_BUTTON_A
 1

	)

637 
	#GLUT_JOYSTICK_BUTTON_B
 2

	)

638 
	#GLUT_JOYSTICK_BUTTON_C
 4

	)

639 
	#GLUT_JOYSTICK_BUTTON_D
 8

	)

641 
GLUTAPI
 
GLUTAPIENTRY
 
glutIgn‹eKeyRïót
(
ign‹e
);

642 
GLUTAPI
 
GLUTAPIENTRY
 
glutSëKeyRïót
(
ª≥©Mode
);

643 
GLUTAPI
 
GLUTAPIENTRY
 
glutF‹˚Joy°ickFunc
();

647 
	#GLUT_GAME_MODE_ACTIVE
 0

	)

648 
	#GLUT_GAME_MODE_POSSIBLE
 1

	)

649 
	#GLUT_GAME_MODE_WIDTH
 2

	)

650 
	#GLUT_GAME_MODE_HEIGHT
 3

	)

651 
	#GLUT_GAME_MODE_PIXEL_DEPTH
 4

	)

652 
	#GLUT_GAME_MODE_REFRESH_RATE
 5

	)

653 
	#GLUT_GAME_MODE_DISPLAY_CHANGED
 6

	)

655 
GLUTAPI
 
GLUTAPIENTRY
 
glutGameModeSåög
(c⁄° *
°rög
);

656 
GLUTAPI
 
GLUTAPIENTRY
 
glutE¡îGameMode
();

657 
GLUTAPI
 
GLUTAPIENTRY
 
glutLóveGameMode
();

658 
GLUTAPI
 
GLUTAPIENTRY
 
glutGameModeGë
(
GLíum
 
mode
);

661 #ifde‡
__˝lu•lus


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

69 
__löe
, c⁄° *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

74 
__löe
, c⁄° *
__fun˘i⁄
)

75 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

80 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

81 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_DECLS


86 
	#as£π
(
ex¥
) \

87 ((
ex¥
) \

88 ? 
	`__ASSERT_VOID_CAST
 (0) \

89 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

91 #ifdef 
__USE_GNU


92 
	#as£π_≥º‹
(
î∫um
) \

93 (!(
î∫um
) \

94 ? 
	`__ASSERT_VOID_CAST
 (0) \

95 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

103 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

104 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

106 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

107 
	#__ASSERT_FUNCTION
 
__func__


	)

109 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

116 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


118 #unde‡
°©ic_as£π


119 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/f˙é.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 #i‚de‡
__off_t_deföed


43 #i‚de‡
__USE_FILE_OFFSET64


44 
__off_t
 
	toff_t
;

46 
__off64_t
 
	toff_t
;

48 
	#__off_t_deföed


	)

51 #i‚de‡
__pid_t_deföed


52 
__pid_t
 
	tpid_t
;

53 
	#__pid_t_deföed


	)

58 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


59 
	~<bôs/ty≥s.h
>

60 
	#__√ed_time•ec


	)

61 
	~<time.h
>

62 
	~<bôs/°©.h
>

64 
	#S_IFMT
 
__S_IFMT


	)

65 
	#S_IFDIR
 
__S_IFDIR


	)

66 
	#S_IFCHR
 
__S_IFCHR


	)

67 
	#S_IFBLK
 
__S_IFBLK


	)

68 
	#S_IFREG
 
__S_IFREG


	)

69 #ifde‡
__S_IFIFO


70 
	#S_IFIFO
 
__S_IFIFO


	)

72 #ifde‡
__S_IFLNK


73 
	#S_IFLNK
 
__S_IFLNK


	)

75 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


76 
	#S_IFSOCK
 
__S_IFSOCK


	)

81 
	#S_ISUID
 
__S_ISUID


	)

82 
	#S_ISGID
 
__S_ISGID


	)

84 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


86 
	#S_ISVTX
 
__S_ISVTX


	)

89 
	#S_IRUSR
 
__S_IREAD


	)

90 
	#S_IWUSR
 
__S_IWRITE


	)

91 
	#S_IXUSR
 
__S_IEXEC


	)

93 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

95 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

96 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

97 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

99 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

101 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

102 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

103 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

105 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

108 #ifdef 
__USE_MISC


109 #i‚de‡
R_OK


112 
	#R_OK
 4

	)

113 
	#W_OK
 2

	)

114 
	#X_OK
 1

	)

115 
	#F_OK
 0

	)

120 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #ifde‡
__USE_ATFILE


127 
	#AT_FDCWD
 -100

	)

130 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

131 
	#AT_REMOVEDIR
 0x200

	)

133 
	#AT_SYMLINK_FOLLOW
 0x400

	)

134 #ifde‡
__USE_GNU


135 
	#AT_NO_AUTOMOUNT
 0x800

	)

137 
	#AT_EMPTY_PATH
 0x1000

	)

139 
	#AT_EACCESS
 0x200

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
__mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

46 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


48 #i‡
__WORDSIZE
 == 64

49 
	#__PRI64_PREFIX
 "l"

	)

50 
	#__PRIPTR_PREFIX
 "l"

	)

52 
	#__PRI64_PREFIX
 "Œ"

	)

53 
	#__PRIPTR_PREFIX


	)

59 
	#PRId8
 "d"

	)

60 
	#PRId16
 "d"

	)

61 
	#PRId32
 "d"

	)

62 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdLEAST8
 "d"

	)

65 
	#PRIdLEAST16
 "d"

	)

66 
	#PRIdLEAST32
 "d"

	)

67 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

69 
	#PRIdFAST8
 "d"

	)

70 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

71 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

75 
	#PRIi8
 "i"

	)

76 
	#PRIi16
 "i"

	)

77 
	#PRIi32
 "i"

	)

78 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiLEAST8
 "i"

	)

81 
	#PRIiLEAST16
 "i"

	)

82 
	#PRIiLEAST32
 "i"

	)

83 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

85 
	#PRIiFAST8
 "i"

	)

86 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

87 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

91 
	#PRIo8
 "o"

	)

92 
	#PRIo16
 "o"

	)

93 
	#PRIo32
 "o"

	)

94 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoLEAST8
 "o"

	)

97 
	#PRIoLEAST16
 "o"

	)

98 
	#PRIoLEAST32
 "o"

	)

99 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

101 
	#PRIoFAST8
 "o"

	)

102 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

103 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

107 
	#PRIu8
 "u"

	)

108 
	#PRIu16
 "u"

	)

109 
	#PRIu32
 "u"

	)

110 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuLEAST8
 "u"

	)

113 
	#PRIuLEAST16
 "u"

	)

114 
	#PRIuLEAST32
 "u"

	)

115 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

117 
	#PRIuFAST8
 "u"

	)

118 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

119 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

123 
	#PRIx8
 "x"

	)

124 
	#PRIx16
 "x"

	)

125 
	#PRIx32
 "x"

	)

126 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxLEAST8
 "x"

	)

129 
	#PRIxLEAST16
 "x"

	)

130 
	#PRIxLEAST32
 "x"

	)

131 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

133 
	#PRIxFAST8
 "x"

	)

134 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

135 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

139 
	#PRIX8
 "X"

	)

140 
	#PRIX16
 "X"

	)

141 
	#PRIX32
 "X"

	)

142 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXLEAST8
 "X"

	)

145 
	#PRIXLEAST16
 "X"

	)

146 
	#PRIXLEAST32
 "X"

	)

147 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

149 
	#PRIXFAST8
 "X"

	)

150 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

151 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

156 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

157 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

158 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

159 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

160 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

161 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

165 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

166 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

167 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

168 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

169 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

170 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

176 
	#SCNd8
 "hhd"

	)

177 
	#SCNd16
 "hd"

	)

178 
	#SCNd32
 "d"

	)

179 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdLEAST8
 "hhd"

	)

182 
	#SCNdLEAST16
 "hd"

	)

183 
	#SCNdLEAST32
 "d"

	)

184 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

186 
	#SCNdFAST8
 "hhd"

	)

187 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

188 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

192 
	#SCNi8
 "hhi"

	)

193 
	#SCNi16
 "hi"

	)

194 
	#SCNi32
 "i"

	)

195 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiLEAST8
 "hhi"

	)

198 
	#SCNiLEAST16
 "hi"

	)

199 
	#SCNiLEAST32
 "i"

	)

200 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

202 
	#SCNiFAST8
 "hhi"

	)

203 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

204 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

208 
	#SCNu8
 "hhu"

	)

209 
	#SCNu16
 "hu"

	)

210 
	#SCNu32
 "u"

	)

211 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuLEAST8
 "hhu"

	)

214 
	#SCNuLEAST16
 "hu"

	)

215 
	#SCNuLEAST32
 "u"

	)

216 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

218 
	#SCNuFAST8
 "hhu"

	)

219 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

220 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

224 
	#SCNo8
 "hho"

	)

225 
	#SCNo16
 "ho"

	)

226 
	#SCNo32
 "o"

	)

227 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoLEAST8
 "hho"

	)

230 
	#SCNoLEAST16
 "ho"

	)

231 
	#SCNoLEAST32
 "o"

	)

232 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

234 
	#SCNoFAST8
 "hho"

	)

235 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

236 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

240 
	#SCNx8
 "hhx"

	)

241 
	#SCNx16
 "hx"

	)

242 
	#SCNx32
 "x"

	)

243 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxLEAST8
 "hhx"

	)

246 
	#SCNxLEAST16
 "hx"

	)

247 
	#SCNxLEAST32
 "x"

	)

248 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

250 
	#SCNxFAST8
 "hhx"

	)

251 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

252 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

257 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

258 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

259 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

260 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

261 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

264 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

265 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

266 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

267 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

268 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

273 
	g__BEGIN_DECLS


275 #i‡
__WORDSIZE
 == 64

280 
	mquŸ
;

281 
	mªm
;

282 } 
	timaxdiv_t
;

289 
	mquŸ
;

290 
	mªm
;

291 } 
	timaxdiv_t
;

297 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

300 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

301 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

304 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

308 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

309 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

312 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

313 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

314 
__THROW
;

317 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

318 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

319 
__THROW
;

321 #ifde‡
__USE_EXTERN_INLINES


323 #i‡
__WORDSIZE
 == 64

325 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

326 **
__ª°ri˘
 
__íd±r
,

327 
__ba£
, 
__group
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

330 
__exã∫_ölöe
 
ötmax_t


331 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

332 
ba£
))

334  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

335 
	}
}

337 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 ** 
__ª°ri˘
 
__íd±r
,

339 
__ba£
, 
__group
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

342 
__exã∫_ölöe
 
uötmax_t


343 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

344 
ba£
))

346  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

347 
	}
}

349 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

351 
__ba£
, 
__group
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

354 
__exã∫_ölöe
 
ötmax_t


355 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

356 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

358  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

359 
	}
}

361 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

362 
__ª°ri˘
 
__≈å
,

363 
__gwch¨_t
 **

364 
__ª°ri˘
 
__íd±r
,

365 
__ba£
, 
__group
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

368 
__exã∫_ölöe
 
uötmax_t


369 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

370 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

372  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

373 
	}
}

377 
__exãnsi⁄__


378 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

379 **
__ª°ri˘
 
__íd±r
,

380 
__ba£
, 
__group
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

383 
__exã∫_ölöe
 
ötmax_t


384 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

385 
ba£
))

387  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

388 
	}
}

390 
__exãnsi⁄__


391 
	$__°πouŒ_öã∫Æ
 (const *

392 
__ª°ri˘
 
__≈å
,

394 
__ª°ri˘
 
__íd±r
,

395 
__ba£
,

396 
__group
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

399 
__exã∫_ölöe
 
uötmax_t


400 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

401 
ba£
))

403  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

404 
	}
}

406 
__exãnsi⁄__


407 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

409 
__ba£
, 
__group
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

412 
__exã∫_ölöe
 
ötmax_t


413 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

414 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

416  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

417 
	}
}

420 
__exãnsi⁄__


421 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

422 
__ª°ri˘
 
__≈å
,

423 
__gwch¨_t
 **

424 
__ª°ri˘
 
__íd±r
,

425 
__ba£
,

426 
__group
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

429 
__exã∫_ölöe
 
uötmax_t


430 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

431 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

433  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

434 
	}
}

439 
	g__END_DECLS


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

171 #ifde‡
__STDC__


173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_BSD


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

870 
deföed
 
__USE_MISC
)

875 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

881 
	`p˛o£
 (
FILE
 *
__°ªam
);

885 #ifdef 
__USE_POSIX


887 *
	$˘îmid
 (*
__s
Ë
__THROW
;

891 #ifde‡
__USE_XOPEN


893 *
	`cu£rid
 (*
__s
);

897 #ifdef 
__USE_GNU


898 
ob°ack
;

901 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

903 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

904 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

905 c⁄° *
__ª°ri˘
 
__f‹m©
,

906 
_G_va_li°
 
__¨gs
)

907 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

911 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


915 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

919 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

922 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

925 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


929 
	#__√ed_gë›t


	)

930 
	~<gë›t.h
>

935 #ifde‡
__USE_EXTERN_INLINES


936 
	~<bôs/°dio.h
>

938 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


939 
	~<bôs/°dio2.h
>

941 #ifde‡
__LDBL_COMPAT


942 
	~<bôs/°dio-ldbl.h
>

945 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©of
 (c⁄° *
__≈å
))

280  
	`°πod
 (
__≈å
, (**Ë
NULL
);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

285  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
__exã∫_ölöe
 

288 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

290  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

291 
	}
}

292 
	g__END_NAMESPACE_STD


294 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


295 
__BEGIN_NAMESPACE_C99


296 
__exãnsi⁄__
 
__exã∫_ölöe
 

297 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

299  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

300 
	}
}

301 
	g__END_NAMESPACE_C99


306 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


310 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

313 
	$a64l
 (c⁄° *
__s
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

318 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


319 
	~<sys/ty≥s.h
>

326 
	$øndom
 (Ë
__THROW
;

329 
	$§™dom
 (
__£ed
Ë
__THROW
;

335 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

336 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

343 #ifde‡
__USE_MISC


348 
	søndom_d©a


350 
öt32_t
 *
Âå
;

351 
öt32_t
 *
Ωå
;

352 
öt32_t
 *
°©e
;

353 
ønd_ty≥
;

354 
ønd_deg
;

355 
ønd_£p
;

356 
öt32_t
 *
íd_±r
;

359 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

360 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

365 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

366 
size_t
 
__°©ñí
,

367 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

370 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

371 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
__BEGIN_NAMESPACE_STD


379 
	$ønd
 (Ë
__THROW
;

381 
	$§™d
 (
__£ed
Ë
__THROW
;

382 
__END_NAMESPACE_STD


384 #ifde‡
__USE_POSIX


386 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

390 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


394 
	$dønd48
 (Ë
__THROW
;

395 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$Ã™d48
 (Ë
__THROW
;

399 
	$ƒ™d48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$mønd48
 (Ë
__THROW
;

404 
	$jønd48
 (
__xsubi
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

408 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

409 *
	$£ed48
 (
__£ed16v
[3])

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

413 #ifde‡
__USE_MISC


417 
	sdønd48_d©a


419 
__x
[3];

420 
__ﬁd_x
[3];

421 
__c
;

422 
__öô
;

423 
__a
;

427 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

428 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$î™d48_r
 (
__xsubi
[3],

430 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

434 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$ƒ™d48_r
 (
__xsubi
[3],

438 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

443 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

446 
	$jønd48_r
 (
__xsubi
[3],

447 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

448 *
__ª°ri˘
 
__ªsu…
)

449 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

455 
	$£ed48_r
 (
__£ed16v
[3],

456 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$lc⁄g48_r
 (
__∑øm
[7],

459 
dønd48_d©a
 *
__buf„r
)

460 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

466 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


467 
	#__mÆloc_™d_ˇŒoc_deföed


	)

468 
__BEGIN_NAMESPACE_STD


470 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

472 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

473 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

474 
__END_NAMESPACE_STD


477 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


478 
__BEGIN_NAMESPACE_STD


484 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

485 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

487 
	$‰ì
 (*
__±r
Ë
__THROW
;

488 
__END_NAMESPACE_STD


490 #ifdef 
__USE_MISC


492 
	$c‰ì
 (*
__±r
Ë
__THROW
;

495 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


496 
	~<Æloˇ.h
>

499 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

500 || 
deföed
 
__USE_BSD


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 #ifde‡
__USE_ISOC11


513 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

514 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

517 
__BEGIN_NAMESPACE_STD


519 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

523 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

525 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


527 #ifde‡
__˝lu•lus


528 "C++" 
	`©_quick_exô
 ((*
__func
) ())

529 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

531 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

534 
__END_NAMESPACE_STD


536 #ifdef 
__USE_MISC


539 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

540 
__THROW
 
	`__n⁄nuŒ
 ((1));

543 
__BEGIN_NAMESPACE_STD


547 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

549 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


553 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

555 
__END_NAMESPACE_STD


557 #ifde‡
__USE_ISOC99


558 
__BEGIN_NAMESPACE_C99


561 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

562 
__END_NAMESPACE_C99


566 
__BEGIN_NAMESPACE_STD


568 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

569 
__END_NAMESPACE_STD


573 *
	$__£cuª_gëív
 (c⁄° *
__«me
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

576 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


580 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

583 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


586 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

587 
__THROW
 
	`__n⁄nuŒ
 ((2));

590 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #ifdef 
__USE_MISC


597 
	$˛óªnv
 (Ë
__THROW
;

601 #i‡
deföed
 
__USE_MISC
 \

602 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

608 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

611 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

612 || 
deföed
 
__USE_XOPEN2K8


621 #i‚de‡
__USE_FILE_OFFSET64


622 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

624 #ifde‡
__REDIRECT


625 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

626 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

628 
	#mk°emp
 
mk°emp64


	)

631 #ifde‡
__USE_LARGEFILE64


632 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_MISC


643 #i‚de‡
__USE_FILE_OFFSET64


644 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

646 #ifde‡
__REDIRECT


647 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

648 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 
	#mk°emps
 
mk°emps64


	)

653 #ifde‡
__USE_LARGEFILE64


654 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

659 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


665 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

668 #ifde‡
__USE_GNU


675 #i‚de‡
__USE_FILE_OFFSET64


676 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

678 #ifde‡
__REDIRECT


679 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

680 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

682 
	#mko°emp
 
mko°emp64


	)

685 #ifde‡
__USE_LARGEFILE64


686 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

695 #i‚de‡
__USE_FILE_OFFSET64


696 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

697 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

701 
__Êags
), 
mko°emps64
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

704 
	#mko°emps
 
mko°emps64


	)

707 #ifde‡
__USE_LARGEFILE64


708 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

709 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

714 
__BEGIN_NAMESPACE_STD


719 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

720 
__END_NAMESPACE_STD


723 #ifdef 
__USE_GNU


726 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


736 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

737 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

742 #i‚de‡
__COMPAR_FN_T


743 
	#__COMPAR_FN_T


	)

744 (*
	t__com∑r_‚_t
) (const *, const *);

746 #ifdef 
__USE_GNU


747 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

750 #ifde‡
__USE_GNU


751 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

754 
__BEGIN_NAMESPACE_STD


757 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

758 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

759 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

763 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

765 #ifde‡
__USE_GNU


766 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

767 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

768 
	`__n⁄nuŒ
 ((1, 4));

773 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

774 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
__END_NAMESPACE_STD


777 #ifde‡
__USE_ISOC99


778 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

779 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

783 
__BEGIN_NAMESPACE_STD


787 
div_t
 
	$div
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_STD


793 #ifde‡
__USE_ISOC99


794 
__BEGIN_NAMESPACE_C99


795 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

796 
__díom
)

797 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

798 
__END_NAMESPACE_C99


802 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

803 || 
deföed
 
__USE_SVID


810 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

811 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

816 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

817 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

822 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

823 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

826 #ifde‡
__USE_MISC


828 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

832 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

834 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

840 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

844 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

845 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

848 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

849 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

850 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_SVID


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_BSD


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

956 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


957 
	~<bôs/°dlib.h
>

959 #ifde‡
__LDBL_COMPAT


960 
	~<bôs/°dlib-ldbl.h
>

964 #unde‡
__√ed_mÆloc_™d_ˇŒoc


966 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

32 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

33 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

36 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


40 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

41 
__THROW
 
__©åibuã_puª__
;

44 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

47 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

50 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


53 *
	`ödex
 (*
__s
, 
__c
)

54 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

55 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

56 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


59 
__exã∫_Æways_ölöe
 *

60 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


62  
	`__buûtö_ödex
 (
__s
, 
__c
);

65 
__exã∫_Æways_ölöe
 const *

66 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


68  
	`__buûtö_ödex
 (
__s
, 
__c
);

71 
	}
}

73 *
	$ödex
 (c⁄° *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


81 *
	`rödex
 (*
__s
, 
__c
)

82 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

83 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

84 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


87 
__exã∫_Æways_ölöe
 *

88 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


90  
	`__buûtö_rödex
 (
__s
, 
__c
);

93 
__exã∫_Æways_ölöe
 const *

94 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


96  
	`__buûtö_rödex
 (
__s
, 
__c
);

99 
	}
}

101 *
	$rödex
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


109 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

113 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

114 
__THROW
 
__©åibuã_puª__
;

117 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
;

120 #ifdef 
__USE_XOPEN2K8


124 
	~<xloˇÀ.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

131 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

132 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

133 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

136 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/home/lixing/include/FL/Enumerations.H

23 #i‚de‡
Fl_Enumî©i⁄s_H


24 
	#Fl_Enumî©i⁄s_H


	)

32 
	~"Fl_Exp‹t.H
"

33 
	~"Ê_ty≥s.h
"

48 
	#FL_MAJOR_VERSION
 1

	)

55 
	#FL_MINOR_VERSION
 3

	)

62 
	#FL_PATCH_VERSION
 3

	)

75 
	#FL_VERSION
 (()
FL_MAJOR_VERSION
 + \

76 ()
FL_MINOR_VERSION
 * 0.01 + \

77 ()
FL_PATCH_VERSION
 * 0.0001)

	)

96 
	eFl_Evít
 {

98 
	mFL_NO_EVENT
 = 0,

111 
	mFL_PUSH
 = 1,

119 
	mFL_RELEASE
 = 2,

128 
	mFL_ENTER
 = 3,

134 
	mFL_LEAVE
 = 4,

143 
	mFL_DRAG
 = 5,

158 
	mFL_FOCUS
 = 6,

163 
	mFL_UNFOCUS
 = 7,

185 
	mFL_KEYDOWN
 = 8,

190 
	mFL_KEYBOARD
 = 8,

195 
	mFL_KEYUP
 = 9,

202 
	mFL_CLOSE
 = 10,

210 
	mFL_MOVE
 = 11,

224 
	mFL_SHORTCUT
 = 12,

231 
	mFL_DEACTIVATE
 = 13,

236 
	mFL_ACTIVATE
 = 14,

244 
	mFL_HIDE
 = 15,

252 
	mFL_SHOW
 = 16,

258 
	mFL_PASTE
 = 17,

265 
	mFL_SELECTIONCLEAR
 = 18,

270 
	mFL_MOUSEWHEEL
 = 19,

276 
	mFL_DND_ENTER
 = 20,

282 
	mFL_DND_DRAG
 = 21,

286 
	mFL_DND_LEAVE
 = 22,

292 
	mFL_DND_RELEASE
 = 23,

296 
	mFL_SCREEN_CONFIGURATION_CHANGED
 = 24,

299 
	mFL_FULLSCREEN
 = 25

309 
	eFl_Whí
 {

310 
	mFL_WHEN_NEVER
 = 0,

311 
	mFL_WHEN_CHANGED
 = 1,

312 
	mFL_WHEN_NOT_CHANGED
 = 2,

313 
	mFL_WHEN_RELEASE
 = 4,

314 
	mFL_WHEN_RELEASE_ALWAYS
= 6,

315 
	mFL_WHEN_ENTER_KEY
 = 8,

316 
	mFL_WHEN_ENTER_KEY_ALWAYS
=10,

317 
	mFL_WHEN_ENTER_KEY_CHANGED
=11

337 
	#FL_Buâ⁄
 0xfee8

338 
	#FL_BackS∑˚
 0xff08

339 
	#FL_Tab
 0xff09

340 
	#FL_Iso_Key
 0xff0c

341 
	#FL_E¡î
 0xff0d

342 
	#FL_Pau£
 0xff13

343 
	#FL_S¸ﬁl_Lock
 0xff14

344 
	#FL_Esˇ≥
 0xff1b

345 
	#FL_K™a
 0xff2e

346 
	#FL_Eisu
 0xff2f

347 
	#FL_Yí
 0xff30

348 
	#FL_JIS_Undîsc‹e
 0xff31

349 
	#FL_Home
 0xff50

350 
	#FL_Le·
 0xff51

351 
	#FL_Up
 0xff52

352 
	#FL_Right
 0xff53

353 
	#FL_Down
 0xff54

354 
	#FL_Page_Up
 0xff55

355 
	#FL_Page_Down
 0xff56

356 
	#FL_End
 0xff57

357 
	#FL_Pröt
 0xff61

358 
	#FL_In£π
 0xff63

359 
	#FL_Míu
 0xff67

360 
	#FL_Hñp
 0xff68

361 
	#FL_Num_Lock
 0xff7f

362 
	#FL_KP
 0xff80

363 
	#FL_KP_E¡î
 0xff8d

364 
	#FL_KP_La°
 0xffbd

365 
	#FL_F
 0xffbd

366 
	#FL_F_La°
 0xffe0

367 
	#FL_Shi·_L
 0xffe1

368 
	#FL_Shi·_R
 0xffe2

369 
	#FL_C⁄åﬁ_L
 0xffe3

370 
	#FL_C⁄åﬁ_R
 0xffe4

371 
	#FL_C≠s_Lock
 0xffe5

372 
	#FL_Mëa_L
 0xffe7

373 
	#FL_Mëa_R
 0xffe8

374 
	#FL_A…_L
 0xffe9

375 
	#FL_A…_R
 0xffea

376 
	#FL_Dñëe
 0xffff

377 

	)

382 
	#FL_Vﬁume_Down
 0xEF11

	)

383 
	#FL_Vﬁume_Muã
 0xEF12

	)

384 
	#FL_Vﬁume_Up
 0xEF13

	)

385 
	#FL_Medü_Pœy
 0xEF14

	)

386 
	#FL_Medü_St›
 0xEF15

	)

387 
	#FL_Medü_Pªv
 0xEF16

	)

388 
	#FL_Medü_Next
 0xEF17

	)

389 
	#FL_Home_Page
 0xEF18

	)

390 
	#FL_Maû
 0xEF19

	)

391 
	#FL_Sórch
 0xEF1B

	)

392 
	#FL_Back
 0xEF26

	)

393 
	#FL_F‹w¨d
 0xEF27

	)

394 
	#FL_St›
 0xEF28

	)

395 
	#FL_Re‰esh
 0xEF29

	)

396 
	#FL_SÀï
 0xEF2F

	)

397 
	#FL_Fav‹ôes
 0xEF30

	)

410 
	#FL_LEFT_MOUSE
 1

411 
	#FL_MIDDLE_MOUSE
 2

412 
	#FL_RIGHT_MOUSE
 3

413 

	)

427 
	#FL_SHIFT
 0x00010000

428 
	#FL_CAPS_LOCK
 0x00020000

429 
	#FL_CTRL
 0x00040000

430 
	#FL_ALT
 0x00080000

431 
	#FL_NUM_LOCK
 0x00100000

433 
	#FL_META
 0x00400000

435 
	#FL_SCROLL_LOCK
 0x00800000

437 
	#FL_BUTTON1
 0x01000000

438 
	#FL_BUTTON2
 0x02000000

439 
	#FL_BUTTON3
 0x04000000

440 
	#FL_BUTTONS
 0x7f000000

441 
	#FL_BUTTON
(
n
) (0x00800000<<(n))

442 

	)

443 
	#FL_KEY_MASK
 0x0000ffff

445 

	)

446 #ifde‡
__APPLE__


447 
	#FL_COMMAND
 
FL_META


448 
	#FL_CONTROL
 
FL_CTRL


449 #ñ£

	)

450 
	#FL_COMMAND
 
FL_CTRL


451 
	#FL_CONTROL
 
FL_META


453 

	)

473 
	eFl_Boxty≥
 {

475 
	mFL_NO_BOX
 = 0,

476 
	mFL_FLAT_BOX
,

477 
	mFL_UP_BOX
,

478 
	mFL_DOWN_BOX
,

479 
	mFL_UP_FRAME
,

480 
	mFL_DOWN_FRAME
,

481 
	mFL_THIN_UP_BOX
,

482 
	mFL_THIN_DOWN_BOX
,

483 
	mFL_THIN_UP_FRAME
,

484 
	mFL_THIN_DOWN_FRAME
,

485 
	mFL_ENGRAVED_BOX
,

486 
	mFL_EMBOSSED_BOX
,

487 
	mFL_ENGRAVED_FRAME
,

488 
	mFL_EMBOSSED_FRAME
,

489 
	mFL_BORDER_BOX
,

490 
	m_FL_SHADOW_BOX
,

491 
	mFL_BORDER_FRAME
,

492 
	m_FL_SHADOW_FRAME
,

493 
	m_FL_ROUNDED_BOX
,

494 
	m_FL_RSHADOW_BOX
,

495 
	m_FL_ROUNDED_FRAME
,

496 
	m_FL_RFLAT_BOX
,

497 
	m_FL_ROUND_UP_BOX
,

498 
	m_FL_ROUND_DOWN_BOX
,

499 
	m_FL_DIAMOND_UP_BOX
,

500 
	m_FL_DIAMOND_DOWN_BOX
,

501 
	m_FL_OVAL_BOX
,

502 
	m_FL_OSHADOW_BOX
,

503 
	m_FL_OVAL_FRAME
,

504 
	m_FL_OFLAT_BOX
,

505 
	m_FL_PLASTIC_UP_BOX
,

506 
	m_FL_PLASTIC_DOWN_BOX
,

507 
	m_FL_PLASTIC_UP_FRAME
,

508 
	m_FL_PLASTIC_DOWN_FRAME
,

509 
	m_FL_PLASTIC_THIN_UP_BOX
,

510 
	m_FL_PLASTIC_THIN_DOWN_BOX
,

511 
	m_FL_PLASTIC_ROUND_UP_BOX
,

512 
	m_FL_PLASTIC_ROUND_DOWN_BOX
,

513 
	m_FL_GTK_UP_BOX
,

514 
	m_FL_GTK_DOWN_BOX
,

515 
	m_FL_GTK_UP_FRAME
,

516 
	m_FL_GTK_DOWN_FRAME
,

517 
	m_FL_GTK_THIN_UP_BOX
,

518 
	m_FL_GTK_THIN_DOWN_BOX
,

519 
	m_FL_GTK_THIN_UP_FRAME
,

520 
	m_FL_GTK_THIN_DOWN_FRAME
,

521 
	m_FL_GTK_ROUND_UP_BOX
,

522 
	m_FL_GTK_ROUND_DOWN_BOX
,

523 
	m_FL_GLEAM_UP_BOX
,

524 
	m_FL_GLEAM_DOWN_BOX
,

525 
	m_FL_GLEAM_UP_FRAME
,

526 
	m_FL_GLEAM_DOWN_FRAME
,

527 
	m_FL_GLEAM_THIN_UP_BOX
,

528 
	m_FL_GLEAM_THIN_DOWN_BOX
,

529 
	m_FL_GLEAM_ROUND_UP_BOX
,

530 
	m_FL_GLEAM_ROUND_DOWN_BOX
,

531 
	mFL_FREE_BOXTYPE


533 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_ROUND_UP_BOX
();

534 
	#FL_ROUND_UP_BOX
 
	`Ê_deföe_FL_ROUND_UP_BOX
()

	)

535 
	#FL_ROUND_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_ROUND_UP_BOX
()+1)

	)

536 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_SHADOW_BOX
();

537 
	#FL_SHADOW_BOX
 
	`Ê_deföe_FL_SHADOW_BOX
()

	)

538 
	#FL_SHADOW_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_SHADOW_BOX
()+2)

	)

539 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_ROUNDED_BOX
();

540 
	#FL_ROUNDED_BOX
 
	`Ê_deföe_FL_ROUNDED_BOX
()

	)

541 
	#FL_ROUNDED_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_ROUNDED_BOX
()+2)

	)

542 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_RFLAT_BOX
();

543 
	#FL_RFLAT_BOX
 
	`Ê_deföe_FL_RFLAT_BOX
()

	)

544 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_RSHADOW_BOX
();

545 
	#FL_RSHADOW_BOX
 
	`Ê_deföe_FL_RSHADOW_BOX
()

	)

546 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_DIAMOND_BOX
();

547 
	#FL_DIAMOND_UP_BOX
 
	`Ê_deföe_FL_DIAMOND_BOX
()

	)

548 
	#FL_DIAMOND_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_DIAMOND_BOX
()+1)

	)

549 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_OVAL_BOX
();

550 
	#FL_OVAL_BOX
 
	`Ê_deföe_FL_OVAL_BOX
()

	)

551 
	#FL_OSHADOW_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_OVAL_BOX
()+1)

	)

552 
	#FL_OVAL_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_OVAL_BOX
()+2)

	)

553 
	#FL_OFLAT_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_OVAL_BOX
()+3)

	)

555 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_PLASTIC_UP_BOX
();

556 
	#FL_PLASTIC_UP_BOX
 
	`Ê_deföe_FL_PLASTIC_UP_BOX
()

	)

557 
	#FL_PLASTIC_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+1)

	)

558 
	#FL_PLASTIC_UP_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+2)

	)

559 
	#FL_PLASTIC_DOWN_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+3)

	)

560 
	#FL_PLASTIC_THIN_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+4)

	)

561 
	#FL_PLASTIC_THIN_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+5)

	)

562 
	#FL_PLASTIC_ROUND_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+6)

	)

563 
	#FL_PLASTIC_ROUND_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_PLASTIC_UP_BOX
()+7)

	)

565 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_GTK_UP_BOX
();

566 
	#FL_GTK_UP_BOX
 
	`Ê_deföe_FL_GTK_UP_BOX
()

	)

567 
	#FL_GTK_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+1)

	)

568 
	#FL_GTK_UP_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+2)

	)

569 
	#FL_GTK_DOWN_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+3)

	)

570 
	#FL_GTK_THIN_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+4)

	)

571 
	#FL_GTK_THIN_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+5)

	)

572 
	#FL_GTK_THIN_UP_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+6)

	)

573 
	#FL_GTK_THIN_DOWN_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+7)

	)

574 
	#FL_GTK_ROUND_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+8)

	)

575 
	#FL_GTK_ROUND_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GTK_UP_BOX
()+9)

	)

577 
FL_EXPORT
 
Fl_Boxty≥
 
Ê_deföe_FL_GLEAM_UP_BOX
();

578 
	#FL_GLEAM_UP_BOX
 
	`Ê_deföe_FL_GLEAM_UP_BOX
()

	)

579 
	#FL_GLEAM_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+1)

	)

580 
	#FL_GLEAM_UP_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+2)

	)

581 
	#FL_GLEAM_DOWN_FRAME
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+3)

	)

582 
	#FL_GLEAM_THIN_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+4)

	)

583 
	#FL_GLEAM_THIN_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+5)

	)

584 
	#FL_GLEAM_ROUND_UP_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+6)

	)

585 
	#FL_GLEAM_ROUND_DOWN_BOX
 (
Fl_Boxty≥
)(
	`Ê_deföe_FL_GLEAM_UP_BOX
()+7)

	)

593 
ölöe
 
Fl_Boxty≥
 
	$Ê_box
(
Fl_Boxty≥
 
b
) {

594  (
Fl_Boxty≥
)((
b
<
FL_UP_BOX
||b%4>1)?b:(b-2));

595 
	}
}

601 
ölöe
 
Fl_Boxty≥
 
	$Ê_down
(
Fl_Boxty≥
 
b
) {

602  (
Fl_Boxty≥
)((
b
<
FL_UP_BOX
)?b:(b|1));

603 
	}
}

609 
ölöe
 
Fl_Boxty≥
 
	$Ê_‰ame
(
Fl_Boxty≥
 
b
) {

610  (
Fl_Boxty≥
)((
b
%4<2)?b:(b+2));

611 
	}
}

614 
	#FL_FRAME
 
FL_ENGRAVED_FRAME


	)

615 
	#FL_FRAME_BOX
 
FL_ENGRAVED_BOX


	)

616 
	#FL_CIRCLE_BOX
 
FL_ROUND_DOWN_BOX


	)

617 
	#FL_DIAMOND_BOX
 
FL_DIAMOND_DOWN_BOX


	)

633 
	eFl_Labñty≥
 {

634 
	mFL_NORMAL_LABEL
 = 0,

635 
	mFL_NO_LABEL
,

636 
	m_FL_SHADOW_LABEL
,

637 
	m_FL_ENGRAVED_LABEL
,

638 
	m_FL_EMBOSSED_LABEL
,

639 
	m_FL_MULTI_LABEL
,

640 
	m_FL_ICON_LABEL
,

641 
	m_FL_IMAGE_LABEL
,

643 
	mFL_FREE_LABELTYPE


650 
	#FL_SYMBOL_LABEL
 
FL_NORMAL_LABEL


	)

651 
Fl_Labñty≥
 
FL_EXPORT
 
Ê_deföe_FL_SHADOW_LABEL
();

652 
	#FL_SHADOW_LABEL
 
	`Ê_deföe_FL_SHADOW_LABEL
()

	)

653 
Fl_Labñty≥
 
FL_EXPORT
 
Ê_deföe_FL_ENGRAVED_LABEL
();

654 
	#FL_ENGRAVED_LABEL
 
	`Ê_deföe_FL_ENGRAVED_LABEL
()

	)

655 
Fl_Labñty≥
 
FL_EXPORT
 
Ê_deföe_FL_EMBOSSED_LABEL
();

656 
	#FL_EMBOSSED_LABEL
 
	`Ê_deföe_FL_EMBOSSED_LABEL
()

	)

690 
	tFl_Align
;

692 c⁄° 
Fl_Align
 
	gFL_ALIGN_CENTER
 = (Fl_Align)0;

695 c⁄° 
Fl_Align
 
	gFL_ALIGN_TOP
 = (Fl_Align)1;

697 c⁄° 
Fl_Align
 
	gFL_ALIGN_BOTTOM
 = (Fl_Align)2;

701 c⁄° 
Fl_Align
 
	gFL_ALIGN_LEFT
 = (Fl_Align)4;

703 c⁄° 
Fl_Align
 
	gFL_ALIGN_RIGHT
 = (Fl_Align)8;

705 c⁄° 
Fl_Align
 
	gFL_ALIGN_INSIDE
 = (Fl_Align)16;

707 c⁄° 
Fl_Align
 
	gFL_ALIGN_TEXT_OVER_IMAGE
 = (Fl_Align)0x0020;

709 c⁄° 
Fl_Align
 
	gFL_ALIGN_IMAGE_OVER_TEXT
 = (Fl_Align)0x0000;

711 c⁄° 
Fl_Align
 
	gFL_ALIGN_CLIP
 = (Fl_Align)64;

713 c⁄° 
Fl_Align
 
	gFL_ALIGN_WRAP
 = (Fl_Align)128;

715 c⁄° 
Fl_Align
 
	gFL_ALIGN_IMAGE_NEXT_TO_TEXT
 = (Fl_Align)0x0100;

717 c⁄° 
Fl_Align
 
	gFL_ALIGN_TEXT_NEXT_TO_IMAGE
 = (Fl_Align)0x0120;

719 c⁄° 
Fl_Align
 
	gFL_ALIGN_IMAGE_BACKDROP
 = (Fl_Align)0x0200;

720 c⁄° 
Fl_Align
 
	gFL_ALIGN_TOP_LEFT
 = 
FL_ALIGN_TOP
 | 
FL_ALIGN_LEFT
;

721 c⁄° 
Fl_Align
 
	gFL_ALIGN_TOP_RIGHT
 = 
FL_ALIGN_TOP
 | 
FL_ALIGN_RIGHT
;

722 c⁄° 
Fl_Align
 
	gFL_ALIGN_BOTTOM_LEFT
 = 
FL_ALIGN_BOTTOM
 | 
FL_ALIGN_LEFT
;

723 c⁄° 
Fl_Align
 
	gFL_ALIGN_BOTTOM_RIGHT
 = 
FL_ALIGN_BOTTOM
 | 
FL_ALIGN_RIGHT
;

724 c⁄° 
Fl_Align
 
	gFL_ALIGN_LEFT_TOP
 = 0x0007;

725 c⁄° 
Fl_Align
 
	gFL_ALIGN_RIGHT_TOP
 = 0x000b;

726 c⁄° 
Fl_Align
 
	gFL_ALIGN_LEFT_BOTTOM
 = 0x000d;

727 c⁄° 
Fl_Align
 
	gFL_ALIGN_RIGHT_BOTTOM
 = 0x000e;

728 c⁄° 
Fl_Align
 
	gFL_ALIGN_NOWRAP
 = (Fl_Align)0;

729 c⁄° 
Fl_Align
 
	gFL_ALIGN_POSITION_MASK
 = 0x000f;

730 c⁄° 
Fl_Align
 
	gFL_ALIGN_IMAGE_MASK
 = 0x0320;

739 
	tFl_F⁄t
;

741 c⁄° 
Fl_F⁄t
 
	gFL_HELVETICA
 = 0;

742 c⁄° 
Fl_F⁄t
 
	gFL_HELVETICA_BOLD
 = 1;

743 c⁄° 
Fl_F⁄t
 
	gFL_HELVETICA_ITALIC
 = 2;

744 c⁄° 
Fl_F⁄t
 
	gFL_HELVETICA_BOLD_ITALIC
 = 3;

745 c⁄° 
Fl_F⁄t
 
	gFL_COURIER
 = 4;

746 c⁄° 
Fl_F⁄t
 
	gFL_COURIER_BOLD
 = 5;

747 c⁄° 
Fl_F⁄t
 
	gFL_COURIER_ITALIC
 = 6;

748 c⁄° 
Fl_F⁄t
 
	gFL_COURIER_BOLD_ITALIC
 = 7;

749 c⁄° 
Fl_F⁄t
 
	gFL_TIMES
 = 8;

750 c⁄° 
Fl_F⁄t
 
	gFL_TIMES_BOLD
 = 9;

751 c⁄° 
Fl_F⁄t
 
	gFL_TIMES_ITALIC
 = 10;

752 c⁄° 
Fl_F⁄t
 
	gFL_TIMES_BOLD_ITALIC
 = 11;

753 c⁄° 
Fl_F⁄t
 
	gFL_SYMBOL
 = 12;

754 c⁄° 
Fl_F⁄t
 
	gFL_SCREEN
 = 13;

755 c⁄° 
Fl_F⁄t
 
	gFL_SCREEN_BOLD
 = 14;

756 c⁄° 
Fl_F⁄t
 
	gFL_ZAPF_DINGBATS
 = 15;

758 c⁄° 
Fl_F⁄t
 
	gFL_FREE_FONT
 = 16;

759 c⁄° 
Fl_F⁄t
 
	gFL_BOLD
 = 1;

760 c⁄° 
Fl_F⁄t
 
	gFL_ITALIC
 = 2;

761 c⁄° 
Fl_F⁄t
 
	gFL_BOLD_ITALIC
 = 3;

768 
	tFl_F⁄tsize
;

770 
FL_EXPORT
 
Fl_F⁄tsize
 
FL_NORMAL_SIZE
;

796 
	tFl_Cﬁ‹
;

799 c⁄° 
Fl_Cﬁ‹
 
	gFL_FOREGROUND_COLOR
 = 0;

800 c⁄° 
Fl_Cﬁ‹
 
	gFL_BACKGROUND2_COLOR
 = 7;

801 c⁄° 
Fl_Cﬁ‹
 
	gFL_INACTIVE_COLOR
 = 8;

802 c⁄° 
Fl_Cﬁ‹
 
	gFL_SELECTION_COLOR
 = 15;

807 c⁄° 
Fl_Cﬁ‹
 
	gFL_GRAY0
 = 32;

808 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK3
 = 39;

809 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK2
 = 45;

810 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK1
 = 47;

811 c⁄° 
Fl_Cﬁ‹
 
	gFL_BACKGROUND_COLOR
 = 49;

812 c⁄° 
Fl_Cﬁ‹
 
	gFL_LIGHT1
 = 50;

813 c⁄° 
Fl_Cﬁ‹
 
	gFL_LIGHT2
 = 52;

814 c⁄° 
Fl_Cﬁ‹
 
	gFL_LIGHT3
 = 54;

818 c⁄° 
Fl_Cﬁ‹
 
	gFL_BLACK
 = 56;

819 c⁄° 
Fl_Cﬁ‹
 
	gFL_RED
 = 88;

820 c⁄° 
Fl_Cﬁ‹
 
	gFL_GREEN
 = 63;

821 c⁄° 
Fl_Cﬁ‹
 
	gFL_YELLOW
 = 95;

822 c⁄° 
Fl_Cﬁ‹
 
	gFL_BLUE
 = 216;

823 c⁄° 
Fl_Cﬁ‹
 
	gFL_MAGENTA
 = 248;

824 c⁄° 
Fl_Cﬁ‹
 
	gFL_CYAN
 = 223;

825 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_RED
 = 72;

827 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_GREEN
 = 60;

828 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_YELLOW
 = 76;

829 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_BLUE
 = 136;

830 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_MAGENTA
 = 152;

831 c⁄° 
Fl_Cﬁ‹
 
	gFL_DARK_CYAN
 = 140;

833 c⁄° 
Fl_Cﬁ‹
 
	gFL_WHITE
 = 255;

836 
	#FL_FREE_COLOR
 (
Fl_Cﬁ‹
)16

	)

837 
	#FL_NUM_FREE_COLOR
 16

	)

838 
	#FL_GRAY_RAMP
 (
Fl_Cﬁ‹
)32

	)

839 
	#FL_NUM_GRAY
 24

	)

840 
	#FL_GRAY
 
FL_BACKGROUND_COLOR


	)

841 
	#FL_COLOR_CUBE
 (
Fl_Cﬁ‹
)56

	)

842 
	#FL_NUM_RED
 5

	)

843 
	#FL_NUM_GREEN
 8

	)

844 
	#FL_NUM_BLUE
 5

	)

846 
FL_EXPORT
 
Fl_Cﬁ‹
 
Ê_öa˘ive
(Fl_Cﬁ‹ 
c
);

848 
FL_EXPORT
 
Fl_Cﬁ‹
 
Ê_c⁄åa°
(Fl_Cﬁ‹ 
fg
, Fl_Cﬁ‹ 
bg
);

850 
FL_EXPORT
 
Fl_Cﬁ‹
 
Ê_cﬁ‹_avîage
(Fl_Cﬁ‹ 
c1
, Fl_Cﬁ‹ 
c2
, 
weight
);

853 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_lighãr
(
Fl_Cﬁ‹
 
c
Ë{  
	`Ê_cﬁ‹_avîage
(c, 
FL_WHITE
, .67f); 
	}
}

856 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_d¨kî
(
Fl_Cﬁ‹
 
c
Ë{  
	`Ê_cﬁ‹_avîage
(c, 
FL_BLACK
, .67f); 
	}
}

859 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_rgb_cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
) {

860 i‡(!
r
 && !
g
 && !
b
Ë 
FL_BLACK
;

861  (
Fl_Cﬁ‹
)(((((
r
 << 8Ë| 
g
Ë<< 8Ë| 
b
) << 8);

862 
	}
}

865 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_rgb_cﬁ‹
(
uch¨
 
g
) {

866 i‡(!
g
Ë 
FL_BLACK
;

867  (
Fl_Cﬁ‹
)(((((
g
 << 8) | g) << 8) | g) << 8);

868 
	}
}

878 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_gøy_ømp
(
i
Ë{ (
Fl_Cﬁ‹
)(i+
FL_GRAY_RAMP
);
	}
}

894 
ölöe
 
Fl_Cﬁ‹
 
	$Ê_cﬁ‹_cube
(
r
, 
g
, 
b
) {

895  (
Fl_Cﬁ‹
)((
b
*
FL_NUM_RED
 + 
r
Ë* 
FL_NUM_GREEN
 + 
g
 + 
FL_COLOR_CUBE
);
	}
}

910 
	eFl_Curs‹
 {

911 
	mFL_CURSOR_DEFAULT
 = 0,

912 
	mFL_CURSOR_ARROW
 = 35,

913 
	mFL_CURSOR_CROSS
 = 66,

914 
	mFL_CURSOR_WAIT
 = 76,

915 
	mFL_CURSOR_INSERT
 = 77,

916 
	mFL_CURSOR_HAND
 = 31,

917 
	mFL_CURSOR_HELP
 = 47,

918 
	mFL_CURSOR_MOVE
 = 27,

921 
	mFL_CURSOR_NS
 = 78,

922 
	mFL_CURSOR_WE
 = 79,

923 
	mFL_CURSOR_NWSE
 = 80,

924 
	mFL_CURSOR_NESW
 = 81,

925 
	mFL_CURSOR_N
 = 70,

926 
	mFL_CURSOR_NE
 = 69,

927 
	mFL_CURSOR_E
 = 49,

928 
	mFL_CURSOR_SE
 = 8,

929 
	mFL_CURSOR_S
 = 9,

930 
	mFL_CURSOR_SW
 = 7,

931 
	mFL_CURSOR_W
 = 36,

932 
	mFL_CURSOR_NW
 = 68,

934 
	mFL_CURSOR_NONE
 =255

940 
	mFL_READ
 = 1,

941 
	mFL_WRITE
 = 4,

942 
	mFL_EXCEPT
 = 8

946 
	eFl_Mode
 {

947 
	mFL_RGB
 = 0,

948 
	mFL_INDEX
 = 1,

949 
	mFL_SINGLE
 = 0,

950 
	mFL_DOUBLE
 = 2,

951 
	mFL_ACCUM
 = 4,

952 
	mFL_ALPHA
 = 8,

953 
	mFL_DEPTH
 = 16,

954 
	mFL_STENCIL
 = 32,

955 
	mFL_RGB8
 = 64,

956 
	mFL_MULTISAMPLE
= 128,

957 
	mFL_STEREO
 = 256,

958 
	mFL_FAKE_SINGLE
 = 512

963 
	#FL_IMAGE_WITH_ALPHA
 0x40000000

	)

966 
	eFl_Damage
 {

967 
	mFL_DAMAGE_CHILD
 = 0x01,

968 
	mFL_DAMAGE_EXPOSE
 = 0x02,

969 
	mFL_DAMAGE_SCROLL
 = 0x04,

970 
	mFL_DAMAGE_OVERLAY
 = 0x08,

971 
	mFL_DAMAGE_USER1
 = 0x10,

972 
	mFL_DAMAGE_USER2
 = 0x20,

973 
	mFL_DAMAGE_ALL
 = 0x80

977 #ifde‡
FLTK_1_0_COMPAT


978 
	#c⁄åa°
 
Ê_c⁄åa°


	)

979 
	#down
 
Ê_down


	)

980 
	#‰ame
 
Ê_‰ame


	)

981 
	#öa˘ive
 
Ê_öa˘ive


	)

	@/home/lixing/include/FL/Fl_Cairo.H

23 #i‚de‡
FL_CAIRO_H


24 
	#FL_CAIRO_H


	)

25 #ifde‡
FLTK_HAVE_CAIRO


30 
	~<FL/Fl_Exp‹t.H
>

32 #i‡
deföed
(
USE_X11
)

33 
	~<ˇúo-xlib.h
>

34 #ñi‡
deföed
(
WIN32
)

35 
	~<ˇúo-wö32.h
>

36 #ñi‡
deföed
(
__APPLE_QUARTZ__
)

37 
	~<ˇúo-qu¨tz.h
>

39 #îr‹ 
Caúo
 
is
 
nŸ
 
suµ‹ãd
 
⁄
 
th©
 
∂©f‹m
.

54 ˛as†
	cFL_EXPORT
 
	mFl_Caúo_Sèã
 {

55 
	mpublic
:

56 
	$Fl_Caúo_Sèã
(Ë: 
	`cc_
(0), 
	`own_cc_
(
Ál£
), 
	`autﬁök_
(Ál£), 
	`wödow_
(0), 
	$gc_
(0) {}

59 
ˇúo_t
* 
	$cc
(Ëc⁄° { 
cc_
;
	}
}

60 
boﬁ
 
	$autﬁök
(Ëc⁄° { 
autﬁök_
;
	}
}

62 
	$cc
(
ˇúo_t
* 
c
, 
boﬁ
 
own
=
åue
) {

63 i‡(
cc_
 && 
own_cc_
Ë
	`ˇúo_de°roy
(cc_);

64 
cc_
=
c
;

65 i‡(!
cc_
Ë
wödow_
=0;

66 
own_cc_
=
own
;

67 
	}
}

68 
autﬁök
(
boﬁ
 
b
);

69 
	$wödow
(* 
w
Ë{
wödow_
=w;
	}
}

70 * 
	$wödow
(Ëc⁄° { 
wödow_
;
	}
}

71 
	$gc
(* 
c
Ë{
gc_
=c;
	}
}

72 * 
	$gc
(Ëc⁄° { 
gc_
;
	}
}

74 
	g¥iv©e
:

75 
ˇúo_t
 * 
cc_
;

76 
boﬁ
 
	gown_cc_
;

77 
boﬁ
 
	gautﬁök_
;

78 * 
	gwödow_
, *
	ggc_
;

	@/home/lixing/include/FL/Fl_Copy_Surface.H

19 #i‚de‡
Fl_C›y_SurÁ˚_H


20 
	#Fl_C›y_SurÁ˚_H


	)

22 
	~<FL/Fl_Paged_Devi˚.H
>

23 
	~<FL/Fl_Pröãr.H
>

25 #i‡
deföed
(
__APPLE__
)

26 
	~<Aµliˇti⁄Sîvi˚s/Aµliˇti⁄Sîvi˚s.h
>

54 ˛as†
	cFL_EXPORT
 
	mFl_C›y_SurÁ˚
 : 
public
 
Fl_SurÁ˚_Devi˚
 {

55 
¥iv©e
:

56 
width
;

57 
	mheight
;

58 
Fl_Paged_Devi˚
 *
	mhñ≥r
;

59 #ifde‡
__APPLE__


60 
CFMuèbÀD©aRef
 
	mpdfd©a
;

61 
CGC⁄ãxtRef
 
	mﬁdgc
;

62 
CGC⁄ãxtRef
 
	mgc
;

63 
¥ï¨e_c›y_pdf_™d_tiff
(
w
, 
h
);

64 
com∂ëe_c›y_pdf_™d_tiff
();

65 
öô_PDF_c⁄ãxt
(
w
, 
h
);

66 
size_t
 
MyPutByãs
(* 
öfo
, c⁄° * 
buf„r
, size_à
cou¡
);

67 #ñi‡
	$deföed
(
WIN32
)

68 
HDC
 
ﬁdgc
;

69 
HDC
 
gc
;

71 
Fl_Offs¸ìn
 
xid
;

72 
Wödow
 
ﬁdwödow
;

73 
Fl_SurÁ˚_Devi˚
 *
_ss
;

75 
public
:

76 c⁄° *
˛ass_id
;

77 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

78 
	`Fl_C›y_SurÁ˚
(
w
, 
h
);

79 ~
	`Fl_C›y_SurÁ˚
();

80 
	`£t_cuºít
();

81 
	`døw
(
Fl_Widgë
* 
widgë
, 
dñè_x
 = 0, 
dñè_y
 = 0);

82 
	}
};

84 #i‡
deföed
(
__APPLE__
)

87 ˛as†
	cFL_EXPORT
 
	mFl_Qu¨tz_SurÁ˚_
 : 
public
 
Fl_Sy°em_Pröãr
 {

88 
¥Ÿe˘ed
:

89 
width
;

90 
	mheight
;

91 
	mpublic
:

92 c⁄° *
˛ass_id
;

93 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

94 
	`Fl_Qu¨tz_SurÁ˚_
(
w
, 
h
);

95 
vútuÆ
 
	`¥öèbÀ_ª˘
(*
w
, *
h
);

96 
vútuÆ
 ~
	$Fl_Qu¨tz_SurÁ˚_
(Ë{
	}
};

99 #ñi‡
deföed
(
WIN32
)

102 ˛as†
	cFL_EXPORT
 
	mFl_GDI_SurÁ˚_
 : 
public
 
Fl_Paged_Devi˚
 {

103 
width
;

104 
	mheight
;

105 
	mdïth
;

106 
POINT
 
	m‹igös
[10];

107 
	mpublic
:

108 c⁄° *
˛ass_id
;

109 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

110 
	`Fl_GDI_SurÁ˚_
();

111 
vútuÆ
 
	`å™¶©e
(
x
, 
y
);

112 
vútuÆ
 
	`u¡øn¶©e
();

113 
vútuÆ
 ~
	`Fl_GDI_SurÁ˚_
();

114 
	}
};

116 #ñi‡!
deföed
(
FL_DOXYGEN
)

119 ˛as†
	cFL_EXPORT
 
	mFl_Xlib_SurÁ˚_
 : 
public
 
Fl_Paged_Devi˚
 {

120 
public
:

121 c⁄° *
˛ass_id
;

122 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

123 
	`Fl_Xlib_SurÁ˚_
();

124 
vútuÆ
 
	`å™¶©e
(
x
, 
y
);

125 
vútuÆ
 
	`u¡øn¶©e
();

126 
vútuÆ
 ~
	`Fl_Xlib_SurÁ˚_
();

127 
	}
};

	@/home/lixing/include/FL/Fl_Device.H

25 #i‚de‡
Fl_Devi˚_H


26 
	#Fl_Devi˚_H


	)

28 
	~<FL/x.H
>

29 
	~<FL/Fl_Plugö.H
>

30 
	~<FL/Fl_Image.H
>

31 
	~<FL/Fl_Bôm≠.H
>

32 
	~<FL/Fl_Pixm≠.H
>

33 
	~<FL/Fl_RGB_Image.H
>

34 
	~<°dlib.h
>

36 
˛ass
 
	gFl_Gøphics_Drivî
;

37 
˛ass
 
	gFl_F⁄t_Des¸ùt‹
;

39 
FL_EXPORT
 
Fl_Gøphics_Drivî
 *
Ê_gøphics_drivî
;

49 (*
	tFl_Døw_Image_Cb
)(* 
	td©a
,
	tx
,
	ty
,
	tw
,
	tuch¨
* 
	tbuf
);

52 #ifde‡
WIN32


53 
	tCOORD_T
;

54 
	#XPOINT
 
XPoöt


	)

55 #ñi‡
	`deföed
(
__APPLE__
)

56 
	tCOORD_T
;

57 °ru˘ { 
x
; 
y
; } 
	tQPoöt
;

58 
	#XPOINT
 
QPoöt


	)

59 
Ê_qu¨tz_löe_width_
;

61 
	tCOORD_T
;

62 
	#XPOINT
 
XPoöt


	)

68 ˛as†
	cFL_EXPORT
 
Fl_Devi˚
 {

69 
public
:

73 c⁄° *
˛ass_id
;

83 
vútuÆ
 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

90 
vútuÆ
 ~
	$Fl_Devi˚
(Ë{
	}
};

93 
	#FL_REGION_STACK_SIZE
 10

	)

94 
	#FL_MATRIX_STACK_SIZE
 32

	)

103 ˛as†
	cFL_EXPORT
 
	mFl_Gøphics_Drivî
 : 
public
 
Fl_Devi˚
 {

104 
public
:

107 
	sm©rix
 {
a
, 
	mb
, 
	mc
, 
	md
, 
	mx
, 
	my
;};

108 
	g¥iv©e
:

109 c⁄° 
m©rix
 
m0
;

110 
Fl_F⁄t
 
	gf⁄t_
;

111 
Fl_F⁄tsize
 
	gsize_
;

112 
Fl_Cﬁ‹
 
	gcﬁ‹_
;

113 
	g•å
;

114 c⁄° 
	gm©rix_°ack_size
 = 
FL_MATRIX_STACK_SIZE
;

115 
m©rix
 
	g°ack
[
FL_MATRIX_STACK_SIZE
];

116 
m©rix
 
	gm
;

117 
	gn
, 
	gp_size
, 
	gg≠_
;

118 
XPOINT
 *
	gp
;

119 
	gwh©
;

120 
	gÊ_˛ù_°©e_numbî
;

121 
	gr°ack±r
;

122 c⁄° 
	gªgi⁄_°ack_max
 = 
FL_REGION_STACK_SIZE
 - 1;

123 
Fl_Regi⁄
 
	gr°ack
[
FL_REGION_STACK_SIZE
];

124 #ifde‡
WIN32


125 
	gnumcou¡
;

126 
	gcou¡s
[20];

128 
Fl_F⁄t_Des¸ùt‹
 *
	gf⁄t_des¸ùt‹_
;

129 
å™sf‹med_vîãx0
(
COORD_T
 
x
, COORD_T 
y
);

130 
fixlo›
();

132 
	g¥Ÿe˘ed
:

133 #i‚de‡
FL_DOXYGEN


134 íum {
LINE
, 
	gLOOP
, 
	gPOLYGON
, 
	gPOINT_
};

135 
ölöe
 
	$vîãx_no
(Ë{  
n
; 
	}
}

136 
ölöe
 
XPOINT
 *
	$vîti˚s
(Ë{ 
p
;
	}
}

137 
ölöe
 
	$vîãx_köd
(Ë{ 
wh©
;
	}
}

145 
‰õnd
 
˛ass
 
	gFl_Pixm≠
;

146 
‰õnd
 
˛ass
 
	gFl_Bôm≠
;

147 
‰õnd
 
˛ass
 
	gFl_RGB_Image
;

148 
‰õnd
 
Ê_ª˘
(
x
, 
y
, 
w
, 
h
);

149 
‰õnd
 
Ê_ª˘f
(
x
, 
y
, 
w
, 
h
);

150 
‰õnd
 
Ê_löe_°yÀ
(
°yÀ
, 
width
, * 
dashes
);

151 
‰õnd
 
Ê_xylöe
(
x
, 
y
, 
x1
);

152 
‰õnd
 
Ê_xylöe
(
x
, 
y
, 
x1
, 
y2
);

153 
‰õnd
 
Ê_xylöe
(
x
, 
y
, 
x1
, 
y2
, 
x3
);

154 
‰õnd
 
Ê_yxlöe
(
x
, 
y
, 
y1
);

155 
‰õnd
 
Ê_yxlöe
(
x
, 
y
, 
y1
, 
x2
);

156 
‰õnd
 
Ê_yxlöe
(
x
, 
y
, 
y1
, 
x2
, 
y3
);

157 
‰õnd
 
Ê_löe
(
x
, 
y
, 
x1
, 
y1
);

158 
‰õnd
 
Ê_löe
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
);

159 
‰õnd
 
Ê_døw
(c⁄° *
°r
, 
n
, 
x
, 
y
);

160 #ifde‡
__APPLE__


161 
‰õnd
 
Ê_døw
(c⁄° *
°r
, 
n
, 
x
, 
y
);

163 
‰õnd
 
Ê_døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
);

164 
‰õnd
 
Ê_πl_døw
(c⁄° *
°r
, 
n
, 
x
, 
y
);

165 
‰õnd
 
Ê_f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
size
);

166 
‰õnd
 
Ê_cﬁ‹
(
Fl_Cﬁ‹
 
c
);

167 
‰õnd
 
Ê_cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

168 
‰õnd
 
Ê_poöt
(
x
, 
y
);

169 
‰õnd
 
Ê_lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

170 
‰õnd
 
Ê_lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

171 
‰õnd
 
Ê_pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

172 
‰õnd
 
Ê_pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

173 
‰õnd
 
Ê_begö_poöts
();

174 
‰õnd
 
Ê_begö_löe
();

175 
‰õnd
 
Ê_begö_lo›
();

176 
‰õnd
 
Ê_begö_pﬁyg⁄
();

177 
‰õnd
 
Ê_vîãx
(
x
, 
y
);

178 
‰õnd
 
Ê_curve
(
X0
, 
Y0
, 
X1
, 
Y1
, 
X2
, 
Y2
, 
X3
, 
Y3
);

179 
‰õnd
 
Ê_cú˛e
(
x
, 
y
, 
r
);

180 
‰õnd
 
Ê_¨c
(
x
, 
y
, 
r
, 
°¨t
, 
íd
);

181 
‰õnd
 
Ê_¨c
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

182 
‰õnd
 
Ê_põ
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

183 
‰õnd
 
Ê_íd_poöts
();

184 
‰õnd
 
Ê_íd_löe
();

185 
‰õnd
 
Ê_íd_lo›
();

186 
‰õnd
 
Ê_íd_pﬁyg⁄
();

187 
‰õnd
 
Ê_å™sf‹med_vîãx
(
xf
, 
yf
);

188 
‰õnd
 
Ê_push_˛ù
(
x
, 
y
, 
w
, 
h
);

189 
‰õnd
 
Ê_˛ù_box
(
x
, 
y
, 
w
, 
h
, &
X
, &
Y
, &
W
, &
H
);

190 
‰õnd
 
Ê_nŸ_˛ù≥d
(
x
, 
y
, 
w
, 
h
);

191 
‰õnd
 
Ê_push_no_˛ù
();

192 
‰õnd
 
Ê_p›_˛ù
();

193 
‰õnd
 
Ê_begö_com∂ex_pﬁyg⁄
();

194 
‰õnd
 
Ê_g≠
();

195 
‰õnd
 
Ê_íd_com∂ex_pﬁyg⁄
();

196 
‰õnd
 
Ê_push_m©rix
();

197 
‰õnd
 
Ê_p›_m©rix
();

198 
‰õnd
 
Ê_mu…_m©rix
(
a
, 
b
, 
c
, 
d
, 
x
, 
y
);

199 
‰õnd
 
Ê_sˇÀ
(
x
, 
y
);

200 
‰õnd
 
Ê_sˇÀ
(
x
);

201 
‰õnd
 
Ê_å™¶©e
(
x
, 
y
);

202 
‰õnd
 
Ê_rŸ©e
(
d
);

203 
‰õnd
 
Ê_å™sf‹m_x
(
x
, 
y
);

204 
‰õnd
 
Ê_å™sf‹m_y
(
x
, 
y
);

205 
‰õnd
 
Ê_å™sf‹m_dx
(
x
, 
y
);

206 
‰õnd
 
Ê_å™sf‹m_dy
(
x
, 
y
);

207 
‰õnd
 
Fl_Regi⁄
 
Ê_˛ù_ªgi⁄
();

208 
‰õnd
 
Ê_˛ù_ªgi⁄
(
Fl_Regi⁄
 
r
);

209 
‰õnd
 
Ê_ª°‹e_˛ù
();

211 
‰õnd
 
Ê_døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
, 
L
);

212 
‰õnd
 
Ê_døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
, 
L
);

213 
‰õnd
 
Ê_døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
);

214 
‰õnd
 
FL_EXPORT
 
Ê_døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
);

215 
‰õnd
 
FL_EXPORT
 
gl_°¨t
();

216 
‰õnd
 
Ê_c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

217 
m©rix
 *
	gÊ_m©rix
;

220 
Fl_Gøphics_Drivî
();

222 
vútuÆ
 
ª˘
(
x
, 
y
, 
w
, 
h
);

224 
vútuÆ
 
ª˘f
(
x
, 
y
, 
w
, 
h
);

226 
vútuÆ
 
löe_°yÀ
(
°yÀ
, 
width
=0, * 
dashes
=0);

228 
vútuÆ
 
xylöe
(
x
, 
y
, 
x1
);

230 
vútuÆ
 
xylöe
(
x
, 
y
, 
x1
, 
y2
);

232 
vútuÆ
 
xylöe
(
x
, 
y
, 
x1
, 
y2
, 
x3
);

234 
vútuÆ
 
yxlöe
(
x
, 
y
, 
y1
);

236 
vútuÆ
 
yxlöe
(
x
, 
y
, 
y1
, 
x2
);

238 
vútuÆ
 
yxlöe
(
x
, 
y
, 
y1
, 
x2
, 
y3
);

240 
vútuÆ
 
löe
(
x
, 
y
, 
x1
, 
y1
);

242 
vútuÆ
 
löe
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
);

244 
vútuÆ
 
	$døw
(c⁄° *
°r
, 
n
, 
x
, 
y
Ë{
	}
}

245 #ifde‡
__APPLE__


246 
vútuÆ
 
	$døw
(c⁄° *
°r
, 
n
, 
x
, 
y
Ë{ 
	`døw
(°r,Ç, ()(x+0.5), ()(y+0.5));
	}
}

249 
vútuÆ
 
	$døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
Ë{
	}
}

251 
vútuÆ
 
	$πl_døw
(c⁄° *
°r
, 
n
, 
x
, 
y
Ë{
	}
};

253 
vútuÆ
 
	$cﬁ‹
(
Fl_Cﬁ‹
 
c
Ë{
cﬁ‹_
 = c;
	}
}

255 
vútuÆ
 
	$cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
Ë{
	}
}

257 
vútuÆ
 
poöt
(
x
, 
y
);

259 
vútuÆ
 
lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

261 
vútuÆ
 
lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

263 
vútuÆ
 
pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

265 
vútuÆ
 
pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

267 
vútuÆ
 
begö_poöts
();

269 
vútuÆ
 
begö_löe
();

271 
vútuÆ
 
begö_lo›
();

273 
vútuÆ
 
begö_pﬁyg⁄
();

275 
vútuÆ
 
vîãx
(
x
, 
y
);

277 
vútuÆ
 
curve
(
X0
, 
Y0
, 
X1
, 
Y1
, 
X2
, 
Y2
, 
X3
, 
Y3
);

279 
vútuÆ
 
cú˛e
(
x
, 
y
, 
r
);

281 
vútuÆ
 
¨c
(
x
, 
y
, 
r
, 
°¨t
, 
íd
);

283 
vútuÆ
 
¨c
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

285 
vútuÆ
 
põ
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

287 
vútuÆ
 
íd_poöts
();

289 
vútuÆ
 
íd_löe
();

291 
vútuÆ
 
íd_lo›
();

293 
vútuÆ
 
íd_pﬁyg⁄
();

295 
vútuÆ
 
begö_com∂ex_pﬁyg⁄
();

297 
vútuÆ
 
g≠
();

299 
vútuÆ
 
íd_com∂ex_pﬁyg⁄
();

301 
vútuÆ
 
å™sf‹med_vîãx
(
xf
, 
yf
);

303 
vútuÆ
 
push_˛ù
(
x
, 
y
, 
w
, 
h
);

305 
vútuÆ
 
˛ù_box
(
x
, 
y
, 
w
, 
h
, &
X
, &
Y
, &
W
, &
H
);

307 
vútuÆ
 
nŸ_˛ù≥d
(
x
, 
y
, 
w
, 
h
);

309 
vútuÆ
 
push_no_˛ù
();

311 
vútuÆ
 
p›_˛ù
();

314 
push_m©rix
();

316 
p›_m©rix
();

318 
mu…_m©rix
(
a
, 
b
, 
c
, 
d
, 
x
, 
y
);

320 
ölöe
 
	$sˇÀ
(
x
, 
y
Ë{ 
	`mu…_m©rix
(x,0,0,y,0,0); 
	}
}

322 
ölöe
 
	$sˇÀ
(
x
Ë{ 
	`mu…_m©rix
(x,0,0,x,0,0); 
	}
}

324 
ölöe
 
	$å™¶©e
(
x
,
y
Ë{ 
	`mu…_m©rix
(1,0,0,1,x,y); 
	}
}

326 
rŸ©e
(
d
);

328 
å™sf‹m_x
(
x
, 
y
);

330 
å™sf‹m_y
(
x
, 
y
);

332 
å™sf‹m_dx
(
x
, 
y
);

334 
å™sf‹m_dy
(
x
, 
y
);

336 
Fl_Regi⁄
 
˛ù_ªgi⁄
();

338 
˛ù_ªgi⁄
(
Fl_Regi⁄
 
r
);

340 
ª°‹e_˛ù
();

344 
vútuÆ
 
	$døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=3, 
L
=0Ë{
	}
}

346 
vútuÆ
 
	$døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=1, 
L
=0Ë{
	}
}

348 
vútuÆ
 
	$døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=3Ë{
	}
}

350 
vútuÆ
 
	$døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=1Ë{
	}
}

357 
vútuÆ
 
	$døw
(
Fl_RGB_Image
 * 
rgb
,
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
Ë{
	}
}

363 
vútuÆ
 
	$døw
(
Fl_Pixm≠
 * 
pxm
,
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
Ë{
	}
}

369 
vútuÆ
 
	$døw
(
Fl_Bôm≠
 *
bm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
Ë{
	}
}

370 #i‡
FLTK_ABI_VERSION
 >= 10301

371 
	gvútuÆ


373 
c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

375 
	gpublic
:

376 c⁄° *
˛ass_id
;

377 
vútuÆ
 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;
	}
};

379 
vútuÆ
 
	$f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
fsize
Ë{
f⁄t_
 = fa˚; 
size_
 = fsize;
	}
}

381 
Fl_F⁄t
 
	$f⁄t
(Ë{ 
f⁄t_
; 
	}
}

383 
Fl_F⁄tsize
 
	$size
(Ë{ 
size_
; 
	}
}

385 
vútuÆ
 
	$width
(c⁄° *
°r
, 
n
Ë{ 0;
	}
}

387 
vútuÆ
 
ölöe
 
	$width
(
c
Ë{ 
ch
 = ()c;  
	`width
(&ch, 1); 
	}
}

389 
vútuÆ
 
ãxt_exã¡s
(c⁄° *, 
n
, & 
dx
, & 
dy
, & 
w
, & 
h
);

391 
vútuÆ
 
	$height
(Ë{ 
	`size
();
	}
}

393 
vútuÆ
 
	$des˚¡
(Ë{ 0;
	}
}

395 
Fl_Cﬁ‹
 
	$cﬁ‹
(Ë{ 
cﬁ‹_
;
	}
}

397 
ölöe
 
Fl_F⁄t_Des¸ùt‹
 *
	$f⁄t_des¸ùt‹
(Ë{  
f⁄t_des¸ùt‹_
;
	}
}

399 
ölöe
 
	$f⁄t_des¸ùt‹
(
Fl_F⁄t_Des¸ùt‹
 *
d
Ë{ 
f⁄t_des¸ùt‹_
 = d;
	}
}

401 
	gvútuÆ
 ~
	$Fl_Gøphics_Drivî
(Ë{ i‡(
p
Ë
	`‰ì
’); 
	}
}

404 #i‡
deföed
(
__APPLE__
Ë|| deföed(
FL_DOXYGEN
)

410 ˛as†
	cFL_EXPORT
 
	mFl_Qu¨tz_Gøphics_Drivî
 : 
public
 
Fl_Gøphics_Drivî
 {

411 
public
:

412 c⁄° *
˛ass_id
;

413 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

414 
	`cﬁ‹
(
Fl_Cﬁ‹
 
c
);

415 
	`cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

416 
	`døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

417 #ifde‡
__APPLE__


418 
	`døw
(c⁄° *
°r
, 
n
, 
x
, 
y
);

420 
	`døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
);

421 
	`πl_døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

422 
	`f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
size
);

423 
	`døw
(
Fl_Pixm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

424 
	`døw
(
Fl_Bôm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

425 
	`døw
(
Fl_RGB_Image
 *
img
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

426 
	`døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=3, 
L
=0);

427 
	`døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=3);

428 
	`døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=1, 
L
=0);

429 
	`døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=1);

430 
	`width
(c⁄° *
°r
, 
n
);

431 
	`width
(
c
);

432 
	`ãxt_exã¡s
(c⁄° *, 
n
, & 
dx
, & 
dy
, & 
w
, & 
h
);

433 
	`height
();

434 
	`des˚¡
();

435 #i‡! 
	$deföed
(
FL_DOXYGEN
)

436 
Fl_Offs¸ìn
 
	`¸óã_offs¸ìn_wôh_Æpha
(
w
, 
h
);

438 
	`c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

439 
	}
};

441 #i‡
deföed
(
WIN32
Ë|| deföed(
FL_DOXYGEN
)

447 ˛as†
	cFL_EXPORT
 
	mFl_GDI_Gøphics_Drivî
 : 
public
 
Fl_Gøphics_Drivî
 {

448 
public
:

449 c⁄° *
˛ass_id
;

450 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

451 
	`cﬁ‹
(
Fl_Cﬁ‹
 
c
);

452 
	`cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

453 
	`døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

454 
	`døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
);

455 
	`πl_døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

456 
	`f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
size
);

457 
	`døw
(
Fl_Pixm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

458 
	`døw
(
Fl_Bôm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

459 
	`døw
(
Fl_RGB_Image
 *
img
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

460 
	`døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=3, 
L
=0);

461 
	`døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=3);

462 
	`døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=1, 
L
=0);

463 
	`døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=1);

464 
	`width
(c⁄° *
°r
, 
n
);

465 
	`width
(
c
);

466 
	`ãxt_exã¡s
(c⁄° *, 
n
, & 
dx
, & 
dy
, & 
w
, & 
h
);

467 
	`height
();

468 
	`des˚¡
();

469 #i‡! 
	$deföed
(
FL_DOXYGEN
)

470 
	`c›y_offs¸ìn_wôh_Æpha
(
x
,
y
,
w
,
h
,
HBITMAP
 
bôm≠
,
§cx
,
§cy
);

472 
	`c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

473 
	}
};

480 ˛as†
	cFL_EXPORT
 
	mFl_GDI_Pröãr_Gøphics_Drivî
 : 
public
 
Fl_GDI_Gøphics_Drivî
 {

481 
public
:

482 c⁄° *
˛ass_id
;

483 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

484 
	`døw
(
Fl_Pixm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

485 
	`døw
(
Fl_Bôm≠
 *
bm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

486 
	}
};

488 #i‡!(
deföed
(
__APPLE__
Ë|| deföed(
WIN32
))

494 ˛as†
	cFL_EXPORT
 
	mFl_Xlib_Gøphics_Drivî
 : 
public
 
Fl_Gøphics_Drivî
 {

495 
public
:

496 c⁄° *
˛ass_id
;

497 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

498 
	`cﬁ‹
(
Fl_Cﬁ‹
 
c
);

499 
	`cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

500 
	`døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

501 
	`døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
);

502 
	`πl_døw
(c⁄° * 
°r
, 
n
, 
x
, 
y
);

503 
	`f⁄t
(
Fl_F⁄t
 
Á˚
, 
Fl_F⁄tsize
 
size
);

504 
	`døw
(
Fl_Pixm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

505 
	`døw
(
Fl_Bôm≠
 *
pxm
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

506 
	`døw
(
Fl_RGB_Image
 *
img
, 
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

507 
	`døw_image
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=3, 
L
=0);

508 
	`døw_image
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=3);

509 
	`døw_image_m⁄o
(c⁄° 
uch¨
* 
buf
, 
X
,
Y
,
W
,
H
, 
D
=1, 
L
=0);

510 
	`døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
cb
, * 
d©a
, 
X
,
Y
,
W
,
H
, 
D
=1);

511 
	`width
(c⁄° *
°r
, 
n
);

512 
	`width
(
c
);

513 
	`ãxt_exã¡s
(c⁄° *, 
n
, & 
dx
, & 
dy
, & 
w
, & 
h
);

514 
	`height
();

515 
	`des˚¡
();

516 
	`c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

517 
	}
};

523 ˛as†
	cFL_EXPORT
 
	mFl_SurÁ˚_Devi˚
 : 
public
 
Fl_Devi˚
 {

525 
Fl_Gøphics_Drivî
 *
_drivî
;

526 
Fl_SurÁ˚_Devi˚
 *
	m_surÁ˚
;

527 
	m¥Ÿe˘ed
:

529 
	$Fl_SurÁ˚_Devi˚
(
Fl_Gøphics_Drivî
 *
gøphics_drivî
Ë{
_drivî
 = graphics_driver; };

530 
public
:

531 c⁄° *
˛ass_id
;

532 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;
	}
};

533 
vútuÆ
 
£t_cuºít
();

535 
ölöe
 
	$drivî
(
Fl_Gøphics_Drivî
 *
gøphics_drivî
Ë{
_drivî
 = gøphics_drivî;
	}
};

537 
ölöe
 
Fl_Gøphics_Drivî
 *
	$drivî
(Ë{ 
_drivî
; 
	}
};

539 
ölöe
 
Fl_SurÁ˚_Devi˚
 *
	$surÁ˚
(Ë{ 
_surÁ˚
; 
	}
};

541 
	gvútuÆ
 ~
	$Fl_SurÁ˚_Devi˚
(Ë{
	}
}

547 ˛as†
	cFL_EXPORT
 
	mFl_Di•œy_Devi˚
 : 
public
 
Fl_SurÁ˚_Devi˚
 {

548 
Fl_Di•œy_Devi˚
 *
_di•œy
;

549 
	mpublic
:

550 c⁄° *
˛ass_id
;

551 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

553 
	`Fl_Di•œy_Devi˚
(
Fl_Gøphics_Drivî
 *
gøphics_drivî
);

555 
ölöe
 
Fl_Di•œy_Devi˚
 *
	$di•œy_devi˚
(Ë{ 
_di•œy
;
	}
};

563 ˛as†
	cFL_EXPORT
 
	mFl_Devi˚_Plugö
 : 
public
 
Fl_Plugö
 {

564 
public
:

566 
	$Fl_Devi˚_Plugö
(c⁄° *
∂ugöName
)

567 : 
	`Fl_Plugö
(
	`kœss
(), 
∂ugöName
) { }

569 
vútuÆ
 c⁄° *
	$kœss
(Ë{  "Êtk:devi˚"; 
	}
}

571 
vútuÆ
 c⁄° *
«me
() = 0;

577 
vútuÆ
 
¥öt
(
Fl_Widgë
* 
w
, 
x
, 
y
, 
height
) = 0;

	@/home/lixing/include/FL/Fl_File_Chooser.H

28 #i‚de‡
Fl_Fûe_Choo£r_H


29 
	#Fl_Fûe_Choo£r_H


	)

30 
	~<FL/Fl.H
>

31 
	~<FL/Fl_DoubÀ_Wödow.H
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<FL/Fl_Group.H
>

36 
	~<FL/Fl_Choi˚.H
>

37 
	~<FL/Fl_Míu_Buâ⁄.H
>

38 
	~<FL/Fl_Buâ⁄.H
>

39 
	~<FL/Fl_Pª„ªn˚s.H
>

40 
	~<FL/Fl_Tûe.H
>

41 
	~<FL/Fl_Fûe_Brow£r.H
>

42 
	~<FL/Fl_Box.H
>

43 
	~<FL/Fl_Check_Buâ⁄.H
>

44 
	~<FL/Fl_Fûe_I≈ut.H
>

45 
	~<FL/Fl_Rëu∫_Buâ⁄.H
>

46 
	~<FL/Ê_ask.H
>

48 ˛as†
	cFL_EXPORT
 
	mFl_Fûe_Choo£r
 {

49 
	mpublic
:

50 íum { 
SINGLE
 = 0, 
	mMULTI
 = 1, 
	mCREATE
 = 2, 
	mDIRECTORY
 = 4 };

51 
	g¥iv©e
:

52 
Fl_Pª„ªn˚s
 
¥efs_
;

53 (*
ˇŒback_
)(
Fl_Fûe_Choo£r
*, *);

54 *
d©a_
;

55 
dúe˘‹y_
[
FL_PATH_MAX
];

56 
∑âîn_
[
FL_PATH_MAX
];

57 
¥evõw_ãxt_
[2048];

58 
ty≥_
;

59 
	`Áv‹ôesBuâ⁄CB
();

60 
	`Áv‹ôesCB
(
Fl_Widgë
 *
w
);

61 
	`fûeLi°CB
();

62 
	`fûeNameCB
();

63 
	`√wdú
();

64 
	`¥evõwCB
(
Fl_Fûe_Choo£r
 *
fc
);

65 
	`showChoi˚CB
();

66 
	`upd©e_Áv‹ôes
();

67 
	`upd©e_¥evõw
();

68 
public
:

69 
	`Fl_Fûe_Choo£r
(c⁄° *
d
, c⁄° *
p
, 
t
, c⁄° *
tôÀ
);

70 
¥iv©e
:

71 
Fl_DoubÀ_Wödow
 *
wödow
;

72 
ölöe
 
	`cb_wödow_i
(
Fl_DoubÀ_Wödow
*, *);

73 
	`cb_wödow
(
Fl_DoubÀ_Wödow
*, *);

74 
Fl_Choi˚
 *
showChoi˚
;

75 
ölöe
 
	`cb_showChoi˚_i
(
Fl_Choi˚
*, *);

76 
	`cb_showChoi˚
(
Fl_Choi˚
*, *);

77 
Fl_Míu_Buâ⁄
 *
Áv‹ôesBuâ⁄
;

78 
ölöe
 
	`cb_Áv‹ôesBuâ⁄_i
(
Fl_Míu_Buâ⁄
*, *);

79 
	`cb_Áv‹ôesBuâ⁄
(
Fl_Míu_Buâ⁄
*, *);

80 
public
:

81 
Fl_Buâ⁄
 *
√wBuâ⁄
;

82 
¥iv©e
:

83 
ölöe
 
	`cb_√wBuâ⁄_i
(
Fl_Buâ⁄
*, *);

84 
	`cb_√wBuâ⁄
(
Fl_Buâ⁄
*, *);

85 
ölöe
 
	`cb__i
(
Fl_Tûe
*, *);

86 
	`cb_
(
Fl_Tûe
*, *);

87 
Fl_Fûe_Brow£r
 *
fûeLi°
;

88 
ölöe
 
	`cb_fûeLi°_i
(
Fl_Fûe_Brow£r
*, *);

89 
	`cb_fûeLi°
(
Fl_Fûe_Brow£r
*, *);

90 
Fl_Box
 *
¥evõwBox
;

91 
public
:

92 
Fl_Check_Buâ⁄
 *
¥evõwBuâ⁄
;

93 
¥iv©e
:

94 
ölöe
 
	`cb_¥evõwBuâ⁄_i
(
Fl_Check_Buâ⁄
*, *);

95 
	`cb_¥evõwBuâ⁄
(
Fl_Check_Buâ⁄
*, *);

96 
public
:

97 
Fl_Check_Buâ⁄
 *
showHiddíBuâ⁄
;

98 
¥iv©e
:

99 
ölöe
 
	`cb_showHiddíBuâ⁄_i
(
Fl_Check_Buâ⁄
*, *);

100 
	`cb_showHiddíBuâ⁄
(
Fl_Check_Buâ⁄
*, *);

101 
Fl_Fûe_I≈ut
 *
fûeName
;

102 
ölöe
 
	`cb_fûeName_i
(
Fl_Fûe_I≈ut
*, *);

103 
	`cb_fûeName
(
Fl_Fûe_I≈ut
*, *);

104 
Fl_Rëu∫_Buâ⁄
 *
okBuâ⁄
;

105 
ölöe
 
	`cb_okBuâ⁄_i
(
Fl_Rëu∫_Buâ⁄
*, *);

106 
	`cb_okBuâ⁄
(
Fl_Rëu∫_Buâ⁄
*, *);

107 
Fl_Buâ⁄
 *
ˇn˚lBuâ⁄
;

108 
ölöe
 
	`cb_ˇn˚lBuâ⁄_i
(
Fl_Buâ⁄
*, *);

109 
	`cb_ˇn˚lBuâ⁄
(
Fl_Buâ⁄
*, *);

110 
Fl_DoubÀ_Wödow
 *
ÁvWödow
;

111 
Fl_Fûe_Brow£r
 *
ÁvLi°
;

112 
ölöe
 
	`cb_ÁvLi°_i
(
Fl_Fûe_Brow£r
*, *);

113 
	`cb_ÁvLi°
(
Fl_Fûe_Brow£r
*, *);

114 
Fl_Buâ⁄
 *
ÁvUpBuâ⁄
;

115 
ölöe
 
	`cb_ÁvUpBuâ⁄_i
(
Fl_Buâ⁄
*, *);

116 
	`cb_ÁvUpBuâ⁄
(
Fl_Buâ⁄
*, *);

117 
Fl_Buâ⁄
 *
ÁvDñëeBuâ⁄
;

118 
ölöe
 
	`cb_ÁvDñëeBuâ⁄_i
(
Fl_Buâ⁄
*, *);

119 
	`cb_ÁvDñëeBuâ⁄
(
Fl_Buâ⁄
*, *);

120 
Fl_Buâ⁄
 *
ÁvDownBuâ⁄
;

121 
ölöe
 
	`cb_ÁvDownBuâ⁄_i
(
Fl_Buâ⁄
*, *);

122 
	`cb_ÁvDownBuâ⁄
(
Fl_Buâ⁄
*, *);

123 
Fl_Buâ⁄
 *
ÁvC™˚lBuâ⁄
;

124 
ölöe
 
	`cb_ÁvC™˚lBuâ⁄_i
(
Fl_Buâ⁄
*, *);

125 
	`cb_ÁvC™˚lBuâ⁄
(
Fl_Buâ⁄
*, *);

126 
Fl_Rëu∫_Buâ⁄
 *
ÁvOkBuâ⁄
;

127 
ölöe
 
	`cb_ÁvOkBuâ⁄_i
(
Fl_Rëu∫_Buâ⁄
*, *);

128 
	`cb_ÁvOkBuâ⁄
(
Fl_Rëu∫_Buâ⁄
*, *);

129 
public
:

130 ~
	`Fl_Fûe_Choo£r
();

131 
	`ˇŒback
((*
cb
)(
Fl_Fûe_Choo£r
 *, *), *
d
 = 0);

132 
	`cﬁ‹
(
Fl_Cﬁ‹
 
c
);

133 
Fl_Cﬁ‹
 
	`cﬁ‹
();

134 
	`cou¡
();

135 
	`dúe˘‹y
(c⁄° *
d
);

136 * 
	`dúe˘‹y
();

137 
	`fûãr
(c⁄° *
p
);

138 c⁄° * 
	`fûãr
();

139 
	`fûãr_vÆue
();

140 
	`fûãr_vÆue
(
f
);

141 
	`hide
();

142 
	`ic⁄size
(
uch¨
 
s
);

143 
uch¨
 
	`ic⁄size
();

144 
	`œbñ
(c⁄° *
l
);

145 c⁄° * 
	`œbñ
();

146 
	`ok_œbñ
(c⁄° *
l
);

147 c⁄° * 
	`ok_œbñ
();

148 
	`¥evõw
(
e
);

149 
	$¥evõw
(Ëc⁄° {  
¥evõwBuâ⁄
->
	`vÆue
(); 
	}
};

150 
	g¥iv©e
:

151 
showHiddí
(
e
);

152 
ªmove_hiddí_fûes
();

153 
	gpublic
:

154 
ªsˇn
();

155 
ªsˇn_kìp_fûíame
();

156 
show
();

157 
shown
();

158 
ãxtcﬁ‹
(
Fl_Cﬁ‹
 
c
);

159 
Fl_Cﬁ‹
 
ãxtcﬁ‹
();

160 
ãxtf⁄t
(
Fl_F⁄t
 
f
);

161 
Fl_F⁄t
 
ãxtf⁄t
();

162 
ãxtsize
(
Fl_F⁄tsize
 
s
);

163 
Fl_F⁄tsize
 
ãxtsize
();

164 
ty≥
(
t
);

165 
ty≥
();

166 * 
	$u£r_d©a
() const;

167 
	`u£r_d©a
(*
d
);

168 c⁄° *
	`vÆue
(
f
 = 1);

169 
	`vÆue
(c⁄° *
fûíame
);

170 
	`visibÀ
();

174 c⁄° *
add_Áv‹ôes_œbñ
;

178 c⁄° *
Æl_fûes_œbñ
;

182 c⁄° *
cu°om_fûãr_œbñ
;

186 c⁄° *
exi°ög_fûe_œbñ
;

190 c⁄° *
Áv‹ôes_œbñ
;

194 c⁄° *
fûíame_œbñ
;

198 c⁄° *
fûesy°ems_œbñ
;

202 c⁄° *
m™age_Áv‹ôes_œbñ
;

206 c⁄° *
√w_dúe˘‹y_œbñ
;

210 c⁄° *
√w_dúe˘‹y_toﬁtù
;

214 c⁄° *
¥evõw_œbñ
;

218 c⁄° *
ßve_œbñ
;

222 c⁄° *
show_œbñ
;

226 c⁄° *
hiddí_œbñ
;

231 
Fl_Fûe_S‹t_F
 *
s‹t
;

232 
¥iv©e
:

233 
Fl_Widgë
* 
ext_group
;

234 
public
:

235 
Fl_Widgë
* 
	`add_exåa
(Fl_Widgë* 
gr
);

236 
	}
};

237 
FL_EXPORT
 *
Ê_dú_choo£r
(c⁄° *
mesßge
,c⁄° *
‚ame
,
ªœtive
=0);

238 
FL_EXPORT
 *
Ê_fûe_choo£r
(c⁄° *
mesßge
,c⁄° *
∑t
,c⁄° *
‚ame
,
ªœtive
=0);

239 
FL_EXPORT
 
Ê_fûe_choo£r_ˇŒback
((*
cb
)(const *));

240 
FL_EXPORT
 
	`Ê_fûe_choo£r_ok_œbñ
(c⁄° *
l
);

	@/home/lixing/include/FL/Fl_Scrollbar.H

22 #i‚de‡
Fl_S¸ﬁlb¨_H


23 
	#Fl_S¸ﬁlb¨_H


	)

25 
	~"Fl_Slidî.H
"

43 ˛as†
	cFL_EXPORT
 
	mFl_S¸ﬁlb¨
 : 
public
 
Fl_Slidî
 {

45 
löesize_
;

46 
	mpushed_
;

47 
timeout_cb
(*);

48 
ö¸emít_cb
();

49 
	m¥Ÿe˘ed
:

50 
døw
();

52 
	mpublic
:

54 
Fl_S¸ﬁlb¨
(
X
,
Y
,
W
,
H
, c⁄° *
L
 = 0);

55 ~
Fl_S¸ﬁlb¨
();

56 
h™dÀ
();

65 
	$vÆue
(Ëc⁄° { (
Fl_Slidî
::
	`vÆue
());}

73 
	$vÆue
(
p
Ë{ (
Fl_Slidî
::
	`vÆue
((Ì));
	}
}

89 
	$vÆue
(
pos
, 
wödowSize
, 
fú°
, 
tŸÆ
) {

90  
	`s¸ﬁlvÆue
(
pos
, 
wödowSize
, 
fú°
, 
tŸÆ
);

91 
	}
}

96 
	$löesize
(Ëc⁄° { 
löesize_
;
	}
}

103 
	$löesize
(
i
Ë{
löesize_
 = i;
	}
}

	@/home/lixing/include/FL/Fl_Value_Input.H

22 #i‚de‡
Fl_VÆue_I≈ut_H


23 
	#Fl_VÆue_I≈ut_H


	)

25 
	~"Fl_VÆu©‹.H
"

26 
	~"Fl_I≈ut.H
"

56 ˛as†
	cFL_EXPORT
 
	mFl_VÆue_I≈ut
 : 
public
 
Fl_VÆu©‹
 {

57 
public
:

60 
Fl_I≈ut
 
öput
;

61 
	m¥iv©e
:

62 
so·_
;

63 
öput_cb
(
Fl_Widgë
*,*);

64 
vútuÆ
 
vÆue_damage
();

65 
	mpublic
:

66 
h™dÀ
();

67 
	m¥Ÿe˘ed
:

68 
døw
();

69 
	mpublic
:

70 
ªsize
(,,,);

71 
Fl_VÆue_I≈ut
(
x
,
y
,
w
,
h
,c⁄° *
l
=0);

72 ~
Fl_VÆue_I≈ut
();

75 
	$so·
(
s
Ë{
so·_
 = s;}

82 
	$so·
(Ëc⁄° { 
so·_
;
	}
}

87 
	$sh‹tcut
(Ëc⁄° { 
öput
.
	`sh‹tcut
();
	}
}

105 
	$sh‹tcut
(
s
Ë{
öput
.
	`sh‹tcut
(s);
	}
}

108 
Fl_F⁄t
 
	$ãxtf⁄t
(Ëc⁄° { 
öput
.
	`ãxtf⁄t
();
	}
}

110 
	$ãxtf⁄t
(
Fl_F⁄t
 
s
Ë{
öput
.
	`ãxtf⁄t
(s);
	}
}

112 
Fl_F⁄tsize
 
	$ãxtsize
(Ëc⁄° { 
öput
.
	`ãxtsize
();
	}
}

114 
	$ãxtsize
(
Fl_F⁄tsize
 
s
Ë{
öput
.
	`ãxtsize
(s);
	}
}

116 
Fl_Cﬁ‹
 
	$ãxtcﬁ‹
(Ëc⁄° { 
öput
.
	`ãxtcﬁ‹
();
	}
}

118 
	$ãxtcﬁ‹
(
Fl_Cﬁ‹
 
n
Ë{
öput
.
	`ãxtcﬁ‹
“);
	}
}

120 
Fl_Cﬁ‹
 
	$curs‹_cﬁ‹
(Ëc⁄° { 
öput
.
	`curs‹_cﬁ‹
();
	}
}

122 
	$curs‹_cﬁ‹
(
Fl_Cﬁ‹
 
n
Ë{
öput
.
	`curs‹_cﬁ‹
“);
	}
}

	@/home/lixing/include/FL/filename.H

25 #ifde‡
Ê_dúít_h_cy˛ic_ö˛ude


26 
	~"/u§/ö˛ude/dúít.h
"

29 #i‚de‡
FL_FILENAME_H


30 
	#FL_FILENAME_H


	)

32 
	~"Fl_Exp‹t.H
"

38 
	#FL_PATH_MAX
 2048

	)

54 
FL_EXPORT
 c⁄° *
Ê_fûíame_«me
(c⁄° * 
fûíame
);

55 
FL_EXPORT
 c⁄° *
Ê_fûíame_ext
(c⁄° *
buf
);

56 
FL_EXPORT
 *
Ê_fûíame_£ãxt
(*
to
, 
tﬁí
, c⁄° *
ext
);

57 
FL_EXPORT
 
Ê_fûíame_ex∑nd
(*
to
, 
tﬁí
, c⁄° *
‰om
);

58 
FL_EXPORT
 
Ê_fûíame_absﬁuã
(*
to
, 
tﬁí
, c⁄° *
‰om
);

59 
FL_EXPORT
 
Ê_fûíame_ªœtive
(*
to
, 
tﬁí
, c⁄° *
‰om
);

60 
FL_EXPORT
 
Ê_fûíame_m©ch
(c⁄° *
«me
, c⁄° *
∑âîn
);

61 
FL_EXPORT
 
Ê_fûíame_isdú
(c⁄° *
«me
);

63 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
FL_DOXYGEN
)

68 
ölöe
 *
	$Ê_fûíame_£ãxt
(*
to
, c⁄° *
ext
Ë{  
	`Ê_fûíame_£ãxt
—o, 
FL_PATH_MAX
,Éxt); 
	}
}

69 
ölöe
 
	$Ê_fûíame_ex∑nd
(*
to
, c⁄° *
‰om
Ë{  
	`Ê_fûíame_ex∑nd
—o, 
FL_PATH_MAX
, from); 
	}
}

70 
ölöe
 
	$Ê_fûíame_absﬁuã
(*
to
, c⁄° *
‰om
Ë{  
	`Ê_fûíame_absﬁuã
—o, 
FL_PATH_MAX
, from); 
	}
}

71 
FL_EXPORT
 
Ê_fûíame_ªœtive
(*
to
, 
tﬁí
, c⁄° *
‰om
, c⁄° *
cwd
);

72 
ölöe
 
	$Ê_fûíame_ªœtive
(*
to
, c⁄° *
‰om
Ë{  
	`Ê_fûíame_ªœtive
—o, 
FL_PATH_MAX
, from); 
	}
}

76 #i‡
deföed
(
WIN32
Ë&& !deföed(
__MINGW32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__WATCOMC__
)

78 
	sdúít
 {
	md_«me
[1];};

80 #ñi‡
deföed
(
__WATCOMC__
)

81 
	~<sys/ty≥s.h
>

82 
	~<dúe˘.h
>

99 
	~<sys/ty≥s.h
>

100 
	#Ê_dúít_h_cy˛ic_ö˛ude


	)

101 
	~<dúít.h
>

102 #unde‡
Ê_dúít_h_cy˛ic_ö˛ude


105 #i‡
deföed
 (
__˝lu•lus
)

109 #i‡!
deföed
(
FL_DOXYGEN
)

110 
FL_EXPORT
 
Ê_Æphas‹t
(
dúít
 **, dirent **);

111 
FL_EXPORT
 
Ê_ˇ£Æphas‹t
(
dúít
 **, dirent **);

112 
FL_EXPORT
 
Ê_ˇ£numîics‹t
(
dúít
 **, dirent **);

113 
FL_EXPORT
 
Ê_numîics‹t
(
dúít
 **, dirent **);

116 (
	gFl_Fûe_S‹t_F
)(
	tdúít
 **, dirent **);

118 #i‡
deföed
(
__˝lu•lus
)

125 
FL_EXPORT
 
Ê_fûíame_li°
(c⁄° *
d
, 
dúít
 ***
l
,

126 
Fl_Fûe_S‹t_F
 *
s
 = 
Ê_numîics‹t
);

127 
FL_EXPORT
 
Ê_fûíame_‰ì_li°
(
dúít
 ***
l
, 
n
);

134 
FL_EXPORT
 
Ê_›í_uri
(c⁄° *
uri
, *
msg
 = (*)0,

135 
msgÀn
 = 0);

137 
FL_EXPORT
 
Ê_decode_uri
(*
uri
);

139 #i‚de‡
FL_DOXYGEN


147 
_Ê_fûíame_isdú_quick
(c⁄° *
«me
);

156 #ifde‡
FLTK_1_0_COMPAT


157 
	#fûíame_absﬁuã
 
Ê_fûíame_absﬁuã


	)

158 
	#fûíame_ex∑nd
 
Ê_fûíame_ex∑nd


	)

159 
	#fûíame_ext
 
Ê_fûíame_ext


	)

160 
	#fûíame_isdú
 
Ê_fûíame_isdú


	)

161 
	#fûíame_li°
 
Ê_fûíame_li°


	)

162 
	#fûíame_m©ch
 
Ê_fûíame_m©ch


	)

163 
	#fûíame_«me
 
Ê_fûíame_«me


	)

164 
	#fûíame_ªœtive
 
Ê_fûíame_ªœtive


	)

165 
	#fûíame_£ãxt
 
Ê_fûíame_£ãxt


	)

166 
	#numîics‹t
 
Ê_numîics‹t


	)

	@/home/lixing/include/FL/x.H

35 #i‡!
deföed
(
Fl_X_H
Ë&& !deföed(
FL_DOXYGEN
)

36 
	#Fl_X_H


	)

38 
	~"Enumî©i⁄s.H
"

40 #ifde‡
WIN32


41 
	~"wö32.H
"

42 #ñi‡
deföed
(
__APPLE__
)

43 
	~"mac.H
"

45 #i‡
deföed
(
_ABIN32
Ë|| deföed(
_ABI64
)

46 #¥agm®
£t
 
woff
 3322

48 
	~<X11/Xlib.h
>

49 
	~<X11/Xutû.h
>

50 #i‡
deföed
(
_ABIN32
Ë|| deföed(
_ABI64
)

51 #¥agm®
ª£t
 
woff
 3322

53 
	~<X11/X©om.h
>

54 
	~"Fl_Wödow.H
"

56 
Regi⁄
 
	tFl_Regi⁄
;

58 
FL_EXPORT
 
Ê_›í_di•œy
();

59 
FL_EXPORT
 
Ê_›í_di•œy
(
Di•œy
*);

60 
FL_EXPORT
 
Ê_˛o£_di•œy
();

63 
FL_EXPORT
 
Di•œy
 *
Ê_di•œy
;

64 
FL_EXPORT
 
Ê_s¸ìn
;

65 
FL_EXPORT
 
XVisuÆInfo
 *
Ê_visuÆ
;

66 
FL_EXPORT
 
Cﬁ‹m≠
 
Ê_cﬁ‹m≠
;

70 
FL_EXPORT
 
GC
 
Ê_gc
;

71 
FL_EXPORT
 
Wödow
 
Ê_wödow
;

72 
FL_EXPORT
 
ul⁄g
 
Ê_xpixñ
(
Fl_Cﬁ‹
 
i
);

73 
FL_EXPORT
 
ul⁄g
 
Ê_xpixñ
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

74 
FL_EXPORT
 
Ê_˛ù_ªgi⁄
(
Fl_Regi⁄
);

75 
FL_EXPORT
 
Fl_Regi⁄
 
Ê_˛ù_ªgi⁄
();

78 
FL_EXPORT
 
Ê_h™dÀ
(c⁄° 
XEvít
&);

81 
FL_EXPORT
 c⁄° 
XEvít
* 
Ê_xevít
;

82 
FL_EXPORT
 
ul⁄g
 
Ê_evít_time
;

85 
ul⁄g
 
	tFl_Offs¸ìn
;

86 
	#Ê_¸óã_offs¸ìn
(
w
,
h
Ë
	`XCª©ePixm≠
(
Ê_di•œy
, 
	`RoŸWödow
(Ê_di•œy, 
Ê_s¸ìn
), w, h, 
Ê_visuÆ
->
dïth
)

	)

88 
	#Ê_begö_offs¸ìn
(
pixm≠
) \

89 
Wödow
 
_sw
=
Ê_wödow
; fl_wödow=
pixm≠
; \

90 
Fl_SurÁ˚_Devi˚
 *
_ss
 = Fl_SurÁ˚_Devi˚::
	`surÁ˚
(); 
Fl_Di•œy_Devi˚
::
	`di•œy_devi˚
()->
	`£t_cuºít
(); \

91 
	`Ê_push_no_˛ù
()

	)

92 
	#Ê_íd_offs¸ìn
() \

93 
	`Ê_p›_˛ù
(); 
Ê_wödow
 = 
_sw
; 
_ss
->
	`£t_cuºít
()

	)

95 
FL_EXPORT
 
Ê_c›y_offs¸ìn
(
x
, 
y
, 
w
, 
h
, 
Fl_Offs¸ìn
 
pixm≠
, 
§cx
, 
§cy
);

96 
	#Ê_dñëe_offs¸ìn
(
pixm≠
Ë
	`XFªePixm≠
(
Ê_di•œy
,Öixm≠)

	)

99 
ul⁄g
 
	tFl_Bômask
;

101 
FL_EXPORT
 
Fl_Bômask
 
Ê_¸óã_bômask
(
w
, 
h
, c⁄° 
uch¨
 *
d©a
);

102 
FL_EXPORT
 
Fl_Bômask
 
Ê_¸óã_Æphamask
(
w
, 
h
, 
d
, 
ld
, c⁄° 
uch¨
 *
d©a
);

103 
FL_EXPORT
 
Ê_dñëe_bômask
(
Fl_Bômask
 
bm
);

105 #i‡
deföed
(
FL_LIBRARY
Ë|| deföed(
FL_INTERNALS
)

106 
FL_EXPORT
 
Wödow
 
Ê_mesßge_wödow
;

107 
FL_EXPORT
 *
Ê_x·f⁄t
;

108 
FL_EXPORT
 
Fl_Regi⁄
 
XRe˘™gÀRegi⁄
(
x
, 
y
, 
w
, 
h
);

117 ˛as†
	cFl_XF⁄t_On_Dem™d


119 
	mpublic
:

120 
	$Fl_XF⁄t_On_Dem™d
(
XF⁄tSåu˘
* 
p
 = 
NULL
Ë: 
	$±r
(
p
) { }

121 
Fl_XF⁄t_On_Dem™d
& 
›î©‹
=(c⁄° Fl_XF⁄t_On_Dem™d& 
x
)

122 { 
±r
 = 
x
.±r;  *
this
; 
	}
}

123 
	gFl_XF⁄t_On_Dem™d
& 
	g›î©‹
=(
XF⁄tSåu˘
* 
p
)

124 { 
±r
 = 
p
;  *
	gthis
; }

125 
XF⁄tSåu˘
* 
vÆue
();

126 
›î©‹
 
	gXF⁄tSåu˘
*(Ë{  
vÆue
(); }

127 
	gXF⁄tSåu˘
& 
	g›î©‹
*(Ë{  *
vÆue
(); }

128 
XF⁄tSåu˘
* 
	g›î©‹
->(Ë{  
vÆue
(); }

129 
boﬁ
 
	g›î©‹
==(c⁄° 
Fl_XF⁄t_On_Dem™d
& 
x
Ë{  
±r
 == x.ptr; }

130 
boﬁ
 
	g›î©‹
!=(c⁄° 
Fl_XF⁄t_On_Dem™d
& 
x
Ë{  
±r
 != x.ptr; }

131 
	g¥iv©e
:

132 
XF⁄tSåu˘
 *
±r
;

134 
FL_EXPORT
 
Fl_XF⁄t_On_Dem™d
 
Ê_xf⁄t
;

139 ˛as†
	cFL_EXPORT
 
	mFl_X
 {

140 
	mpublic
:

141 
Wödow
 
xid
;

142 
Wödow
 
	mŸhî_xid
;

143 
Fl_Wödow
 *
	mw
;

144 
Fl_Regi⁄
 
	mªgi⁄
;

145 
Fl_X
 *
	m√xt
;

146 
	mwaô_f‹_expo£
;

147 
	mbackbuf„r_bad
;

148 
Fl_X
* 
	mfú°
;

149 
Fl_X
* 
	$i
(c⁄° 
Fl_Wödow
* 
wi
Ë{ wi->
i
;}

150 
	$£twödow
(
Fl_Wödow
* 
wi
Ë{
w
=wi; wi->
i
=
this
;
	}
}

151 
£ndxjunk
();

152 
£t_deÁu…_ic⁄s
(c⁄° 
Fl_RGB_Image
*[], );

153 
£t_ic⁄s
();

154 
£t_curs‹
(
Fl_Curs‹
);

155 
£t_curs‹
(c⁄° 
Fl_RGB_Image
*, , );

156 
make_xid
(
Fl_Wödow
*,
XVisuÆInfo
* =
Ê_visuÆ
, 
Cﬁ‹m≠
=
Ê_cﬁ‹m≠
);

157 
Fl_X
* 
£t_xid
(
Fl_Wödow
*, 
Wödow
);

159 
	$Êush
(Ë{
w
->
	`Êush
();
	}
}

160 
	$x
(
Fl_Wödow
* 
wi
, 
X
Ë{wi->
	`x
(X);
	}
}

161 
	$y
(
Fl_Wödow
* 
wi
, 
Y
Ë{wi->
	`y
(Y);
	}
}

162 
ewmh_suµ‹ãd
();

163 
a˘iv©e_wödow
(
Wödow
 
w
);

166 
FL_EXPORT
 
Ê_ovîride_ªdúe˘
;

167 
FL_EXPORT
 
Ê_background_pixñ
;

169 
ölöe
 
Wödow
 
	$Ê_xid
(c⁄° 
Fl_Wödow
* 
w
Ë{ 
Fl_X
 *
xTemp
 = Fl_X::
	`i
(w);  xTem∞? xTemp->
xid
 : 0; 
	}
}

173 
FL_EXPORT
 
Wödow
 
Ê_xid_
(c⁄° 
Fl_Wödow
* 
w
);

174 
	#Ê_xid
(
w
Ë
	`Ê_xid_
(w)

	)

178 
FL_EXPORT
 
Fl_Wödow
* 
Ê_föd
(
Wödow
 
xid
);

182 
ölöe
 
Ê_›í_ˇŒback
((*)(c⁄° *)Ë{
	}
}

184 
FL_EXPORT
 
Ê_∑r£_cﬁ‹
(c⁄° * 
p
, 
uch¨
& 
r
, uch¨& 
g
, uch¨& 
b
);

	@/home/lixing/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

56 
	#GL_GLEXT_VERSION
 20150809

	)

68 #i‚de‡
GL_VERSION_1_2


69 
	#GL_VERSION_1_2
 1

	)

70 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

71 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

72 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

73 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

74 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

75 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

76 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

77 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

78 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

79 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

80 
	#GL_TEXTURE_3D
 0x806F

	)

81 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

82 
	#GL_TEXTURE_DEPTH
 0x8071

	)

83 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

84 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

85 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

86 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

87 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

88 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

89 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

90 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

91 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

92 
	#GL_BGR
 0x80E0

	)

93 
	#GL_BGRA
 0x80E1

	)

94 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

95 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

96 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

97 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

98 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

99 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

100 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

101 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

102 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

103 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

104 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

105 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

106 
	#GL_RESCALE_NORMAL
 0x803A

	)

107 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

108 
	#GL_SINGLE_COLOR
 0x81F9

	)

109 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

110 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

111 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

112 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

113 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

114 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

115 #ifde‡
GL_GLEXT_PROTOTYPES


116 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

117 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

118 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

119 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

123 #i‚de‡
GL_VERSION_1_3


124 
	#GL_VERSION_1_3
 1

	)

125 
	#GL_TEXTURE0
 0x84C0

	)

126 
	#GL_TEXTURE1
 0x84C1

	)

127 
	#GL_TEXTURE2
 0x84C2

	)

128 
	#GL_TEXTURE3
 0x84C3

	)

129 
	#GL_TEXTURE4
 0x84C4

	)

130 
	#GL_TEXTURE5
 0x84C5

	)

131 
	#GL_TEXTURE6
 0x84C6

	)

132 
	#GL_TEXTURE7
 0x84C7

	)

133 
	#GL_TEXTURE8
 0x84C8

	)

134 
	#GL_TEXTURE9
 0x84C9

	)

135 
	#GL_TEXTURE10
 0x84CA

	)

136 
	#GL_TEXTURE11
 0x84CB

	)

137 
	#GL_TEXTURE12
 0x84CC

	)

138 
	#GL_TEXTURE13
 0x84CD

	)

139 
	#GL_TEXTURE14
 0x84CE

	)

140 
	#GL_TEXTURE15
 0x84CF

	)

141 
	#GL_TEXTURE16
 0x84D0

	)

142 
	#GL_TEXTURE17
 0x84D1

	)

143 
	#GL_TEXTURE18
 0x84D2

	)

144 
	#GL_TEXTURE19
 0x84D3

	)

145 
	#GL_TEXTURE20
 0x84D4

	)

146 
	#GL_TEXTURE21
 0x84D5

	)

147 
	#GL_TEXTURE22
 0x84D6

	)

148 
	#GL_TEXTURE23
 0x84D7

	)

149 
	#GL_TEXTURE24
 0x84D8

	)

150 
	#GL_TEXTURE25
 0x84D9

	)

151 
	#GL_TEXTURE26
 0x84DA

	)

152 
	#GL_TEXTURE27
 0x84DB

	)

153 
	#GL_TEXTURE28
 0x84DC

	)

154 
	#GL_TEXTURE29
 0x84DD

	)

155 
	#GL_TEXTURE30
 0x84DE

	)

156 
	#GL_TEXTURE31
 0x84DF

	)

157 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

158 
	#GL_MULTISAMPLE
 0x809D

	)

159 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

160 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

161 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

162 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

163 
	#GL_SAMPLES
 0x80A9

	)

164 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

165 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

166 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

167 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

168 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

169 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

170 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

171 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

172 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

173 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

174 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

175 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

176 
	#GL_COMPRESSED_RGB
 0x84ED

	)

177 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

178 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

179 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

180 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

181 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

182 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

183 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

184 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

185 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

186 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

187 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

188 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

189 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

190 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

191 
	#GL_NORMAL_MAP
 0x8511

	)

192 
	#GL_REFLECTION_MAP
 0x8512

	)

193 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

194 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

195 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

196 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

197 
	#GL_COMBINE
 0x8570

	)

198 
	#GL_COMBINE_RGB
 0x8571

	)

199 
	#GL_COMBINE_ALPHA
 0x8572

	)

200 
	#GL_SOURCE0_RGB
 0x8580

	)

201 
	#GL_SOURCE1_RGB
 0x8581

	)

202 
	#GL_SOURCE2_RGB
 0x8582

	)

203 
	#GL_SOURCE0_ALPHA
 0x8588

	)

204 
	#GL_SOURCE1_ALPHA
 0x8589

	)

205 
	#GL_SOURCE2_ALPHA
 0x858A

	)

206 
	#GL_OPERAND0_RGB
 0x8590

	)

207 
	#GL_OPERAND1_RGB
 0x8591

	)

208 
	#GL_OPERAND2_RGB
 0x8592

	)

209 
	#GL_OPERAND0_ALPHA
 0x8598

	)

210 
	#GL_OPERAND1_ALPHA
 0x8599

	)

211 
	#GL_OPERAND2_ALPHA
 0x859A

	)

212 
	#GL_RGB_SCALE
 0x8573

	)

213 
	#GL_ADD_SIGNED
 0x8574

	)

214 
	#GL_INTERPOLATE
 0x8575

	)

215 
	#GL_SUBTRACT
 0x84E7

	)

216 
	#GL_CONSTANT
 0x8576

	)

217 
	#GL_PRIMARY_COLOR
 0x8577

	)

218 
	#GL_PREVIOUS
 0x8578

	)

219 
	#GL_DOT3_RGB
 0x86AE

	)

220 
	#GL_DOT3_RGBA
 0x86AF

	)

221 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

222 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

223 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

224 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

225 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

230 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

231 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

232 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

263 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

264 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

265 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

266 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

267 #ifde‡
GL_GLEXT_PROTOTYPES


268 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

269 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

270 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

271 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

272 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

277 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

278 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

279 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

280 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

310 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

311 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

312 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

313 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

317 #i‚de‡
GL_VERSION_1_4


318 
	#GL_VERSION_1_4
 1

	)

319 
	#GL_BLEND_DST_RGB
 0x80C8

	)

320 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

321 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

322 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

323 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

324 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

325 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

326 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

327 
	#GL_MIRRORED_REPEAT
 0x8370

	)

328 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

329 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

330 
	#GL_INCR_WRAP
 0x8507

	)

331 
	#GL_DECR_WRAP
 0x8508

	)

332 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

333 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

334 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

335 
	#GL_POINT_SIZE_MIN
 0x8126

	)

336 
	#GL_POINT_SIZE_MAX
 0x8127

	)

337 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

338 
	#GL_GENERATE_MIPMAP
 0x8191

	)

339 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

340 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

341 
	#GL_FOG_COORDINATE
 0x8451

	)

342 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

343 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

344 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

345 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

346 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

347 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

348 
	#GL_COLOR_SUM
 0x8458

	)

349 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

350 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

351 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

354 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

355 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

356 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

357 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

358 
	#GL_FUNC_ADD
 0x8006

	)

359 
	#GL_FUNC_SUBTRACT
 0x800A

	)

360 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

361 
	#GL_MIN
 0x8007

	)

362 
	#GL_MAX
 0x8008

	)

363 
	#GL_CONSTANT_COLOR
 0x8001

	)

364 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

365 
	#GL_CONSTANT_ALPHA
 0x8003

	)

366 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

368 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

369 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

370 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

371 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

372 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

374 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

375 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

376 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

379 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

380 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

381 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

396 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

397 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

412 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

416 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

417 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

418 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

419 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

420 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

422 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

423 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

424 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

427 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

428 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

429 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

444 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

445 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

446 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

452 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

453 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

454 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

460 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

461 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

465 #i‚de‡
GL_VERSION_1_5


466 
	#GL_VERSION_1_5
 1

	)

467 
	~<°ddef.h
>

468 
±rdiff_t
 
	tGLsizeùå
;

469 
±rdiff_t
 
	tGLöçå
;

470 
	#GL_BUFFER_SIZE
 0x8764

	)

471 
	#GL_BUFFER_USAGE
 0x8765

	)

472 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

473 
	#GL_CURRENT_QUERY
 0x8865

	)

474 
	#GL_QUERY_RESULT
 0x8866

	)

475 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

476 
	#GL_ARRAY_BUFFER
 0x8892

	)

477 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

478 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

479 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

480 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

481 
	#GL_READ_ONLY
 0x88B8

	)

482 
	#GL_WRITE_ONLY
 0x88B9

	)

483 
	#GL_READ_WRITE
 0x88BA

	)

484 
	#GL_BUFFER_ACCESS
 0x88BB

	)

485 
	#GL_BUFFER_MAPPED
 0x88BC

	)

486 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

487 
	#GL_STREAM_DRAW
 0x88E0

	)

488 
	#GL_STREAM_READ
 0x88E1

	)

489 
	#GL_STREAM_COPY
 0x88E2

	)

490 
	#GL_STATIC_DRAW
 0x88E4

	)

491 
	#GL_STATIC_READ
 0x88E5

	)

492 
	#GL_STATIC_COPY
 0x88E6

	)

493 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

494 
	#GL_DYNAMIC_READ
 0x88E9

	)

495 
	#GL_DYNAMIC_COPY
 0x88EA

	)

496 
	#GL_SAMPLES_PASSED
 0x8914

	)

497 
	#GL_SRC1_ALPHA
 0x8589

	)

498 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

499 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

500 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

501 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

502 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

503 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

504 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

505 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

506 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

507 
	#GL_FOG_COORD_SRC
 0x8450

	)

508 
	#GL_FOG_COORD
 0x8451

	)

509 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

510 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

511 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

512 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

513 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

514 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

515 
	#GL_SRC0_RGB
 0x8580

	)

516 
	#GL_SRC1_RGB
 0x8581

	)

517 
	#GL_SRC2_RGB
 0x8582

	)

518 
	#GL_SRC0_ALPHA
 0x8588

	)

519 
	#GL_SRC2_ALPHA
 0x858A

	)

520 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

521 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

522 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

523 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

524 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

525 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

526 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

527 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

528 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

529 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

530 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

531 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

532 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

533 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

534 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

535 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

537 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

538 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

539 #ifde‡
GL_GLEXT_PROTOTYPES


540 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

541 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

542 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

543 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

544 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

545 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

546 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

547 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

548 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

549 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

550 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

551 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

552 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

553 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

554 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

555 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

557 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

558 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

562 #i‚de‡
GL_VERSION_2_0


563 
	#GL_VERSION_2_0
 1

	)

564 
	tGLch¨
;

565 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

566 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

567 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

568 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

569 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

570 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

571 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

572 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

573 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

574 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

575 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

576 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

577 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

578 
	#GL_DRAW_BUFFER0
 0x8825

	)

579 
	#GL_DRAW_BUFFER1
 0x8826

	)

580 
	#GL_DRAW_BUFFER2
 0x8827

	)

581 
	#GL_DRAW_BUFFER3
 0x8828

	)

582 
	#GL_DRAW_BUFFER4
 0x8829

	)

583 
	#GL_DRAW_BUFFER5
 0x882A

	)

584 
	#GL_DRAW_BUFFER6
 0x882B

	)

585 
	#GL_DRAW_BUFFER7
 0x882C

	)

586 
	#GL_DRAW_BUFFER8
 0x882D

	)

587 
	#GL_DRAW_BUFFER9
 0x882E

	)

588 
	#GL_DRAW_BUFFER10
 0x882F

	)

589 
	#GL_DRAW_BUFFER11
 0x8830

	)

590 
	#GL_DRAW_BUFFER12
 0x8831

	)

591 
	#GL_DRAW_BUFFER13
 0x8832

	)

592 
	#GL_DRAW_BUFFER14
 0x8833

	)

593 
	#GL_DRAW_BUFFER15
 0x8834

	)

594 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

595 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

596 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

597 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

598 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

599 
	#GL_VERTEX_SHADER
 0x8B31

	)

600 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

601 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

602 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

603 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

604 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

605 
	#GL_SHADER_TYPE
 0x8B4F

	)

606 
	#GL_FLOAT_VEC2
 0x8B50

	)

607 
	#GL_FLOAT_VEC3
 0x8B51

	)

608 
	#GL_FLOAT_VEC4
 0x8B52

	)

609 
	#GL_INT_VEC2
 0x8B53

	)

610 
	#GL_INT_VEC3
 0x8B54

	)

611 
	#GL_INT_VEC4
 0x8B55

	)

612 
	#GL_BOOL
 0x8B56

	)

613 
	#GL_BOOL_VEC2
 0x8B57

	)

614 
	#GL_BOOL_VEC3
 0x8B58

	)

615 
	#GL_BOOL_VEC4
 0x8B59

	)

616 
	#GL_FLOAT_MAT2
 0x8B5A

	)

617 
	#GL_FLOAT_MAT3
 0x8B5B

	)

618 
	#GL_FLOAT_MAT4
 0x8B5C

	)

619 
	#GL_SAMPLER_1D
 0x8B5D

	)

620 
	#GL_SAMPLER_2D
 0x8B5E

	)

621 
	#GL_SAMPLER_3D
 0x8B5F

	)

622 
	#GL_SAMPLER_CUBE
 0x8B60

	)

623 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

624 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

625 
	#GL_DELETE_STATUS
 0x8B80

	)

626 
	#GL_COMPILE_STATUS
 0x8B81

	)

627 
	#GL_LINK_STATUS
 0x8B82

	)

628 
	#GL_VALIDATE_STATUS
 0x8B83

	)

629 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

630 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

631 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

632 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

633 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

634 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

635 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

636 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

637 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

638 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

639 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

640 
	#GL_LOWER_LEFT
 0x8CA1

	)

641 
	#GL_UPPER_LEFT
 0x8CA2

	)

642 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

643 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

644 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

645 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

646 
	#GL_POINT_SPRITE
 0x8861

	)

647 
	#GL_COORD_REPLACE
 0x8862

	)

648 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

649 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

650 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

651 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

652 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

653 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

654 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

655 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

656 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

659 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

660 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

661 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

662 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

663 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

664 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

665 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

666 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

667 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

668 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

669 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

670 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

671 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

672 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

673 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

675 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

676 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

678 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

680 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

681 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

682 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

683 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

684 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

685 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

686 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

687 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

688 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

689 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

690 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

691 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

692 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

701 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

742 #ifde‡
GL_GLEXT_PROTOTYPES


743 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

744 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

745 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

746 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

747 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

748 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

749 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

750 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

751 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

752 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

753 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

754 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

755 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

756 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

757 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

758 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

759 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

760 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

761 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

762 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

763 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

764 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

765 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

766 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

767 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

769 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

770 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

772 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

774 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

776 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

777 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

778 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

779 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

780 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

781 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

782 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

783 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

784 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

785 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

786 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

799 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

800 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

801 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

802 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

803 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

804 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

805 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

806 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

839 #i‚de‡
GL_VERSION_2_1


840 
	#GL_VERSION_2_1
 1

	)

841 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

842 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

843 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

844 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

845 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

846 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

847 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

848 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

849 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

850 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

851 
	#GL_SRGB
 0x8C40

	)

852 
	#GL_SRGB8
 0x8C41

	)

853 
	#GL_SRGB_ALPHA
 0x8C42

	)

854 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

855 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

856 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

857 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

858 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

859 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

860 
	#GL_SLUMINANCE
 0x8C46

	)

861 
	#GL_SLUMINANCE8
 0x8C47

	)

862 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

863 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

864 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

865 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

866 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

867 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

868 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

869 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

870 #ifde‡
GL_GLEXT_PROTOTYPES


871 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

872 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

873 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 #i‚de‡
GL_VERSION_3_0


881 
	#GL_VERSION_3_0
 1

	)

882 
	tGLhÆf
;

883 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

884 
	#GL_CLIP_DISTANCE0
 0x3000

	)

885 
	#GL_CLIP_DISTANCE1
 0x3001

	)

886 
	#GL_CLIP_DISTANCE2
 0x3002

	)

887 
	#GL_CLIP_DISTANCE3
 0x3003

	)

888 
	#GL_CLIP_DISTANCE4
 0x3004

	)

889 
	#GL_CLIP_DISTANCE5
 0x3005

	)

890 
	#GL_CLIP_DISTANCE6
 0x3006

	)

891 
	#GL_CLIP_DISTANCE7
 0x3007

	)

892 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

893 
	#GL_MAJOR_VERSION
 0x821B

	)

894 
	#GL_MINOR_VERSION
 0x821C

	)

895 
	#GL_NUM_EXTENSIONS
 0x821D

	)

896 
	#GL_CONTEXT_FLAGS
 0x821E

	)

897 
	#GL_COMPRESSED_RED
 0x8225

	)

898 
	#GL_COMPRESSED_RG
 0x8226

	)

899 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

900 
	#GL_RGBA32F
 0x8814

	)

901 
	#GL_RGB32F
 0x8815

	)

902 
	#GL_RGBA16F
 0x881A

	)

903 
	#GL_RGB16F
 0x881B

	)

904 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

905 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

906 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

907 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

908 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

909 
	#GL_FIXED_ONLY
 0x891D

	)

910 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

911 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

912 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

913 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

914 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

915 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

916 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

917 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

918 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

919 
	#GL_RGB9_E5
 0x8C3D

	)

920 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

921 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

922 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

923 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

925 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

926 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

928 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

929 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

930 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

931 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

933 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

934 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

936 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

937 
	#GL_RGBA32UI
 0x8D70

	)

938 
	#GL_RGB32UI
 0x8D71

	)

939 
	#GL_RGBA16UI
 0x8D76

	)

940 
	#GL_RGB16UI
 0x8D77

	)

941 
	#GL_RGBA8UI
 0x8D7C

	)

942 
	#GL_RGB8UI
 0x8D7D

	)

943 
	#GL_RGBA32I
 0x8D82

	)

944 
	#GL_RGB32I
 0x8D83

	)

945 
	#GL_RGBA16I
 0x8D88

	)

946 
	#GL_RGB16I
 0x8D89

	)

947 
	#GL_RGBA8I
 0x8D8E

	)

948 
	#GL_RGB8I
 0x8D8F

	)

949 
	#GL_RED_INTEGER
 0x8D94

	)

950 
	#GL_GREEN_INTEGER
 0x8D95

	)

951 
	#GL_BLUE_INTEGER
 0x8D96

	)

952 
	#GL_RGB_INTEGER
 0x8D98

	)

953 
	#GL_RGBA_INTEGER
 0x8D99

	)

954 
	#GL_BGR_INTEGER
 0x8D9A

	)

955 
	#GL_BGRA_INTEGER
 0x8D9B

	)

956 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

957 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

958 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

959 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

960 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

961 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

962 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

963 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

964 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

965 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

966 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

967 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

968 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

969 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

970 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

971 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

972 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

973 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

974 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

975 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

976 
	#GL_QUERY_WAIT
 0x8E13

	)

977 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

978 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

979 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

980 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

981 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

982 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

983 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

984 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

985 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

986 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

987 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

988 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

989 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

990 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

991 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

992 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

993 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

994 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

995 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

996 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

997 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

998 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

999 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1000 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1001 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1002 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1003 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1004 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1005 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1006 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1007 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1008 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1009 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1010 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1011 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1012 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1013 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1014 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1015 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1016 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1017 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1018 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1019 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1020 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1021 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1022 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1023 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1024 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1025 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1026 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1027 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1028 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1029 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1030 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1031 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1032 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1033 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1034 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1035 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1036 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1037 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1038 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1039 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1040 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1041 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1042 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1043 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1044 
	#GL_COLOR_ATTACHMENT16
 0x8CF0

	)

1045 
	#GL_COLOR_ATTACHMENT17
 0x8CF1

	)

1046 
	#GL_COLOR_ATTACHMENT18
 0x8CF2

	)

1047 
	#GL_COLOR_ATTACHMENT19
 0x8CF3

	)

1048 
	#GL_COLOR_ATTACHMENT20
 0x8CF4

	)

1049 
	#GL_COLOR_ATTACHMENT21
 0x8CF5

	)

1050 
	#GL_COLOR_ATTACHMENT22
 0x8CF6

	)

1051 
	#GL_COLOR_ATTACHMENT23
 0x8CF7

	)

1052 
	#GL_COLOR_ATTACHMENT24
 0x8CF8

	)

1053 
	#GL_COLOR_ATTACHMENT25
 0x8CF9

	)

1054 
	#GL_COLOR_ATTACHMENT26
 0x8CFA

	)

1055 
	#GL_COLOR_ATTACHMENT27
 0x8CFB

	)

1056 
	#GL_COLOR_ATTACHMENT28
 0x8CFC

	)

1057 
	#GL_COLOR_ATTACHMENT29
 0x8CFD

	)

1058 
	#GL_COLOR_ATTACHMENT30
 0x8CFE

	)

1059 
	#GL_COLOR_ATTACHMENT31
 0x8CFF

	)

1060 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1061 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1062 
	#GL_FRAMEBUFFER
 0x8D40

	)

1063 
	#GL_RENDERBUFFER
 0x8D41

	)

1064 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1065 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1066 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1067 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1068 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1069 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1070 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1071 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1072 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1073 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1074 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1075 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1076 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1077 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1078 
	#GL_MAX_SAMPLES
 0x8D57

	)

1079 
	#GL_INDEX
 0x8222

	)

1080 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1081 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1082 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1083 
	#GL_HALF_FLOAT
 0x140B

	)

1084 
	#GL_MAP_READ_BIT
 0x0001

	)

1085 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1086 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1087 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1088 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1089 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1090 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1091 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1092 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1093 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1094 
	#GL_RG
 0x8227

	)

1095 
	#GL_RG_INTEGER
 0x8228

	)

1096 
	#GL_R8
 0x8229

	)

1097 
	#GL_R16
 0x822A

	)

1098 
	#GL_RG8
 0x822B

	)

1099 
	#GL_RG16
 0x822C

	)

1100 
	#GL_R16F
 0x822D

	)

1101 
	#GL_R32F
 0x822E

	)

1102 
	#GL_RG16F
 0x822F

	)

1103 
	#GL_RG32F
 0x8230

	)

1104 
	#GL_R8I
 0x8231

	)

1105 
	#GL_R8UI
 0x8232

	)

1106 
	#GL_R16I
 0x8233

	)

1107 
	#GL_R16UI
 0x8234

	)

1108 
	#GL_R32I
 0x8235

	)

1109 
	#GL_R32UI
 0x8236

	)

1110 
	#GL_RG8I
 0x8237

	)

1111 
	#GL_RG8UI
 0x8238

	)

1112 
	#GL_RG16I
 0x8239

	)

1113 
	#GL_RG16UI
 0x823A

	)

1114 
	#GL_RG32I
 0x823B

	)

1115 
	#GL_RG32UI
 0x823C

	)

1116 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1117 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1118 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1119 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1120 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1121 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1122 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1123 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1124 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1125 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1126 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1127 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1128 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1129 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1130 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1131 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1132 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1133 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1134 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1136 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1137 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1148 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1149 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1150 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1151 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1152 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1153 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1154 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1155 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1156 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1157 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1158 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1159 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1160 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1161 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1162 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1163 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1164 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1165 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1166 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1167 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1168 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1169 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1170 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1171 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1172 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1173 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1174 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1175 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1176 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1177 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1178 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1179 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1180 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1181 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1182 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1183 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1184 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1185 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1186 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1187 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1188 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1190 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1191 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1192 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1193 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1194 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1195 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1196 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1197 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1198 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1199 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1200 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1201 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1202 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1203 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1204 #ifde‡
GL_GLEXT_PROTOTYPES


1205 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1206 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1207 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1208 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1209 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1211 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1212 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1213 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1214 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1215 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1216 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1217 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1218 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1219 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1221 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1222 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1227 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1228 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1229 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1230 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1231 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1232 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1233 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1234 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1235 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1236 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1237 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1238 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1239 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1240 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1241 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1242 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1243 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1244 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1245 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1246 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1247 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1248 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1249 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1250 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1251 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1252 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1253 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1254 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1255 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1256 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1257 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1258 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1259 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1260 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1261 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1262 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1263 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1264 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1265 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1266 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1267 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1268 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1269 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1270 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1271 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1272 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1273 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1274 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1275 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1276 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1277 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1278 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1279 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1280 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1281 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1282 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1283 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1284 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1285 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1286 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1287 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1288 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1292 #i‚de‡
GL_VERSION_3_1


1293 
	#GL_VERSION_3_1
 1

	)

1294 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1295 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1296 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1297 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1298 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1299 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1300 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1301 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1302 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1303 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1304 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1305 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1306 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1307 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1308 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1309 
	#GL_R8_SNORM
 0x8F94

	)

1310 
	#GL_RG8_SNORM
 0x8F95

	)

1311 
	#GL_RGB8_SNORM
 0x8F96

	)

1312 
	#GL_RGBA8_SNORM
 0x8F97

	)

1313 
	#GL_R16_SNORM
 0x8F98

	)

1314 
	#GL_RG16_SNORM
 0x8F99

	)

1315 
	#GL_RGB16_SNORM
 0x8F9A

	)

1316 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1317 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1318 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1319 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1320 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1321 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1322 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1323 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1324 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1325 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1326 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1327 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1328 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1329 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1330 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1331 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1332 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1333 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1334 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1335 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1336 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1337 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1338 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1339 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1340 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1341 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1342 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1343 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1344 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1345 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1346 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1347 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1348 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1349 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1350 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1351 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1352 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1353 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1354 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1355 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1356 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1357 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1358 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1359 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1360 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1361 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1362 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1363 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1364 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1365 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1366 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1367 #ifde‡
GL_GLEXT_PROTOTYPES


1368 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1369 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1370 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1371 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1372 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1373 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1374 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1375 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1376 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1377 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1378 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1379 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1383 #i‚de‡
GL_VERSION_3_2


1384 
	#GL_VERSION_3_2
 1

	)

1385 
__GLsync
 *
	tGLsync
;

1386 #i‚de‡
GLEXT_64_TYPES_DEFINED


1388 
	#GLEXT_64_TYPES_DEFINED


	)

1391 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1392 
	~<öây≥s.h
>

1393 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1394 
	~<öây≥s.h
>

1395 #i‡
deföed
(
__STDC__
)

1396 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1397 
	töt64_t
;

1398 
	tuöt64_t
;

1400 
	töt64_t
;

1401 
	tuöt64_t
;

1404 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1405 
	~<öây≥s.h
>

1406 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1407 
	~<°döt.h
>

1408 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1409 
	töt32_t
;

1410 
	töt64_t
;

1411 
	tuöt64_t
;

1412 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1413 
	~<°döt.h
>

1414 #ñi‡
deföed
(
_WIN32
)

1415 
__öt32
 
	töt32_t
;

1416 
__öt64
 
	töt64_t
;

1417 
	t__öt64
 
	tuöt64_t
;

1420 
	~<öây≥s.h
>

1423 
uöt64_t
 
	tGLuöt64
;

1424 
öt64_t
 
	tGLöt64
;

1425 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1426 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1427 
	#GL_LINES_ADJACENCY
 0x000A

	)

1428 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1429 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1430 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1431 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1432 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1433 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1434 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1435 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1436 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1437 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1438 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1439 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1440 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1441 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1442 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1443 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1444 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1445 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1446 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1447 
	#GL_DEPTH_CLAMP
 0x864F

	)

1448 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1449 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1450 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1451 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1452 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1453 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1454 
	#GL_OBJECT_TYPE
 0x9112

	)

1455 
	#GL_SYNC_CONDITION
 0x9113

	)

1456 
	#GL_SYNC_STATUS
 0x9114

	)

1457 
	#GL_SYNC_FLAGS
 0x9115

	)

1458 
	#GL_SYNC_FENCE
 0x9116

	)

1459 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1460 
	#GL_UNSIGNALED
 0x9118

	)

1461 
	#GL_SIGNALED
 0x9119

	)

1462 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1463 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1464 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1465 
	#GL_WAIT_FAILED
 0x911D

	)

1466 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1467 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1468 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1469 
	#GL_SAMPLE_MASK
 0x8E51

	)

1470 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1471 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1472 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1473 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1474 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1475 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1476 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1477 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1478 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1479 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1480 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1481 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1482 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1483 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1484 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1485 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1486 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1487 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1488 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1489 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1490 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1491 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1492 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1493 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1494 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1495 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1496 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1497 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1498 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1499 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1500 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1501 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1502 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1503 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1504 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1505 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1506 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1507 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1508 #ifde‡
GL_GLEXT_PROTOTYPES


1509 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1510 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1511 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1512 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1513 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1514 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1515 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1516 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1517 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1518 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1519 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1520 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1521 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1522 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1523 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1524 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1525 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1526 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1527 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1531 #i‚de‡
GL_VERSION_3_3


1532 
	#GL_VERSION_3_3
 1

	)

1533 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1534 
	#GL_SRC1_COLOR
 0x88F9

	)

1535 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1536 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1537 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1538 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1539 
	#GL_SAMPLER_BINDING
 0x8919

	)

1540 
	#GL_RGB10_A2UI
 0x906F

	)

1541 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1542 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1543 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1544 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1545 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1546 
	#GL_TIME_ELAPSED
 0x88BF

	)

1547 
	#GL_TIMESTAMP
 0x8E28

	)

1548 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1549 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1550 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1551 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1552 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1553 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1554 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1555 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1556 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1557 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1558 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1559 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1560 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1561 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1562 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1563 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1564 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1565 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1566 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1567 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1568 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1569 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1570 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1571 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1572 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1573 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1574 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1575 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1576 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1577 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1578 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1579 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1580 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1581 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1582 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1583 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1584 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1585 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1586 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1587 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1588 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1589 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1590 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1591 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1592 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1593 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1594 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1595 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1596 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1597 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1598 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1599 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1600 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1601 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1602 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1603 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1604 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1605 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1606 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1607 #ifde‡
GL_GLEXT_PROTOTYPES


1608 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1609 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1610 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1611 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1613 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1614 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1615 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1616 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1617 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1618 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1619 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1620 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1621 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1622 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1623 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1624 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1625 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1626 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1627 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1628 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1629 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1630 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1631 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1632 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1633 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1634 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1635 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1636 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1637 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1638 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1639 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1640 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1641 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1642 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1643 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1644 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1645 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1646 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1647 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1648 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1649 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1650 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1651 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1652 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1653 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1654 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1655 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1656 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1657 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1658 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1659 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1660 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1661 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1662 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1663 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1664 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1665 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1669 #i‚de‡
GL_VERSION_4_0


1670 
	#GL_VERSION_4_0
 1

	)

1671 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1672 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1673 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1674 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1675 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1676 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1677 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1678 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1679 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1680 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1681 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1682 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1683 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1684 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1685 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1686 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1687 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1688 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1689 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1690 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1691 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1692 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1693 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1694 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1695 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1696 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1697 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1698 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1699 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1700 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1701 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1702 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1703 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1704 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1705 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1706 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1707 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1708 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1709 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1710 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1711 
	#GL_PATCHES
 0x000E

	)

1712 
	#GL_PATCH_VERTICES
 0x8E72

	)

1713 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1714 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1715 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1716 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1717 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1718 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1719 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1720 
	#GL_ISOLINES
 0x8E7A

	)

1721 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1722 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1723 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1724 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1725 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1726 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1727 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1728 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1729 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1730 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1731 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1732 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1733 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1734 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1735 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1736 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1737 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1738 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1739 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1740 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1741 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1742 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1743 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1744 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1745 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1746 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1747 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1748 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1750 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1751 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1752 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1753 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1754 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1755 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1756 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1757 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1758 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1760 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1761 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1762 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1763 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1764 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1765 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1766 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1767 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1768 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1769 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1772 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1773 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1774 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1775 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1776 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1777 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1778 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1779 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1780 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1781 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1782 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1783 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1784 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1785 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1786 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1787 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1788 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1789 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1790 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1791 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1792 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1793 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1794 #ifde‡
GL_GLEXT_PROTOTYPES


1795 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1797 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1798 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1799 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1800 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1801 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1802 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1803 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1804 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1805 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1807 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1808 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1809 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1810 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1811 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1812 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1813 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1814 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1815 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1816 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1817 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1818 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1819 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1820 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1821 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1822 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1823 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1824 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1825 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1826 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1827 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1828 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1829 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1830 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1831 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1832 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1833 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1834 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1835 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1836 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1837 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1838 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1839 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1840 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1844 #i‚de‡
GL_VERSION_4_1


1845 
	#GL_VERSION_4_1
 1

	)

1846 
	#GL_FIXED
 0x140C

	)

1847 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1848 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1849 
	#GL_LOW_FLOAT
 0x8DF0

	)

1850 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1851 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1852 
	#GL_LOW_INT
 0x8DF3

	)

1853 
	#GL_MEDIUM_INT
 0x8DF4

	)

1854 
	#GL_HIGH_INT
 0x8DF5

	)

1855 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1856 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1857 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1858 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1859 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1860 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1861 
	#GL_RGB565
 0x8D62

	)

1862 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1863 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1864 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1865 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1866 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1867 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1868 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1869 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1870 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1871 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1872 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1873 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1874 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1875 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1876 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1877 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1878 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1879 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1880 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1881 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1882 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1883 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1884 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1885 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1886 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1889 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1890 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1891 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1892 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1893 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1894 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1895 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1928 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1929 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1930 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1931 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1932 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1933 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1934 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1935 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1936 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1937 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1938 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1939 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1940 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1941 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1947 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1948 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1958 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1959 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1960 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1961 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1962 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1963 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1964 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1965 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1966 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1967 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1968 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1969 #ifde‡
GL_GLEXT_PROTOTYPES


1970 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1971 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1972 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1973 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1974 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1975 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1976 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1977 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1978 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1979 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1980 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1981 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1982 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1983 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1984 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1985 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2017 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2018 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2019 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2020 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2021 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2022 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2023 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2024 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2025 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2026 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2027 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2028 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2029 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2030 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2031 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2032 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2033 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2034 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2035 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2036 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2037 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2038 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2039 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2040 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2041 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2042 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2043 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2044 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2045 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2046 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2047 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2048 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2049 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2050 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2051 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2052 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2053 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2054 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2055 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2056 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2057 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2061 #i‚de‡
GL_VERSION_4_2


2062 
	#GL_VERSION_4_2
 1

	)

2063 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2064 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2065 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2066 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2067 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2068 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2069 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2070 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2071 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2072 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2073 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2074 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2075 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2076 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2077 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2078 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2079 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2080 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2081 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2082 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2083 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2084 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2085 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2086 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2087 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2088 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2089 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2090 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2091 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2092 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2093 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2094 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2095 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2096 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2097 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2098 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2099 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2100 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2101 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2102 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2103 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2104 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2105 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2106 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2107 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2108 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2109 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2110 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2111 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2112 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2113 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2114 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2115 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2116 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2117 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2118 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2119 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2120 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2121 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2122 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2123 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2124 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2125 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2126 
	#GL_IMAGE_1D
 0x904C

	)

2127 
	#GL_IMAGE_2D
 0x904D

	)

2128 
	#GL_IMAGE_3D
 0x904E

	)

2129 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2130 
	#GL_IMAGE_CUBE
 0x9050

	)

2131 
	#GL_IMAGE_BUFFER
 0x9051

	)

2132 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2133 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2134 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2135 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2136 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2137 
	#GL_INT_IMAGE_1D
 0x9057

	)

2138 
	#GL_INT_IMAGE_2D
 0x9058

	)

2139 
	#GL_INT_IMAGE_3D
 0x9059

	)

2140 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2141 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2142 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2143 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2144 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2145 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2146 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2147 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2148 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2149 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2150 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2151 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2152 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2153 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2154 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2155 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2156 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2157 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2158 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2159 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2160 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2161 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2162 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2163 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2164 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2165 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2166 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2167 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2168 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2169 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2170 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2171 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2172 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2173 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2174 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2175 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2176 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2177 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2178 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2179 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2180 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2181 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2182 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2183 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2184 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2185 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2186 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2187 #ifde‡
GL_GLEXT_PROTOTYPES


2188 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2189 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2190 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2191 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2192 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2193 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2194 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2195 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2196 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2197 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2198 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2199 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2203 #i‚de‡
GL_VERSION_4_3


2204 
	#GL_VERSION_4_3
 1

	)

2205 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2206 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2207 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2208 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2209 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2210 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2211 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2212 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2213 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2214 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2215 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2216 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2217 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2218 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2219 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2220 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2221 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2222 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2223 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2224 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2225 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2226 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2227 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2228 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2229 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2230 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2231 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2232 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2233 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2234 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2235 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2236 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2237 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2238 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2239 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2240 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2241 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2242 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2243 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2244 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2245 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2246 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2247 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2248 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2249 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2250 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2251 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2252 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2253 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2254 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2255 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2256 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2257 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2258 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2259 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2260 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2261 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2262 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2263 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2264 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2265 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2266 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2267 
	#GL_BUFFER
 0x82E0

	)

2268 
	#GL_SHADER
 0x82E1

	)

2269 
	#GL_PROGRAM
 0x82E2

	)

2270 
	#GL_QUERY
 0x82E3

	)

2271 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2272 
	#GL_SAMPLER
 0x82E6

	)

2273 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2274 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2275 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2276 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2277 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2278 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2279 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2280 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2281 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2282 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2283 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2284 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2285 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2286 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2287 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2288 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2289 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2290 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2291 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2292 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2293 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2294 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2295 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2296 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2297 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2298 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2299 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2300 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2301 
	#GL_MAX_WIDTH
 0x827E

	)

2302 
	#GL_MAX_HEIGHT
 0x827F

	)

2303 
	#GL_MAX_DEPTH
 0x8280

	)

2304 
	#GL_MAX_LAYERS
 0x8281

	)

2305 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2306 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2307 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2308 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2309 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2310 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2311 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2312 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2313 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2314 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2315 
	#GL_READ_PIXELS
 0x828C

	)

2316 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2317 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2318 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2319 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2320 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2321 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2322 
	#GL_MIPMAP
 0x8293

	)

2323 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2324 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2325 
	#GL_COLOR_ENCODING
 0x8296

	)

2326 
	#GL_SRGB_READ
 0x8297

	)

2327 
	#GL_SRGB_WRITE
 0x8298

	)

2328 
	#GL_FILTER
 0x829A

	)

2329 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2330 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2331 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2332 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2333 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2334 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2335 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2336 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2337 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2338 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2339 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2340 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2341 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2342 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2343 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2344 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2345 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2346 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2347 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2348 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2349 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2350 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2351 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2352 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2353 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2354 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2355 
	#GL_FULL_SUPPORT
 0x82B7

	)

2356 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2357 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2358 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2359 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2360 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2361 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2362 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2363 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2364 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2365 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2366 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2367 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2368 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2369 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2370 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2371 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2372 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2373 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2374 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2375 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2376 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2377 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2378 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2379 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2380 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2381 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2382 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2383 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2384 
	#GL_UNIFORM
 0x92E1

	)

2385 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2386 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2387 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2388 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2389 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2390 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2391 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2392 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2393 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2394 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2395 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2396 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2397 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2398 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2399 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2400 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2401 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2402 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2403 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2404 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2405 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2406 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2407 
	#GL_NAME_LENGTH
 0x92F9

	)

2408 
	#GL_TYPE
 0x92FA

	)

2409 
	#GL_ARRAY_SIZE
 0x92FB

	)

2410 
	#GL_OFFSET
 0x92FC

	)

2411 
	#GL_BLOCK_INDEX
 0x92FD

	)

2412 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2413 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2414 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2415 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2416 
	#GL_BUFFER_BINDING
 0x9302

	)

2417 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2418 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2419 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2420 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2421 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2422 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2423 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2424 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2425 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2426 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2427 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2428 
	#GL_LOCATION
 0x930E

	)

2429 
	#GL_LOCATION_INDEX
 0x930F

	)

2430 
	#GL_IS_PER_PATCH
 0x92E7

	)

2431 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2432 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2433 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2434 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2435 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2436 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2437 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2438 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2439 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2440 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2441 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2442 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2443 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2444 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2445 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2446 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2447 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2448 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2449 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2450 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2451 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2452 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2453 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2454 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2455 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2456 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2457 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2458 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2459 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2460 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2461 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2462 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2463 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2464 
	#GL_DISPLAY_LIST
 0x82E7

	)

2465 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2466 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2467 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2468 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2469 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2470 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2471 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2472 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2473 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2474 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2475 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2476 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2477 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2478 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2479 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2480 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2481 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2482 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2483 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2484 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2485 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2486 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2487 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2488 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2489 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2490 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2491 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2492 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2494 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2495 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2496 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2497 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2498 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2499 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2500 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2501 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2502 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2503 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2504 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2505 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2506 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2507 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2508 #ifde‡
GL_GLEXT_PROTOTYPES


2509 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2510 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2511 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2512 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2513 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2514 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2515 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2516 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2517 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2518 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2519 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2520 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2521 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2522 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2523 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2524 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2525 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2526 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2527 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2528 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2529 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2530 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2531 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2532 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2533 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2534 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2535 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2536 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2537 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2538 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2539 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2540 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2541 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2542 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2543 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2544 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2545 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2546 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2547 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2548 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2549 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2550 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2551 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2555 #i‚de‡
GL_VERSION_4_4


2556 
	#GL_VERSION_4_4
 1

	)

2557 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2558 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2559 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2560 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2561 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2562 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2563 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2564 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2565 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2566 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2567 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2568 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2569 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2571 
	#GL_QUERY_BUFFER
 0x9192

	)

2572 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2573 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2574 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2575 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2576 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2577 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2578 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2579 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2580 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2581 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2582 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2583 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2584 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2585 #ifde‡
GL_GLEXT_PROTOTYPES


2586 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2587 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2588 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2589 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2590 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2591 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2592 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2593 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2594 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2598 #i‚de‡
GL_VERSION_4_5


2599 
	#GL_VERSION_4_5
 1

	)

2600 
	#GL_CONTEXT_LOST
 0x0507

	)

2601 
	#GL_NEGATIVE_ONE_TO_ONE
 0x935E

	)

2602 
	#GL_ZERO_TO_ONE
 0x935F

	)

2603 
	#GL_CLIP_ORIGIN
 0x935C

	)

2604 
	#GL_CLIP_DEPTH_MODE
 0x935D

	)

2605 
	#GL_QUERY_WAIT_INVERTED
 0x8E17

	)

2606 
	#GL_QUERY_NO_WAIT_INVERTED
 0x8E18

	)

2607 
	#GL_QUERY_BY_REGION_WAIT_INVERTED
 0x8E19

	)

2608 
	#GL_QUERY_BY_REGION_NO_WAIT_INVERTED
 0x8E1A

	)

2609 
	#GL_MAX_CULL_DISTANCES
 0x82F9

	)

2610 
	#GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
 0x82FA

	)

2611 
	#GL_TEXTURE_TARGET
 0x1006

	)

2612 
	#GL_QUERY_TARGET
 0x82EA

	)

2613 
	#GL_GUILTY_CONTEXT_RESET
 0x8253

	)

2614 
	#GL_INNOCENT_CONTEXT_RESET
 0x8254

	)

2615 
	#GL_UNKNOWN_CONTEXT_RESET
 0x8255

	)

2616 
	#GL_RESET_NOTIFICATION_STRATEGY
 0x8256

	)

2617 
	#GL_LOSE_CONTEXT_ON_RESET
 0x8252

	)

2618 
	#GL_NO_RESET_NOTIFICATION
 0x8261

	)

2619 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
 0x00000004

	)

2620 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2621 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2622 (
APIENTRYP
 
	tPFNGLCLIPCONTROLPROC
Ë(
	tGLíum
 
	t‹igö
, GLíum 
	tdïth
);

2623 (
APIENTRYP
 
	tPFNGLCREATETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2624 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
);

2625 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2626 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKIVPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2627 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øm
);

2628 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI64_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt64
 *
	t∑øm
);

2629 (
APIENTRYP
 
	tPFNGLCREATEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

2630 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2631 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

2632 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

2633 (
APIENTRYP
 
	tPFNGLCOPYNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

2634 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2635 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2636 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

2637 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

2638 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2639 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2640 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2641 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERI64VPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

2642 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

2643 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

2644 (
APIENTRYP
 
	tPFNGLCREATEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

2645 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

2646 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2647 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2648 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2649 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf
);

2650 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2651 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t§c
);

2652 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
);

2653 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2654 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

2655 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLuöà*
	tvÆue
);

2656 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2657 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, c⁄° 
	tGLÊﬂt
 
	tdïth
, 
	tGLöt
 
	t°ícû
);

2658 (
APIENTRYP
 
	tPFNGLBLITNAMEDFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	tªadFømebuf„r
, GLuöà
	tdøwFømebuf„r
, 
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2659 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

2660 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2661 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2662 (
APIENTRYP
 
	tPFNGLCREATERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

2663 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2664 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2665 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2666 (
APIENTRYP
 
	tPFNGLCREATETEXTURESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

2667 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

2668 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2669 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2670 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2671 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2672 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2673 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2674 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2675 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2676 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2677 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2678 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2679 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2680 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

2681 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2682 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2683 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

2684 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

2685 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2686 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

2687 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

2688 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

2689 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2690 (
APIENTRYP
 
	tPFNGLBINDTEXTUREUNITPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
);

2691 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2692 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2693 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2694 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

2695 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2696 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2697 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

2698 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2699 (
APIENTRYP
 
	tPFNGLCREATEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

2700 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2701 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2702 (
APIENTRYP
 
	tPFNGLVERTEXARRAYELEMENTBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
);

2703 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2704 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2705 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

2706 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2707 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2708 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2709 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

2710 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYIVPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2711 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXEDIVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2712 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXED64IVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øm
);

2713 (
APIENTRYP
 
	tPFNGLCREATESAMPLERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tßm∂îs
);

2714 (
APIENTRYP
 
	tPFNGLCREATEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

2715 (
APIENTRYP
 
	tPFNGLCREATEQUERIESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2716 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2717 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2718 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2719 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2720 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERBYREGIONPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2721 (
APIENTRYP
 
	tPFNGLGETTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	tpixñs
);

2722 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tbufSize
, *
	tpixñs
);

2723 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSPROC
) ();

2724 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2725 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2726 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

2727 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

2728 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

2729 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

2730 (
APIENTRYP
 
	tPFNGLREADNPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

2731 (
APIENTRYP
 
	tPFNGLGETNMAPDVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

2732 (
APIENTRYP
 
	tPFNGLGETNMAPFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

2733 (
APIENTRYP
 
	tPFNGLGETNMAPIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

2734 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

2735 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

2736 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

2737 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

2738 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

2739 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

2740 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

2741 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2742 (
APIENTRYP
 
	tPFNGLGETNMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2743 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERPROC
) ();

2744 #ifde‡
GL_GLEXT_PROTOTYPES


2745 
GLAPI
 
APIENTRY
 
glClùC⁄åﬁ
 (
GLíum
 
‹igö
, GLíum 
dïth
);

2746 
GLAPI
 
APIENTRY
 
glCª©eTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

2747 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rBa£
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
);

2748 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rR™ge
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2749 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackiv
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2750 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt
 *
∑øm
);

2751 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki64_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt64
 *
∑øm
);

2752 
GLAPI
 
APIENTRY
 
glCª©eBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

2753 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹age
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2754 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

2755 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

2756 
GLAPI
 
APIENTRY
 
glC›yNamedBuf„rSubD©a
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

2757 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2758 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2759 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„r
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

2760 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

2761 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„r
 (
GLuöt
 
buf„r
);

2762 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2763 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîiv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2764 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîi64v
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

2765 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

2766 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

2767 
GLAPI
 
APIENTRY
 
glCª©eFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

2768 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

2769 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2770 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

2771 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayî
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2772 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf
);

2773 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„rs
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2774 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRódBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
§c
);

2775 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
);

2776 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rSubD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2777 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„riv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

2778 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„ruiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLuöà*
vÆue
);

2779 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

2780 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, c⁄° 
GLÊﬂt
 
dïth
, 
GLöt
 
°ícû
);

2781 
GLAPI
 
APIENTRY
 
glBlôNamedFømebuf„r
 (
GLuöt
 
ªadFømebuf„r
, GLuöà
døwFømebuf„r
, 
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

2782 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètus
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

2783 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2784 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2785 
GLAPI
 
APIENTRY
 
glCª©eRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

2786 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹age
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

2787 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂e
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2788 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîiv
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2789 
GLAPI
 
APIENTRY
 
glCª©eTextuªs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

2790 
GLAPI
 
APIENTRY
 
glTextuªBuf„r
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
);

2791 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™ge
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2792 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
);

2793 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2794 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2795 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2796 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2797 
GLAPI
 
APIENTRY
 
glTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2798 
GLAPI
 
APIENTRY
 
glTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2799 
GLAPI
 
APIENTRY
 
glTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2800 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2801 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2802 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2803 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

2804 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2805 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2806 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîf
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

2807 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

2808 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîi
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2809 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

2810 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øms
);

2811 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

2812 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠
 (
GLuöt
 
ãxtuª
);

2813 
GLAPI
 
APIENTRY
 
glBödTextuªUnô
 (
GLuöt
 
unô
, GLuöà
ãxtuª
);

2814 
GLAPI
 
APIENTRY
 
glGëTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2815 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
bufSize
, *
pixñs
);

2816 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2817 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

2818 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2819 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2820 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

2821 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2822 
GLAPI
 
APIENTRY
 
glCª©eVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

2823 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2824 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2825 
GLAPI
 
APIENTRY
 
glVîãxAºayEÀmítBuf„r
 (
GLuöt
 
vaobj
, GLuöà
buf„r
);

2826 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„r
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2827 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„rs
 (
GLuöt
 
vaobj
, GLuöà
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2828 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribBödög
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

2829 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2830 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribIF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2831 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribLF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2832 
GLAPI
 
APIENTRY
 
glVîãxAºayBödögDivis‹
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

2833 
GLAPI
 
APIENTRY
 
glGëVîãxAºayiv
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2834 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexediv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2835 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexed64iv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øm
);

2836 
GLAPI
 
APIENTRY
 
glCª©eSam∂îs
 (
GLsizei
 
n
, 
GLuöt
 *
ßm∂îs
);

2837 
GLAPI
 
APIENTRY
 
glCª©eProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2838 
GLAPI
 
APIENTRY
 
glCª©eQuîõs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ids
);

2839 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘i64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2840 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘iv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2841 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘ui64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2842 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘uiv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2843 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrByRegi⁄
 (
GLbôfõld
 
b¨rõrs
);

2844 
GLAPI
 
APIENTRY
 
glGëTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
pixñs
);

2845 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
bufSize
, *
pixñs
);

2846 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètus
 ();

2847 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
pixñs
);

2848 
GLAPI
 
APIENTRY
 
glGënTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2849 
GLAPI
 
APIENTRY
 
glGënUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

2850 
GLAPI
 
APIENTRY
 
glGënUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

2851 
GLAPI
 
APIENTRY
 
glGënUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

2852 
GLAPI
 
APIENTRY
 
glGënUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

2853 
GLAPI
 
APIENTRY
 
glRódnPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

2854 
GLAPI
 
APIENTRY
 
glGënM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

2855 
GLAPI
 
APIENTRY
 
glGënM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

2856 
GLAPI
 
APIENTRY
 
glGënM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

2857 
GLAPI
 
APIENTRY
 
glGënPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

2858 
GLAPI
 
APIENTRY
 
glGënPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

2859 
GLAPI
 
APIENTRY
 
glGënPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

2860 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂e
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

2861 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

2862 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

2863 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

2864 
GLAPI
 
APIENTRY
 
glGënHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2865 
GLAPI
 
APIENTRY
 
glGënMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2866 
GLAPI
 
APIENTRY
 
glTextuªB¨rõr
 ();

2870 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2871 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2874 #i‚de‡
GL_ARB_ES3_1_com∑tibûôy


2875 
	#GL_ARB_ES3_1_com∑tibûôy
 1

	)

2878 #i‚de‡
GL_ARB_ES3_2_com∑tibûôy


2879 
	#GL_ARB_ES3_2_com∑tibûôy
 1

	)

2880 
	#GL_PRIMITIVE_BOUNDING_BOX_ARB
 0x92BE

	)

2881 
	#GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
 0x9381

	)

2882 
	#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
 0x9382

	)

2883 (
APIENTRYP
 
	tPFNGLPRIMITIVEBOUNDINGBOXARBPROC
Ë(
	tGLÊﬂt
 
	tmöX
, GLÊﬂà
	tmöY
, GLÊﬂà
	tmöZ
, GLÊﬂà
	tmöW
, GLÊﬂà
	tmaxX
, GLÊﬂà
	tmaxY
, GLÊﬂà
	tmaxZ
, GLÊﬂà
	tmaxW
);

2884 #ifde‡
GL_GLEXT_PROTOTYPES


2885 
GLAPI
 
APIENTRY
 
glPrimôiveBoundögBoxARB
 (
GLÊﬂt
 
möX
, GLÊﬂà
möY
, GLÊﬂà
möZ
, GLÊﬂà
möW
, GLÊﬂà
maxX
, GLÊﬂà
maxY
, GLÊﬂà
maxZ
, GLÊﬂà
maxW
);

2889 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2890 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2893 #i‚de‡
GL_ARB_¨øys_of_¨øys


2894 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2897 #i‚de‡
GL_ARB_ba£_ö°™˚


2898 
	#GL_ARB_ba£_ö°™˚
 1

	)

2901 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2902 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2903 
uöt64_t
 
	tGLuöt64EXT
;

2904 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2905 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2906 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2907 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2908 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2909 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2910 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2911 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2912 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2913 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2916 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2917 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2920 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2921 #ifde‡
GL_GLEXT_PROTOTYPES


2922 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2923 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2924 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2925 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2926 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2927 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2928 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2929 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2930 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2931 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2932 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2933 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2935 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2936 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2937 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2941 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2942 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2945 #i‚de‡
GL_ARB_buf„r_°‹age


2946 
	#GL_ARB_buf„r_°‹age
 1

	)

2949 #i‚de‡
GL_ARB_˛_evít


2950 
	#GL_ARB_˛_evít
 1

	)

2951 
_˛_c⁄ãxt
;

2952 
_˛_evít
;

2953 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2954 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2955 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2956 #ifde‡
GL_GLEXT_PROTOTYPES


2957 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2961 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2962 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2965 #i‚de‡
GL_ARB_˛ór_ãxtuª


2966 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2969 #i‚de‡
GL_ARB_˛ù_c⁄åﬁ


2970 
	#GL_ARB_˛ù_c⁄åﬁ
 1

	)

2973 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2974 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2980 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2981 #ifde‡
GL_GLEXT_PROTOTYPES


2982 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2986 #i‚de‡
GL_ARB_com∑tibûôy


2987 
	#GL_ARB_com∑tibûôy
 1

	)

2990 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2991 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2994 #i‚de‡
GL_ARB_compuã_shadî


2995 
	#GL_ARB_compuã_shadî
 1

	)

2998 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2999 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3000 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3001 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3002 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3003 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3004 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3005 #ifde‡
GL_GLEXT_PROTOTYPES


3006 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

3010 #i‚de‡
GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd


3011 
	#GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd
 1

	)

3014 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3015 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3018 #i‚de‡
GL_ARB_c›y_buf„r


3019 
	#GL_ARB_c›y_buf„r
 1

	)

3022 #i‚de‡
GL_ARB_c›y_image


3023 
	#GL_ARB_c›y_image
 1

	)

3026 #i‚de‡
GL_ARB_cuŒ_di°™˚


3027 
	#GL_ARB_cuŒ_di°™˚
 1

	)

3030 #i‚de‡
GL_ARB_debug_ouçut


3031 
	#GL_ARB_debug_ouçut
 1

	)

3032 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

3033 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3034 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3035 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3036 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3037 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3038 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3039 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3040 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3041 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3042 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3043 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3044 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3045 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3046 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3047 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3048 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3049 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3050 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3051 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3052 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3053 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3054 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3055 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3056 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

3057 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

3058 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

3059 #ifde‡
GL_GLEXT_PROTOTYPES


3060 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

3061 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

3062 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

3063 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

3067 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3068 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3071 #i‚de‡
GL_ARB_dïth_˛amp


3072 
	#GL_ARB_dïth_˛amp
 1

	)

3075 #i‚de‡
GL_ARB_dïth_ãxtuª


3076 
	#GL_ARB_dïth_ãxtuª
 1

	)

3077 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3078 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3079 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3080 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3081 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3084 #i‚de‡
GL_ARB_dîiv©ive_c⁄åﬁ


3085 
	#GL_ARB_dîiv©ive_c⁄åﬁ
 1

	)

3088 #i‚de‡
GL_ARB_dúe˘_°©e_ac˚ss


3089 
	#GL_ARB_dúe˘_°©e_ac˚ss
 1

	)

3092 #i‚de‡
GL_ARB_døw_buf„rs


3093 
	#GL_ARB_døw_buf„rs
 1

	)

3094 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3095 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3096 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3097 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3098 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3099 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3100 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3101 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3102 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3103 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3104 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3105 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3106 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3107 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3108 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3109 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3110 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3111 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3112 #ifde‡
GL_GLEXT_PROTOTYPES


3113 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

3117 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3118 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3119 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3120 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3121 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3122 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3123 #ifde‡
GL_GLEXT_PROTOTYPES


3124 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

3125 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

3126 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

3127 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

3131 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3132 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3135 #i‚de‡
GL_ARB_døw_ödúe˘


3136 
	#GL_ARB_døw_ödúe˘
 1

	)

3139 #i‚de‡
GL_ARB_døw_ö°™˚d


3140 
	#GL_ARB_døw_ö°™˚d
 1

	)

3141 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

3142 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3143 #ifde‡
GL_GLEXT_PROTOTYPES


3144 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

3145 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

3149 #i‚de‡
GL_ARB_íh™˚d_œyouts


3150 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3153 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3154 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3157 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3158 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3161 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3162 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3165 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3166 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3169 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3170 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3171 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3172 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

3173 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

3174 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

3175 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

3176 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

3177 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

3178 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

3179 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

3180 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

3181 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

3182 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

3183 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

3184 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

3185 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

3186 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

3187 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

3188 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

3189 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

3190 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

3191 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

3192 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

3193 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

3194 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

3195 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3196 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3197 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3198 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3199 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3200 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3201 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3202 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3203 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3204 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3205 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3206 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3207 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

3208 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

3209 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

3210 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

3211 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

3212 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

3213 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

3214 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3215 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3216 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

3217 
	#GL_MATRIX0_ARB
 0x88C0

	)

3218 
	#GL_MATRIX1_ARB
 0x88C1

	)

3219 
	#GL_MATRIX2_ARB
 0x88C2

	)

3220 
	#GL_MATRIX3_ARB
 0x88C3

	)

3221 
	#GL_MATRIX4_ARB
 0x88C4

	)

3222 
	#GL_MATRIX5_ARB
 0x88C5

	)

3223 
	#GL_MATRIX6_ARB
 0x88C6

	)

3224 
	#GL_MATRIX7_ARB
 0x88C7

	)

3225 
	#GL_MATRIX8_ARB
 0x88C8

	)

3226 
	#GL_MATRIX9_ARB
 0x88C9

	)

3227 
	#GL_MATRIX10_ARB
 0x88CA

	)

3228 
	#GL_MATRIX11_ARB
 0x88CB

	)

3229 
	#GL_MATRIX12_ARB
 0x88CC

	)

3230 
	#GL_MATRIX13_ARB
 0x88CD

	)

3231 
	#GL_MATRIX14_ARB
 0x88CE

	)

3232 
	#GL_MATRIX15_ARB
 0x88CF

	)

3233 
	#GL_MATRIX16_ARB
 0x88D0

	)

3234 
	#GL_MATRIX17_ARB
 0x88D1

	)

3235 
	#GL_MATRIX18_ARB
 0x88D2

	)

3236 
	#GL_MATRIX19_ARB
 0x88D3

	)

3237 
	#GL_MATRIX20_ARB
 0x88D4

	)

3238 
	#GL_MATRIX21_ARB
 0x88D5

	)

3239 
	#GL_MATRIX22_ARB
 0x88D6

	)

3240 
	#GL_MATRIX23_ARB
 0x88D7

	)

3241 
	#GL_MATRIX24_ARB
 0x88D8

	)

3242 
	#GL_MATRIX25_ARB
 0x88D9

	)

3243 
	#GL_MATRIX26_ARB
 0x88DA

	)

3244 
	#GL_MATRIX27_ARB
 0x88DB

	)

3245 
	#GL_MATRIX28_ARB
 0x88DC

	)

3246 
	#GL_MATRIX29_ARB
 0x88DD

	)

3247 
	#GL_MATRIX30_ARB
 0x88DE

	)

3248 
	#GL_MATRIX31_ARB
 0x88DF

	)

3249 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

3250 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

3251 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

3252 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

3253 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3254 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3255 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3256 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3257 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3258 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3259 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3260 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3261 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3262 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3263 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3264 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3265 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3266 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

3267 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3268 #ifde‡
GL_GLEXT_PROTOTYPES


3269 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

3270 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

3271 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

3272 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

3273 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3274 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3275 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3276 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3277 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3278 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3279 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3280 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3281 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3282 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3283 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3284 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3285 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3286 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

3287 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

3291 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3292 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3295 #i‚de‡
GL_ARB_‰agmít_shadî


3296 
	#GL_ARB_‰agmít_shadî
 1

	)

3297 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

3298 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

3299 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

3302 #i‚de‡
GL_ARB_‰agmít_shadî_öãæock


3303 
	#GL_ARB_‰agmít_shadî_öãæock
 1

	)

3306 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3307 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3310 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3311 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3314 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3315 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3318 #i‚de‡
GL_ARB_geomëry_shadî4


3319 
	#GL_ARB_geomëry_shadî4
 1

	)

3320 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

3321 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

3322 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

3323 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

3324 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3325 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3326 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3327 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3328 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3329 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3330 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3331 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3332 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3333 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3334 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3335 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3336 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3337 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3338 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3339 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3340 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3341 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3342 #ifde‡
GL_GLEXT_PROTOTYPES


3343 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3344 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3345 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3346 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3350 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3351 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3354 #i‚de‡
GL_ARB_gë_ãxtuª_sub_image


3355 
	#GL_ARB_gë_ãxtuª_sub_image
 1

	)

3358 #i‚de‡
GL_ARB_gpu_shadî5


3359 
	#GL_ARB_gpu_shadî5
 1

	)

3362 #i‚de‡
GL_ARB_gpu_shadî_Â64


3363 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3366 #i‚de‡
GL_ARB_gpu_shadî_öt64


3367 
	#GL_ARB_gpu_shadî_öt64
 1

	)

3368 
	#GL_INT64_ARB
 0x140E

	)

3369 
	#GL_INT64_VEC2_ARB
 0x8FE9

	)

3370 
	#GL_INT64_VEC3_ARB
 0x8FEA

	)

3371 
	#GL_INT64_VEC4_ARB
 0x8FEB

	)

3372 
	#GL_UNSIGNED_INT64_VEC2_ARB
 0x8FF5

	)

3373 
	#GL_UNSIGNED_INT64_VEC3_ARB
 0x8FF6

	)

3374 
	#GL_UNSIGNED_INT64_VEC4_ARB
 0x8FF7

	)

3375 (
APIENTRYP
 
	tPFNGLUNIFORM1I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3376 (
APIENTRYP
 
	tPFNGLUNIFORM2I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3377 (
APIENTRYP
 
	tPFNGLUNIFORM3I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3378 (
APIENTRYP
 
	tPFNGLUNIFORM4I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3379 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3380 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3381 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3382 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3383 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3384 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3385 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3386 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3387 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3388 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3389 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3390 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3391 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 *
	t∑øms
);

3392 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 *
	t∑øms
);

3393 (
APIENTRYP
 
	tPFNGLGETNUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

3394 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt64
 *
	t∑øms
);

3395 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3396 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3397 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3398 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3399 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3400 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3401 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3402 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3403 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3404 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3405 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3406 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3407 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3408 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3409 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3410 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3411 #ifde‡
GL_GLEXT_PROTOTYPES


3412 
GLAPI
 
APIENTRY
 
glUnif‹m1i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3413 
GLAPI
 
APIENTRY
 
glUnif‹m2i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3414 
GLAPI
 
APIENTRY
 
glUnif‹m3i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3415 
GLAPI
 
APIENTRY
 
glUnif‹m4i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3416 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3417 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3418 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3419 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3420 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3421 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3422 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3423 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3424 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3425 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3426 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3427 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3428 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 *
∑øms
);

3429 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 *
∑øms
);

3430 
GLAPI
 
APIENTRY
 
glGënUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

3431 
GLAPI
 
APIENTRY
 
glGënUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLuöt64
 *
∑øms
);

3432 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3433 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3434 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3435 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3436 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3437 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3438 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3439 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3440 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3441 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3442 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3443 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3444 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3445 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3446 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3447 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3451 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3452 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3453 
	tGLhÆfARB
;

3454 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3457 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3458 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3461 #i‚de‡
GL_ARB_imagög


3462 
	#GL_ARB_imagög
 1

	)

3463 
	#GL_BLEND_COLOR
 0x8005

	)

3464 
	#GL_BLEND_EQUATION
 0x8009

	)

3465 
	#GL_CONVOLUTION_1D
 0x8010

	)

3466 
	#GL_CONVOLUTION_2D
 0x8011

	)

3467 
	#GL_SEPARABLE_2D
 0x8012

	)

3468 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3469 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3470 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3471 
	#GL_REDUCE
 0x8016

	)

3472 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3473 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3474 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3475 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3476 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3477 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3478 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3479 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3480 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3481 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3482 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3483 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3484 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3485 
	#GL_HISTOGRAM
 0x8024

	)

3486 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3487 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3488 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3489 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3490 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3491 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3492 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3493 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3494 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3495 
	#GL_MINMAX
 0x802E

	)

3496 
	#GL_MINMAX_FORMAT
 0x802F

	)

3497 
	#GL_MINMAX_SINK
 0x8030

	)

3498 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3499 
	#GL_COLOR_MATRIX
 0x80B1

	)

3500 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3501 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3502 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3503 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3504 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3505 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3506 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3507 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3508 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3509 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3510 
	#GL_COLOR_TABLE
 0x80D0

	)

3511 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3512 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3513 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3514 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3515 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3516 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3517 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3518 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3519 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3520 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3521 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3522 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3523 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3524 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3525 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3526 
	#GL_CONSTANT_BORDER
 0x8151

	)

3527 
	#GL_REPLICATE_BORDER
 0x8153

	)

3528 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3529 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3530 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3531 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3532 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3533 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3534 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3535 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3536 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3537 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3538 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3539 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3540 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3541 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3542 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3543 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3544 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3545 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3546 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3547 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3548 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3549 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3550 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3551 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3552 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3553 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3554 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3555 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3556 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3557 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3558 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3559 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3560 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3561 #ifde‡
GL_GLEXT_PROTOTYPES


3562 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3563 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3564 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3565 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3566 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3567 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3568 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3569 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3570 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3571 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3572 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3573 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3574 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3575 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3576 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3577 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3578 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3579 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3580 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3581 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3582 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3583 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3584 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3585 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3586 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3587 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3588 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3589 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3590 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3591 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3592 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3593 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3597 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3598 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3599 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3600 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3601 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3602 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3603 #ifde‡
GL_GLEXT_PROTOTYPES


3604 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3605 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3609 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3610 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3611 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3612 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3613 #ifde‡
GL_GLEXT_PROTOTYPES


3614 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3618 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3619 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3622 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3623 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3624 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3627 #i‚de‡
GL_ARB_övÆid©e_subd©a


3628 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3631 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3632 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3635 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3636 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3639 #i‚de‡
GL_ARB_m©rix_∑Àâe


3640 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3641 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3642 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3643 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3644 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3645 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3646 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3647 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3648 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3649 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3650 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3651 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3652 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3653 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3654 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3655 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3656 #ifde‡
GL_GLEXT_PROTOTYPES


3657 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3658 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3659 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3660 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3661 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3665 #i‚de‡
GL_ARB_mu…i_böd


3666 
	#GL_ARB_mu…i_böd
 1

	)

3669 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3670 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3673 #i‚de‡
GL_ARB_mu…ißm∂e


3674 
	#GL_ARB_mu…ißm∂e
 1

	)

3675 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3676 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3677 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3678 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3679 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3680 
	#GL_SAMPLES_ARB
 0x80A9

	)

3681 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3682 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3683 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3684 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3685 #ifde‡
GL_GLEXT_PROTOTYPES


3686 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3690 #i‚de‡
GL_ARB_mu…ôextuª


3691 
	#GL_ARB_mu…ôextuª
 1

	)

3692 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3693 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3694 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3695 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3696 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3697 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3698 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3699 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3700 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3701 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3702 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3703 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3704 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3705 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3706 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3707 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3708 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3709 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3710 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3711 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3712 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3713 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3714 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3715 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3716 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3717 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3718 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3719 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3720 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3721 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3722 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3723 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3724 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3725 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3726 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3727 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3728 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3734 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3735 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3736 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3737 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3738 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3739 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3740 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3741 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3742 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3743 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3744 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3745 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3746 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3747 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3748 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3749 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3750 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3751 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3752 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3753 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3754 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3755 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3756 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3757 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3758 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3759 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3760 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3761 #ifde‡
GL_GLEXT_PROTOTYPES


3762 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3763 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3764 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3765 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3766 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3767 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3768 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3769 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3770 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3771 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3772 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3773 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3774 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3775 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3776 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3777 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3778 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3779 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3780 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3781 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3782 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3783 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3784 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3785 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3786 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3787 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3788 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3789 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3790 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3791 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3792 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3793 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3794 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3795 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3799 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3800 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3801 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3802 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3803 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3804 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3805 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3806 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3807 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3808 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3809 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3810 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3811 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3812 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3813 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3814 #ifde‡
GL_GLEXT_PROTOTYPES


3815 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3816 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3817 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3818 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3819 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3820 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3821 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3822 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3826 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3827 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3830 #i‚de‡
GL_ARB_∑øŒñ_shadî_compûe


3831 
	#GL_ARB_∑øŒñ_shadî_compûe
 1

	)

3832 
	#GL_MAX_SHADER_COMPILER_THREADS_ARB
 0x91B0

	)

3833 
	#GL_COMPLETION_STATUS_ARB
 0x91B1

	)

3834 (
APIENTRYP
 
	tPFNGLMAXSHADERCOMPILERTHREADSARBPROC
Ë(
	tGLuöt
 
	tcou¡
);

3835 #ifde‡
GL_GLEXT_PROTOTYPES


3836 
GLAPI
 
APIENTRY
 
glMaxShadîCompûîThªadsARB
 (
GLuöt
 
cou¡
);

3840 #i‚de‡
GL_ARB_pùñöe_°©i°ics_quîy


3841 
	#GL_ARB_pùñöe_°©i°ics_quîy
 1

	)

3842 
	#GL_VERTICES_SUBMITTED_ARB
 0x82EE

	)

3843 
	#GL_PRIMITIVES_SUBMITTED_ARB
 0x82EF

	)

3844 
	#GL_VERTEX_SHADER_INVOCATIONS_ARB
 0x82F0

	)

3845 
	#GL_TESS_CONTROL_SHADER_PATCHES_ARB
 0x82F1

	)

3846 
	#GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
 0x82F2

	)

3847 
	#GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
 0x82F3

	)

3848 
	#GL_FRAGMENT_SHADER_INVOCATIONS_ARB
 0x82F4

	)

3849 
	#GL_COMPUTE_SHADER_INVOCATIONS_ARB
 0x82F5

	)

3850 
	#GL_CLIPPING_INPUT_PRIMITIVES_ARB
 0x82F6

	)

3851 
	#GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
 0x82F7

	)

3854 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3855 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3856 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3857 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3858 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3859 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3862 #i‚de‡
GL_ARB_poöt_∑ømëîs


3863 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3864 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3865 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3866 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3867 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3868 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3869 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3870 #ifde‡
GL_GLEXT_PROTOTYPES


3871 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3872 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3876 #i‚de‡
GL_ARB_poöt_•rôe


3877 
	#GL_ARB_poöt_•rôe
 1

	)

3878 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3879 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3882 #i‚de‡
GL_ARB_po°_dïth_covîage


3883 
	#GL_ARB_po°_dïth_covîage
 1

	)

3886 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3887 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3890 #i‚de‡
GL_ARB_¥ovokög_vîãx


3891 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3894 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3895 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3898 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3899 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3902 #i‚de‡
GL_ARB_robu°√ss


3903 
	#GL_ARB_robu°√ss
 1

	)

3904 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3905 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3906 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3907 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3908 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3909 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3910 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3911 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3912 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3913 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3914 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3915 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3916 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3917 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3918 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3919 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3920 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3921 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3922 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3923 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3924 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3925 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3926 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3927 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3928 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3929 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3930 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3931 #ifde‡
GL_GLEXT_PROTOTYPES


3932 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3933 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3934 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3935 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3936 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3937 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3938 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3939 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3940 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3941 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3942 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3943 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3944 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3945 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3946 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3947 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3948 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3949 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3950 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3951 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3955 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3956 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3959 #i‚de‡
GL_ARB_ßm∂e_loˇti⁄s


3960 
	#GL_ARB_ßm∂e_loˇti⁄s
 1

	)

3961 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
 0x933D

	)

3962 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
 0x933E

	)

3963 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
 0x933F

	)

3964 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
 0x9340

	)

3965 
	#GL_SAMPLE_LOCATION_ARB
 0x8E50

	)

3966 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
 0x9341

	)

3967 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
 0x9342

	)

3968 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
 0x9343

	)

3969 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3970 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3971 (
APIENTRYP
 
	tPFNGLEVALUATEDEPTHVALUESARBPROC
) ();

3972 #ifde‡
GL_GLEXT_PROTOTYPES


3973 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3974 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3975 
GLAPI
 
APIENTRY
 
glEvÆu©eDïthVÆuesARB
 ();

3979 #i‚de‡
GL_ARB_ßm∂e_shadög


3980 
	#GL_ARB_ßm∂e_shadög
 1

	)

3981 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3982 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3983 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3984 #ifde‡
GL_GLEXT_PROTOTYPES


3985 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3989 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3990 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3993 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3994 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3997 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3998 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

4001 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


4002 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

4005 #i‚de‡
GL_ARB_shadî_©omic_cou¡î_›s


4006 
	#GL_ARB_shadî_©omic_cou¡î_›s
 1

	)

4009 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


4010 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

4013 #i‚de‡
GL_ARB_shadî_bÆlŸ


4014 
	#GL_ARB_shadî_bÆlŸ
 1

	)

4017 #i‚de‡
GL_ARB_shadî_bô_ícodög


4018 
	#GL_ARB_shadî_bô_ícodög
 1

	)

4021 #i‚de‡
GL_ARB_shadî_˛ock


4022 
	#GL_ARB_shadî_˛ock
 1

	)

4025 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


4026 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

4029 #i‚de‡
GL_ARB_shadî_group_vŸe


4030 
	#GL_ARB_shadî_group_vŸe
 1

	)

4033 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


4034 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

4037 #i‚de‡
GL_ARB_shadî_image_size


4038 
	#GL_ARB_shadî_image_size
 1

	)

4041 #i‚de‡
GL_ARB_shadî_obje˘s


4042 
	#GL_ARB_shadî_obje˘s
 1

	)

4043 #ifde‡
__APPLE__


4044 #ifde‡
BUILDING_MESA


4046 
	tGLh™dÀARB
;

4048 *
	tGLh™dÀARB
;

4051 
	tGLh™dÀARB
;

4053 
	tGLch¨ARB
;

4054 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

4055 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

4056 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

4057 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

4058 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

4059 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

4060 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

4061 
	#GL_INT_VEC2_ARB
 0x8B53

	)

4062 
	#GL_INT_VEC3_ARB
 0x8B54

	)

4063 
	#GL_INT_VEC4_ARB
 0x8B55

	)

4064 
	#GL_BOOL_ARB
 0x8B56

	)

4065 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

4066 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

4067 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

4068 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

4069 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

4070 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

4071 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

4072 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

4073 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

4074 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

4075 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

4076 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

4077 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

4078 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

4079 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

4080 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

4081 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

4082 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

4083 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

4084 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

4085 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

4086 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

4087 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

4088 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4089 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4090 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4091 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4092 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4093 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4094 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4095 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4096 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4097 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4098 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4099 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4100 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4101 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4102 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4103 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4104 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4105 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4106 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4107 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4108 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4109 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4110 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4111 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4112 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4113 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4114 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4118 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4119 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4120 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4121 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4122 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4123 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4124 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4125 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4126 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4127 #ifde‡
GL_GLEXT_PROTOTYPES


4128 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

4129 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

4130 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

4131 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

4132 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

4133 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

4134 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4135 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

4136 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4137 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

4138 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4139 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

4140 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

4141 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

4142 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

4143 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

4144 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

4145 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

4146 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

4147 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4148 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4149 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4150 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4151 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4152 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4153 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4154 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4155 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4156 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4157 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4158 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4159 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4160 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

4161 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

4162 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4163 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4164 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

4165 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

4166 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

4170 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


4171 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

4174 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


4175 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

4178 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


4179 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

4182 #i‚de‡
GL_ARB_shadî_subroutöe


4183 
	#GL_ARB_shadî_subroutöe
 1

	)

4186 #i‚de‡
GL_ARB_shadî_ãxtuª_image_ßm∂es


4187 
	#GL_ARB_shadî_ãxtuª_image_ßm∂es
 1

	)

4190 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


4191 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

4194 #i‚de‡
GL_ARB_shadî_võwp‹t_œyî_¨øy


4195 
	#GL_ARB_shadî_võwp‹t_œyî_¨øy
 1

	)

4198 #i‚de‡
GL_ARB_shadög_œnguage_100


4199 
	#GL_ARB_shadög_œnguage_100
 1

	)

4200 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

4203 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


4204 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

4207 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


4208 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

4209 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

4210 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

4211 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

4212 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

4213 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4214 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

4215 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4216 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

4217 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

4218 #ifde‡
GL_GLEXT_PROTOTYPES


4219 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

4220 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4221 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

4222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4223 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

4224 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

4228 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


4229 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

4232 #i‚de‡
GL_ARB_shadow


4233 
	#GL_ARB_shadow
 1

	)

4234 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

4235 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

4236 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

4239 #i‚de‡
GL_ARB_shadow_ambõ¡


4240 
	#GL_ARB_shadow_ambõ¡
 1

	)

4241 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

4244 #i‚de‡
GL_ARB_•¨£_buf„r


4245 
	#GL_ARB_•¨£_buf„r
 1

	)

4246 
	#GL_SPARSE_STORAGE_BIT_ARB
 0x0400

	)

4247 
	#GL_SPARSE_BUFFER_PAGE_SIZE_ARB
 0x82F8

	)

4248 (
APIENTRYP
 
	tPFNGLBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4249 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4250 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4251 #ifde‡
GL_GLEXT_PROTOTYPES


4252 
GLAPI
 
APIENTRY
 
glBuf„rPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4253 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4254 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítARB
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4258 #i‚de‡
GL_ARB_•¨£_ãxtuª


4259 
	#GL_ARB_•¨£_ãxtuª
 1

	)

4260 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

4261 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

4262 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

4263 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

4264 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

4265 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

4266 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

4267 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

4268 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

4269 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

4270 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

4271 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

4272 #ifde‡
GL_GLEXT_PROTOTYPES


4273 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

4277 #i‚de‡
GL_ARB_•¨£_ãxtuª2


4278 
	#GL_ARB_•¨£_ãxtuª2
 1

	)

4281 #i‚de‡
GL_ARB_•¨£_ãxtuª_˛amp


4282 
	#GL_ARB_•¨£_ãxtuª_˛amp
 1

	)

4285 #i‚de‡
GL_ARB_°ícû_ãxturög


4286 
	#GL_ARB_°ícû_ãxturög
 1

	)

4289 #i‚de‡
GL_ARB_sync


4290 
	#GL_ARB_sync
 1

	)

4293 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


4294 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

4297 #i‚de‡
GL_ARB_ãxtuª_b¨rõr


4298 
	#GL_ARB_ãxtuª_b¨rõr
 1

	)

4301 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


4302 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

4303 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

4306 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


4307 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

4308 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

4309 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

4310 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

4311 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

4312 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

4313 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

4314 #ifde‡
GL_GLEXT_PROTOTYPES


4315 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

4319 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


4320 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

4323 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


4324 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

4327 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


4328 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

4329 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

4330 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

4331 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

4332 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

4333 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

4334 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

4335 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

4336 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

4337 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

4338 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

4339 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

4340 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4341 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4342 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4343 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4344 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4345 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4346 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

4347 #ifde‡
GL_GLEXT_PROTOTYPES


4348 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4349 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4350 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4351 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4352 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4353 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4354 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

4358 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


4359 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

4360 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

4361 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

4362 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

4363 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

4366 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


4367 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

4370 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


4371 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

4372 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

4373 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

4374 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

4375 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

4376 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

4377 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

4378 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

4379 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

4380 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

4381 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

4382 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

4383 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

4386 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


4387 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

4388 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

4389 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

4390 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

4391 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

4392 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

4393 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

4394 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

4397 #i‚de‡
GL_ARB_ãxtuª_ív_add


4398 
	#GL_ARB_ãxtuª_ív_add
 1

	)

4401 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


4402 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

4403 
	#GL_COMBINE_ARB
 0x8570

	)

4404 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

4405 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

4406 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

4407 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

4408 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

4409 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

4410 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

4411 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

4412 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

4413 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

4414 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

4415 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

4416 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

4417 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

4418 
	#GL_RGB_SCALE_ARB
 0x8573

	)

4419 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

4420 
	#GL_INTERPOLATE_ARB
 0x8575

	)

4421 
	#GL_SUBTRACT_ARB
 0x84E7

	)

4422 
	#GL_CONSTANT_ARB
 0x8576

	)

4423 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

4424 
	#GL_PREVIOUS_ARB
 0x8578

	)

4427 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


4428 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

4431 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


4432 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

4433 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

4434 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

4437 #i‚de‡
GL_ARB_ãxtuª_fûãr_mömax


4438 
	#GL_ARB_ãxtuª_fûãr_mömax
 1

	)

4439 
	#GL_TEXTURE_REDUCTION_MODE_ARB
 0x9366

	)

4440 
	#GL_WEIGHTED_AVERAGE_ARB
 0x9367

	)

4443 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4444 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4445 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

4446 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

4447 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

4448 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

4449 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

4450 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

4451 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

4452 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

4453 
	#GL_RGBA32F_ARB
 0x8814

	)

4454 
	#GL_RGB32F_ARB
 0x8815

	)

4455 
	#GL_ALPHA32F_ARB
 0x8816

	)

4456 
	#GL_INTENSITY32F_ARB
 0x8817

	)

4457 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

4458 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

4459 
	#GL_RGBA16F_ARB
 0x881A

	)

4460 
	#GL_RGB16F_ARB
 0x881B

	)

4461 
	#GL_ALPHA16F_ARB
 0x881C

	)

4462 
	#GL_INTENSITY16F_ARB
 0x881D

	)

4463 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

4464 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

4467 #i‚de‡
GL_ARB_ãxtuª_g©hî


4468 
	#GL_ARB_ãxtuª_g©hî
 1

	)

4469 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

4470 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

4471 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

4474 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


4475 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

4478 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


4479 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

4480 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

4483 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


4484 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

4487 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4488 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4491 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


4492 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

4495 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


4496 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

4499 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4500 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4501 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

4502 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

4503 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

4504 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

4507 #i‚de‡
GL_ARB_ãxtuª_rg


4508 
	#GL_ARB_ãxtuª_rg
 1

	)

4511 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


4512 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

4515 #i‚de‡
GL_ARB_ãxtuª_°ícû8


4516 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

4519 #i‚de‡
GL_ARB_ãxtuª_°‹age


4520 
	#GL_ARB_ãxtuª_°‹age
 1

	)

4523 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


4524 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4527 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4528 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4531 #i‚de‡
GL_ARB_ãxtuª_võw


4532 
	#GL_ARB_ãxtuª_võw
 1

	)

4535 #i‚de‡
GL_ARB_timî_quîy


4536 
	#GL_ARB_timî_quîy
 1

	)

4539 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4540 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4543 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4544 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4547 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4548 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4551 #i‚de‡
GL_ARB_å™sf‹m_„edback_ovîÊow_quîy


4552 
	#GL_ARB_å™sf‹m_„edback_ovîÊow_quîy
 1

	)

4553 
	#GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
 0x82EC

	)

4554 
	#GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
 0x82ED

	)

4557 #i‚de‡
GL_ARB_å™•o£_m©rix


4558 
	#GL_ARB_å™•o£_m©rix
 1

	)

4559 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4560 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4561 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4562 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4563 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4564 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4565 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4566 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4567 #ifde‡
GL_GLEXT_PROTOTYPES


4568 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4569 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4570 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4571 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4575 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4576 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4579 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4580 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4583 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4584 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4587 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4588 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4591 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4592 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4595 #i‚de‡
GL_ARB_vîãx_bÀnd


4596 
	#GL_ARB_vîãx_bÀnd
 1

	)

4597 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4598 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4599 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4600 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4601 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4602 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4603 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4604 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4605 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4606 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4607 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4608 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4609 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4610 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4611 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4612 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4613 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4614 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4615 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4616 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4617 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4618 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4619 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4620 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4621 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4622 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4623 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4624 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4625 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4626 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4627 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4628 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4629 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4630 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4631 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4632 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4633 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4634 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4635 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4636 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4637 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4638 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4639 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4640 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4641 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4642 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4643 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4644 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4645 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4646 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4647 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4648 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4649 #ifde‡
GL_GLEXT_PROTOTYPES


4650 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4651 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4652 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4653 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4654 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4655 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4656 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4657 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4658 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4659 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4663 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4664 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4665 
±rdiff_t
 
	tGLsizeùåARB
;

4666 
±rdiff_t
 
	tGLöçåARB
;

4667 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4668 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4669 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4670 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4671 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4672 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4673 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4674 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4675 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4676 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4677 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4678 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4679 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4680 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4681 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4682 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4683 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4684 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4685 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4686 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4687 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4688 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4689 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4690 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4691 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4692 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4693 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4694 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4695 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4696 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4697 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4698 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4699 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4700 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4701 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4702 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4703 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4704 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4705 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4706 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4707 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4708 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4709 #ifde‡
GL_GLEXT_PROTOTYPES


4710 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4711 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4712 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4713 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4714 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4715 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4716 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4717 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4718 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4719 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4720 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4724 #i‚de‡
GL_ARB_vîãx_¥ogøm


4725 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4726 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4727 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4728 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4729 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4730 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4731 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4732 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4733 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4734 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4735 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4736 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4737 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4738 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4739 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4740 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4741 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4779 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4780 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4781 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4782 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4783 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4784 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4785 #ifde‡
GL_GLEXT_PROTOTYPES


4786 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4787 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4788 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4789 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4790 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4791 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4792 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4793 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4794 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4795 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4796 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4797 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4798 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4799 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4800 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4801 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4802 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4803 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4804 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4805 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4806 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4807 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4808 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4809 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4810 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4811 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4812 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4813 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4814 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4815 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4816 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4817 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4818 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4819 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4820 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4821 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4822 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4823 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4824 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4825 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4826 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4827 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4828 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4832 #i‚de‡
GL_ARB_vîãx_shadî


4833 
	#GL_ARB_vîãx_shadî
 1

	)

4834 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4835 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4836 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4837 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4838 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4839 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4840 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4841 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4842 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4843 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4844 #ifde‡
GL_GLEXT_PROTOTYPES


4845 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4846 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4847 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4851 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4852 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4855 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4856 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4859 #i‚de‡
GL_ARB_võwp‹t_¨øy


4860 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4863 #i‚de‡
GL_ARB_wödow_pos


4864 
	#GL_ARB_wödow_pos
 1

	)

4865 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4866 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4867 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4868 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4869 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4870 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4871 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4872 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4873 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4874 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4875 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4876 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4877 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4878 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4879 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4880 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4881 #ifde‡
GL_GLEXT_PROTOTYPES


4882 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4883 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4884 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4885 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4886 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4887 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4888 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4889 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4890 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4891 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4892 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4893 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4894 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4895 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4896 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4897 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4901 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d


4902 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d
 1

	)

4903 
	#GL_MULTIPLY_KHR
 0x9294

	)

4904 
	#GL_SCREEN_KHR
 0x9295

	)

4905 
	#GL_OVERLAY_KHR
 0x9296

	)

4906 
	#GL_DARKEN_KHR
 0x9297

	)

4907 
	#GL_LIGHTEN_KHR
 0x9298

	)

4908 
	#GL_COLORDODGE_KHR
 0x9299

	)

4909 
	#GL_COLORBURN_KHR
 0x929A

	)

4910 
	#GL_HARDLIGHT_KHR
 0x929B

	)

4911 
	#GL_SOFTLIGHT_KHR
 0x929C

	)

4912 
	#GL_DIFFERENCE_KHR
 0x929E

	)

4913 
	#GL_EXCLUSION_KHR
 0x92A0

	)

4914 
	#GL_HSL_HUE_KHR
 0x92AD

	)

4915 
	#GL_HSL_SATURATION_KHR
 0x92AE

	)

4916 
	#GL_HSL_COLOR_KHR
 0x92AF

	)

4917 
	#GL_HSL_LUMINOSITY_KHR
 0x92B0

	)

4918 (
APIENTRYP
 
	tPFNGLBLENDBARRIERKHRPROC
) ();

4919 #ifde‡
GL_GLEXT_PROTOTYPES


4920 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrKHR
 ();

4924 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít


4925 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

4926 
	#GL_BLEND_ADVANCED_COHERENT_KHR
 0x9285

	)

4929 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


4930 
	#GL_KHR_c⁄ãxt_Êush_c⁄åﬁ
 1

	)

4933 #i‚de‡
GL_KHR_debug


4934 
	#GL_KHR_debug
 1

	)

4937 #i‚de‡
GL_KHR_no_îr‹


4938 
	#GL_KHR_no_îr‹
 1

	)

4939 
	#GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
 0x00000008

	)

4942 #i‚de‡
GL_KHR_robu°_buf„r_ac˚ss_behavi‹


4943 
	#GL_KHR_robu°_buf„r_ac˚ss_behavi‹
 1

	)

4946 #i‚de‡
GL_KHR_robu°√ss


4947 
	#GL_KHR_robu°√ss
 1

	)

4948 
	#GL_CONTEXT_ROBUST_ACCESS
 0x90F3

	)

4951 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4952 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4953 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4954 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4955 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4956 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4957 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4958 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4959 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4960 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4961 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4962 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4963 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4964 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4965 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4966 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4967 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4968 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4969 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4970 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4971 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4972 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4973 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4974 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4975 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4976 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4977 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4978 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4979 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4980 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4983 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4984 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4987 #i‚de‡
GL_OES_byã_co‹dö©es


4988 
	#GL_OES_byã_co‹dö©es
 1

	)

4989 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4990 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4991 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4992 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4993 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4994 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4995 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

4996 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4997 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

4998 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4999 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

5000 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5001 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

5002 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5003 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5004 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5005 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

5006 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5007 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

5008 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5009 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
, GLbyã 
	tw
);

5010 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5011 #ifde‡
GL_GLEXT_PROTOTYPES


5012 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

5013 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5014 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

5015 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5016 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5017 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5018 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5019 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5020 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

5021 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5022 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

5023 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5024 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5025 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5026 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5027 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5028 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
, GLbyã 
y
);

5029 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5030 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

5031 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5032 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
, GLbyã 
w
);

5033 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5037 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


5038 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

5039 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

5040 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

5041 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

5042 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

5043 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

5044 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

5045 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

5046 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

5047 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

5048 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

5051 #i‚de‡
GL_OES_fixed_poöt


5052 
	#GL_OES_fixed_poöt
 1

	)

5053 
GLöt
 
	tGLfixed
;

5054 
	#GL_FIXED_OES
 0x140C

	)

5055 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

5056 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5057 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

5058 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

5059 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5060 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

5061 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5062 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5063 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5064 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

5065 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5066 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5067 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5068 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5069 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5070 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5071 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5072 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

5073 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5074 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5075 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5076 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5077 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5078 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

5079 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5080 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5081 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

5082 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

5083 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5084 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5085 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5086 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5087 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5088 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5089 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5090 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

5091 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

5092 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5093 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5094 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

5095 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5096 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5097 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5098 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5099 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

5100 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5101 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

5102 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5103 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

5104 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5105 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5106 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5107 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

5108 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5109 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

5110 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5111 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5112 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

5113 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

5114 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5115 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

5116 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

5117 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

5118 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

5119 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5120 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

5121 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5122 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5123 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5124 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5125 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5126 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5127 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5128 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

5129 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

5130 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5131 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5132 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

5133 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

5134 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5135 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5136 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5137 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5138 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

5139 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5140 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

5141 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

5142 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

5143 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5144 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5145 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5146 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5147 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5148 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5149 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5150 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5151 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5152 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

5153 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5154 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5155 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5156 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5157 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5158 #ifde‡
GL_GLEXT_PROTOTYPES


5159 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

5160 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5161 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

5162 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

5163 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5164 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

5165 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5166 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5167 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5168 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

5169 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

5170 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5171 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5172 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5173 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5174 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5175 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5176 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

5177 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5178 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5179 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5180 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5181 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5182 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

5183 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5184 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5185 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

5186 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

5187 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

5188 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5189 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5190 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5191 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5192 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5193 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5194 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

5195 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

5196 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5197 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5198 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

5199 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5200 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5201 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5202 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5203 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

5204 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5205 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

5206 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5207 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

5208 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5209 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5210 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5211 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

5212 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5213 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

5214 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5215 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5216 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

5217 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

5218 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5219 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

5220 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

5221 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

5222 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

5223 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5224 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

5225 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5226 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

5227 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5228 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5229 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5230 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5231 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5232 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

5233 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

5234 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5235 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5236 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

5237 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

5238 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5239 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5240 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5241 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5242 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

5243 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5244 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

5245 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

5246 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

5247 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5248 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

5249 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5250 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5251 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5252 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5253 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5254 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5255 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5256 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

5257 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5258 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5259 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5260 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5261 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5265 #i‚de‡
GL_OES_quîy_m©rix


5266 
	#GL_OES_quîy_m©rix
 1

	)

5267 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

5268 #ifde‡
GL_GLEXT_PROTOTYPES


5269 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

5273 #i‚de‡
GL_OES_ªad_f‹m©


5274 
	#GL_OES_ªad_f‹m©
 1

	)

5275 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5276 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5279 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


5280 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

5281 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

5282 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

5283 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

5284 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5285 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

5286 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5287 #ifde‡
GL_GLEXT_PROTOTYPES


5288 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

5289 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

5290 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

5291 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5292 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

5293 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5297 #i‚de‡
GL_3DFX_mu…ißm∂e


5298 
	#GL_3DFX_mu…ißm∂e
 1

	)

5299 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

5300 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

5301 
	#GL_SAMPLES_3DFX
 0x86B4

	)

5302 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

5305 #i‚de‡
GL_3DFX_tbuf„r


5306 
	#GL_3DFX_tbuf„r
 1

	)

5307 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5308 #ifde‡
GL_GLEXT_PROTOTYPES


5309 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

5313 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5314 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5315 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

5316 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

5319 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5320 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

5321 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5322 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5325 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5326 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

5329 #i‚de‡
GL_AMD_debug_ouçut


5330 
	#GL_AMD_debug_ouçut
 1

	)

5331 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

5332 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5333 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5334 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5335 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5336 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5337 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5338 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5339 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5340 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5341 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5342 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5343 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5344 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5345 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5346 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

5347 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

5348 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

5349 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

5350 #ifde‡
GL_GLEXT_PROTOTYPES


5351 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

5352 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

5353 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

5354 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

5358 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5359 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

5360 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5361 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5364 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5365 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

5366 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

5367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

5368 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

5369 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5370 #ifde‡
GL_GLEXT_PROTOTYPES


5371 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

5372 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

5373 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

5374 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5378 #i‚de‡
GL_AMD_g˙_shadî


5379 
	#GL_AMD_g˙_shadî
 1

	)

5382 #i‚de‡
GL_AMD_gpu_shadî_öt64


5383 
	#GL_AMD_gpu_shadî_öt64
 1

	)

5384 
öt64_t
 
	tGLöt64EXT
;

5385 
	#GL_INT64_NV
 0x140E

	)

5386 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5387 
	#GL_INT8_NV
 0x8FE0

	)

5388 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5389 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5390 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5391 
	#GL_INT16_NV
 0x8FE4

	)

5392 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5393 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5394 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5395 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5396 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5397 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5398 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5399 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5400 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5401 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5402 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5403 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5404 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5405 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5406 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5407 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5408 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5409 
	#GL_FLOAT16_NV
 0x8FF8

	)

5410 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5411 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5412 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5413 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5414 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5415 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5416 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5417 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5418 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5419 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5420 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5421 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5422 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5423 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5424 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5425 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5426 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5427 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5428 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5429 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

5430 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

5431 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5432 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5433 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5434 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5435 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5436 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5437 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5438 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5439 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5440 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5441 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5442 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5443 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5444 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5445 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5446 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5447 #ifde‡
GL_GLEXT_PROTOTYPES


5448 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5449 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5450 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5451 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5452 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5453 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5454 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5455 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5456 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5457 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5458 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5459 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5460 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5461 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5462 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5463 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5464 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

5465 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

5466 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5467 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5468 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5469 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5470 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5471 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5472 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5473 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5474 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5475 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5476 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5477 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5478 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5479 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5480 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5481 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5485 #i‚de‡
GL_AMD_öãæóved_ñemíts


5486 
	#GL_AMD_öãæóved_ñemíts
 1

	)

5487 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

5488 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

5489 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5490 #ifde‡
GL_GLEXT_PROTOTYPES


5491 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5495 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5496 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

5497 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5498 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5499 #ifde‡
GL_GLEXT_PROTOTYPES


5500 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5501 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5505 #i‚de‡
GL_AMD_«me_gí_dñëe


5506 
	#GL_AMD_«me_gí_dñëe
 1

	)

5507 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5508 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5509 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5510 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5511 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5512 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

5513 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

5514 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

5515 #ifde‡
GL_GLEXT_PROTOTYPES


5516 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

5517 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

5518 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

5522 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


5523 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

5524 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

5525 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

5526 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

5527 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

5528 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

5529 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

5530 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

5531 #ifde‡
GL_GLEXT_PROTOTYPES


5532 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

5536 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5537 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

5538 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5539 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5540 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5541 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5542 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5543 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5544 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5545 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

5546 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

5547 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

5548 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

5549 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

5550 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5551 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5552 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

5553 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5554 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5555 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

5556 #ifde‡
GL_GLEXT_PROTOTYPES


5557 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

5558 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

5559 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

5560 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

5561 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

5562 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5563 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5564 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

5565 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5566 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5567 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

5571 #i‚de‡
GL_AMD_pö√d_mem‹y


5572 
	#GL_AMD_pö√d_mem‹y
 1

	)

5573 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

5576 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


5577 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

5578 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

5579 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

5580 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

5583 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5584 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

5585 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5586 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

5587 #ifde‡
GL_GLEXT_PROTOTYPES


5588 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

5592 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5593 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5596 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


5597 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

5600 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5601 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

5604 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


5605 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

5608 #i‚de‡
GL_AMD_•¨£_ãxtuª


5609 
	#GL_AMD_•¨£_ãxtuª
 1

	)

5610 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

5611 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

5612 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

5613 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

5614 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

5615 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

5616 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

5617 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

5618 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

5619 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5620 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5621 #ifde‡
GL_GLEXT_PROTOTYPES


5622 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5623 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5627 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


5628 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

5629 
	#GL_SET_AMD
 0x874A

	)

5630 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

5631 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

5632 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

5633 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

5634 #ifde‡
GL_GLEXT_PROTOTYPES


5635 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

5639 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5640 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

5643 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5644 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

5647 #i‚de‡
GL_AMD_å™sf‹m_„edback4


5648 
	#GL_AMD_å™sf‹m_„edback4
 1

	)

5649 
	#GL_STREAM_RASTERIZATION_AMD
 0x91A0

	)

5652 #i‚de‡
GL_AMD_vîãx_shadî_œyî


5653 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

5656 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


5657 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

5658 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5659 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5660 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5661 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5662 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5663 
	#GL_DISCRETE_AMD
 0x9006

	)

5664 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5665 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5666 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

5667 #ifde‡
GL_GLEXT_PROTOTYPES


5668 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

5669 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

5673 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


5674 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

5677 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5678 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

5679 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5682 #i‚de‡
GL_APPLE_˛õ¡_°‹age


5683 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5684 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5687 #i‚de‡
GL_APPLE_ñemít_¨øy


5688 
	#GL_APPLE_ñemít_¨øy
 1

	)

5689 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5690 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5691 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5692 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5693 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5694 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5695 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5696 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5697 #ifde‡
GL_GLEXT_PROTOTYPES


5698 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5699 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5700 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5701 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5702 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5706 #i‚de‡
GL_APPLE_„n˚


5707 
	#GL_APPLE_„n˚
 1

	)

5708 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5709 
	#GL_FENCE_APPLE
 0x8A0B

	)

5710 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5711 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5712 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5713 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5714 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5715 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5716 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5717 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5718 #ifde‡
GL_GLEXT_PROTOTYPES


5719 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5720 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5721 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5722 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5723 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5724 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5725 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5726 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5730 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5731 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5732 
	#GL_HALF_APPLE
 0x140B

	)

5733 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5734 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5735 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5736 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5737 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5738 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5739 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5740 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5741 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5742 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5743 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5744 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5745 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5748 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5749 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5750 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5751 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5752 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5753 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5754 #ifde‡
GL_GLEXT_PROTOTYPES


5755 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5756 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5760 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5761 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5762 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5763 
	#GL_RELEASED_APPLE
 0x8A19

	)

5764 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5765 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5766 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5767 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5768 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5769 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5770 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5771 #ifde‡
GL_GLEXT_PROTOTYPES


5772 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5773 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5774 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5778 #i‚de‡
GL_APPLE_rgb_422


5779 
	#GL_APPLE_rgb_422
 1

	)

5780 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5781 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5782 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5783 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5786 #i‚de‡
GL_APPLE_row_byãs


5787 
	#GL_APPLE_row_byãs
 1

	)

5788 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5789 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5792 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5793 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5794 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5797 #i‚de‡
GL_APPLE_ãxtuª_ønge


5798 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5799 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5800 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5801 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5802 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5803 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5804 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5805 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5806 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5807 #ifde‡
GL_GLEXT_PROTOTYPES


5808 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5809 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5813 #i‚de‡
GL_APPLE_å™sf‹m_höt


5814 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5815 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5818 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5819 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5820 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5821 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5822 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5823 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5824 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5825 #ifde‡
GL_GLEXT_PROTOTYPES


5826 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5827 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5828 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5829 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5833 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5834 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5835 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5836 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5837 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5838 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5839 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5840 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5841 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5842 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5843 #ifde‡
GL_GLEXT_PROTOTYPES


5844 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5845 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5846 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5850 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5851 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5852 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5853 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5854 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5855 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5856 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5857 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5858 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5859 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5860 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5861 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5862 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5863 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5864 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5865 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5866 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5867 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5868 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5869 #ifde‡
GL_GLEXT_PROTOTYPES


5870 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5871 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5872 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5873 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5874 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5875 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5876 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5880 #i‚de‡
GL_APPLE_ycb¸_422


5881 
	#GL_APPLE_ycb¸_422
 1

	)

5882 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5885 #i‚de‡
GL_ATI_døw_buf„rs


5886 
	#GL_ATI_døw_buf„rs
 1

	)

5887 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5888 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5889 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5890 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5891 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5892 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5893 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5894 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5895 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5896 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5897 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5898 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5899 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5900 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5901 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5902 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5903 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5904 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5905 #ifde‡
GL_GLEXT_PROTOTYPES


5906 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5910 #i‚de‡
GL_ATI_ñemít_¨øy


5911 
	#GL_ATI_ñemít_¨øy
 1

	)

5912 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5913 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5914 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5915 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5916 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5917 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5918 #ifde‡
GL_GLEXT_PROTOTYPES


5919 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5920 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5921 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5925 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5926 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5927 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5928 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5929 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5930 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5931 
	#GL_DUDV_ATI
 0x8779

	)

5932 
	#GL_DU8DV8_ATI
 0x877A

	)

5933 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5934 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5935 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5936 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5937 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5938 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5939 #ifde‡
GL_GLEXT_PROTOTYPES


5940 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5941 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5942 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5943 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5947 #i‚de‡
GL_ATI_‰agmít_shadî


5948 
	#GL_ATI_‰agmít_shadî
 1

	)

5949 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5950 
	#GL_REG_0_ATI
 0x8921

	)

5951 
	#GL_REG_1_ATI
 0x8922

	)

5952 
	#GL_REG_2_ATI
 0x8923

	)

5953 
	#GL_REG_3_ATI
 0x8924

	)

5954 
	#GL_REG_4_ATI
 0x8925

	)

5955 
	#GL_REG_5_ATI
 0x8926

	)

5956 
	#GL_REG_6_ATI
 0x8927

	)

5957 
	#GL_REG_7_ATI
 0x8928

	)

5958 
	#GL_REG_8_ATI
 0x8929

	)

5959 
	#GL_REG_9_ATI
 0x892A

	)

5960 
	#GL_REG_10_ATI
 0x892B

	)

5961 
	#GL_REG_11_ATI
 0x892C

	)

5962 
	#GL_REG_12_ATI
 0x892D

	)

5963 
	#GL_REG_13_ATI
 0x892E

	)

5964 
	#GL_REG_14_ATI
 0x892F

	)

5965 
	#GL_REG_15_ATI
 0x8930

	)

5966 
	#GL_REG_16_ATI
 0x8931

	)

5967 
	#GL_REG_17_ATI
 0x8932

	)

5968 
	#GL_REG_18_ATI
 0x8933

	)

5969 
	#GL_REG_19_ATI
 0x8934

	)

5970 
	#GL_REG_20_ATI
 0x8935

	)

5971 
	#GL_REG_21_ATI
 0x8936

	)

5972 
	#GL_REG_22_ATI
 0x8937

	)

5973 
	#GL_REG_23_ATI
 0x8938

	)

5974 
	#GL_REG_24_ATI
 0x8939

	)

5975 
	#GL_REG_25_ATI
 0x893A

	)

5976 
	#GL_REG_26_ATI
 0x893B

	)

5977 
	#GL_REG_27_ATI
 0x893C

	)

5978 
	#GL_REG_28_ATI
 0x893D

	)

5979 
	#GL_REG_29_ATI
 0x893E

	)

5980 
	#GL_REG_30_ATI
 0x893F

	)

5981 
	#GL_REG_31_ATI
 0x8940

	)

5982 
	#GL_CON_0_ATI
 0x8941

	)

5983 
	#GL_CON_1_ATI
 0x8942

	)

5984 
	#GL_CON_2_ATI
 0x8943

	)

5985 
	#GL_CON_3_ATI
 0x8944

	)

5986 
	#GL_CON_4_ATI
 0x8945

	)

5987 
	#GL_CON_5_ATI
 0x8946

	)

5988 
	#GL_CON_6_ATI
 0x8947

	)

5989 
	#GL_CON_7_ATI
 0x8948

	)

5990 
	#GL_CON_8_ATI
 0x8949

	)

5991 
	#GL_CON_9_ATI
 0x894A

	)

5992 
	#GL_CON_10_ATI
 0x894B

	)

5993 
	#GL_CON_11_ATI
 0x894C

	)

5994 
	#GL_CON_12_ATI
 0x894D

	)

5995 
	#GL_CON_13_ATI
 0x894E

	)

5996 
	#GL_CON_14_ATI
 0x894F

	)

5997 
	#GL_CON_15_ATI
 0x8950

	)

5998 
	#GL_CON_16_ATI
 0x8951

	)

5999 
	#GL_CON_17_ATI
 0x8952

	)

6000 
	#GL_CON_18_ATI
 0x8953

	)

6001 
	#GL_CON_19_ATI
 0x8954

	)

6002 
	#GL_CON_20_ATI
 0x8955

	)

6003 
	#GL_CON_21_ATI
 0x8956

	)

6004 
	#GL_CON_22_ATI
 0x8957

	)

6005 
	#GL_CON_23_ATI
 0x8958

	)

6006 
	#GL_CON_24_ATI
 0x8959

	)

6007 
	#GL_CON_25_ATI
 0x895A

	)

6008 
	#GL_CON_26_ATI
 0x895B

	)

6009 
	#GL_CON_27_ATI
 0x895C

	)

6010 
	#GL_CON_28_ATI
 0x895D

	)

6011 
	#GL_CON_29_ATI
 0x895E

	)

6012 
	#GL_CON_30_ATI
 0x895F

	)

6013 
	#GL_CON_31_ATI
 0x8960

	)

6014 
	#GL_MOV_ATI
 0x8961

	)

6015 
	#GL_ADD_ATI
 0x8963

	)

6016 
	#GL_MUL_ATI
 0x8964

	)

6017 
	#GL_SUB_ATI
 0x8965

	)

6018 
	#GL_DOT3_ATI
 0x8966

	)

6019 
	#GL_DOT4_ATI
 0x8967

	)

6020 
	#GL_MAD_ATI
 0x8968

	)

6021 
	#GL_LERP_ATI
 0x8969

	)

6022 
	#GL_CND_ATI
 0x896A

	)

6023 
	#GL_CND0_ATI
 0x896B

	)

6024 
	#GL_DOT2_ADD_ATI
 0x896C

	)

6025 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

6026 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

6027 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

6028 
	#GL_NUM_PASSES_ATI
 0x8970

	)

6029 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

6030 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

6031 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

6032 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

6033 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

6034 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

6035 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

6036 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

6037 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

6038 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

6039 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

6040 
	#GL_RED_BIT_ATI
 0x00000001

	)

6041 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

6042 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

6043 
	#GL_2X_BIT_ATI
 0x00000001

	)

6044 
	#GL_4X_BIT_ATI
 0x00000002

	)

6045 
	#GL_8X_BIT_ATI
 0x00000004

	)

6046 
	#GL_HALF_BIT_ATI
 0x00000008

	)

6047 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

6048 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

6049 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

6050 
	#GL_COMP_BIT_ATI
 0x00000002

	)

6051 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

6052 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

6053 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

6054 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6055 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6056 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

6057 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

6058 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

6059 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

6060 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6061 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6062 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6063 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6064 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6065 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6066 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6067 #ifde‡
GL_GLEXT_PROTOTYPES


6068 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

6069 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

6070 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

6071 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

6072 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

6073 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

6074 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

6075 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6076 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6077 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6078 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6079 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6080 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6081 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

6085 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6086 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6087 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6088 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6089 #ifde‡
GL_GLEXT_PROTOTYPES


6090 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6091 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6095 #i‚de‡
GL_ATI_memöfo


6096 
	#GL_ATI_memöfo
 1

	)

6097 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

6098 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

6099 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

6102 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6103 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6104 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

6105 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

6108 #i‚de‡
GL_ATI_≤_åüngÀs


6109 
	#GL_ATI_≤_åüngÀs
 1

	)

6110 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

6111 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

6112 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

6113 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

6114 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

6115 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

6116 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

6117 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

6118 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

6119 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6120 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6121 #ifde‡
GL_GLEXT_PROTOTYPES


6122 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6123 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6127 #i‚de‡
GL_ATI_£∑øã_°ícû


6128 
	#GL_ATI_£∑øã_°ícû
 1

	)

6129 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

6130 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

6131 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

6132 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

6133 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6134 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6135 #ifde‡
GL_GLEXT_PROTOTYPES


6136 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6137 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6141 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6142 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6143 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

6146 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6147 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6148 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

6149 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

6150 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

6153 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6154 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6155 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

6156 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

6157 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

6158 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

6159 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

6160 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

6161 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

6162 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

6163 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

6164 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

6165 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

6166 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

6169 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


6170 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

6171 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

6172 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

6175 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


6176 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

6177 
	#GL_STATIC_ATI
 0x8760

	)

6178 
	#GL_DYNAMIC_ATI
 0x8761

	)

6179 
	#GL_PRESERVE_ATI
 0x8762

	)

6180 
	#GL_DISCARD_ATI
 0x8763

	)

6181 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

6182 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

6183 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

6184 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

6185 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

6186 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6187 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

6188 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6189 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6190 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6191 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

6192 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6193 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6194 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6195 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6196 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6197 #ifde‡
GL_GLEXT_PROTOTYPES


6198 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

6199 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6200 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

6201 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6202 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6203 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6204 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

6205 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6206 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6207 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6208 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6209 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6213 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6214 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6215 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6216 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6217 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6218 #ifde‡
GL_GLEXT_PROTOTYPES


6219 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6220 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6221 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6225 #i‚de‡
GL_ATI_vîãx_°ªams


6226 
	#GL_ATI_vîãx_°ªams
 1

	)

6227 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

6228 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

6229 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

6230 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

6231 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

6232 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

6233 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

6234 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

6235 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

6236 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

6237 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6238 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6239 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6240 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6241 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6242 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6243 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6244 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6245 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6247 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6249 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6250 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6251 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6252 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6253 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6254 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6255 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6256 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6257 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6258 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6259 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6260 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6261 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6262 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6263 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6264 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6265 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6266 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6267 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6268 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6269 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6270 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6271 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6272 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6273 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6274 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6275 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6276 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6277 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6278 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6279 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6280 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6281 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6282 #ifde‡
GL_GLEXT_PROTOTYPES


6283 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

6284 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6285 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

6286 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6287 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

6288 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6289 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

6290 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6291 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6292 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6293 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

6294 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6295 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6296 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6297 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6298 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6299 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6300 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6301 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6302 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6303 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6304 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6305 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6306 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6307 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6308 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6309 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6310 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6311 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6312 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6313 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6314 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6315 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

6316 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

6317 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

6318 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6319 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

6320 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6321 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

6322 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6323 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

6324 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6325 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

6326 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6327 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6331 #i‚de‡
GL_EXT_422_pixñs


6332 
	#GL_EXT_422_pixñs
 1

	)

6333 
	#GL_422_EXT
 0x80CC

	)

6334 
	#GL_422_REV_EXT
 0x80CD

	)

6335 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

6336 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

6339 #i‚de‡
GL_EXT_abgr


6340 
	#GL_EXT_abgr
 1

	)

6341 
	#GL_ABGR_EXT
 0x8000

	)

6344 #i‚de‡
GL_EXT_bgø


6345 
	#GL_EXT_bgø
 1

	)

6346 
	#GL_BGR_EXT
 0x80E0

	)

6347 
	#GL_BGRA_EXT
 0x80E1

	)

6350 #i‚de‡
GL_EXT_bödabÀ_unif‹m


6351 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

6352 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

6353 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

6354 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

6355 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

6356 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

6357 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

6358 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

6359 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6360 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6361 #ifde‡
GL_GLEXT_PROTOTYPES


6362 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

6363 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

6364 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

6368 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


6369 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

6370 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

6371 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

6372 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

6373 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

6374 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

6375 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6376 #ifde‡
GL_GLEXT_PROTOTYPES


6377 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6381 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6382 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6383 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

6384 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

6385 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6386 #ifde‡
GL_GLEXT_PROTOTYPES


6387 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6391 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


6392 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

6393 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

6394 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

6395 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

6396 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

6397 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6398 #ifde‡
GL_GLEXT_PROTOTYPES


6399 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6403 #i‚de‡
GL_EXT_bÀnd_logic_›


6404 
	#GL_EXT_bÀnd_logic_›
 1

	)

6407 #i‚de‡
GL_EXT_bÀnd_mömax


6408 
	#GL_EXT_bÀnd_mömax
 1

	)

6409 
	#GL_MIN_EXT
 0x8007

	)

6410 
	#GL_MAX_EXT
 0x8008

	)

6411 
	#GL_FUNC_ADD_EXT
 0x8006

	)

6412 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

6413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

6414 #ifde‡
GL_GLEXT_PROTOTYPES


6415 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

6419 #i‚de‡
GL_EXT_bÀnd_subåa˘


6420 
	#GL_EXT_bÀnd_subåa˘
 1

	)

6421 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

6422 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

6425 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


6426 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

6427 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

6430 #i‚de‡
GL_EXT_cmyka


6431 
	#GL_EXT_cmyka
 1

	)

6432 
	#GL_CMYK_EXT
 0x800C

	)

6433 
	#GL_CMYKA_EXT
 0x800D

	)

6434 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

6435 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

6438 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


6439 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

6440 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6441 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6442 #ifde‡
GL_GLEXT_PROTOTYPES


6443 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6444 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6448 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


6449 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

6450 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

6451 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

6452 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6453 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

6454 #ifde‡
GL_GLEXT_PROTOTYPES


6455 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

6456 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

6460 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


6461 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

6462 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

6463 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

6464 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

6465 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

6466 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

6467 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

6468 
	#GL_REDUCE_EXT
 0x8016

	)

6469 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

6470 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

6471 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

6472 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

6473 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

6474 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

6475 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

6476 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

6477 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

6478 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

6479 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

6480 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

6481 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

6482 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6483 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6484 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6485 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6486 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6487 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6488 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6489 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6490 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

6491 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6492 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6493 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

6494 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

6495 #ifde‡
GL_GLEXT_PROTOTYPES


6496 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6497 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6498 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6499 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6500 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6501 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6502 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6503 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6504 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

6505 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6506 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6507 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

6508 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

6512 #i‚de‡
GL_EXT_co‹dö©e_‰ame


6513 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

6514 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

6515 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

6516 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

6517 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

6518 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

6519 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

6520 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

6521 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

6522 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

6523 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

6524 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

6525 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

6526 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

6527 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

6528 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

6529 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6530 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

6531 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6532 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

6533 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6534 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

6535 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6536 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

6537 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6538 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

6539 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6540 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

6541 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6542 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

6543 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6544 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

6545 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6546 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

6547 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6548 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6549 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6550 #ifde‡
GL_GLEXT_PROTOTYPES


6551 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

6552 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6553 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

6554 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6555 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

6556 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6557 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

6558 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

6559 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

6560 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6561 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

6562 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6563 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

6564 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6565 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

6566 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6567 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

6568 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

6569 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

6570 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6571 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6572 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6576 #i‚de‡
GL_EXT_c›y_ãxtuª


6577 
	#GL_EXT_c›y_ãxtuª
 1

	)

6578 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6579 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6580 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6581 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6582 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6583 #ifde‡
GL_GLEXT_PROTOTYPES


6584 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6585 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6586 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6587 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6588 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6592 #i‚de‡
GL_EXT_cuŒ_vîãx


6593 
	#GL_EXT_cuŒ_vîãx
 1

	)

6594 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

6595 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

6596 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

6597 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6598 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6599 #ifde‡
GL_GLEXT_PROTOTYPES


6600 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6601 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6605 #i‚de‡
GL_EXT_debug_œbñ


6606 
	#GL_EXT_debug_œbñ
 1

	)

6607 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

6608 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

6609 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

6610 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

6611 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

6612 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

6613 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

6614 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

6615 #ifde‡
GL_GLEXT_PROTOTYPES


6616 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

6617 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

6621 #i‚de‡
GL_EXT_debug_m¨kî


6622 
	#GL_EXT_debug_m¨kî
 1

	)

6623 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6624 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6625 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

6626 #ifde‡
GL_GLEXT_PROTOTYPES


6627 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6628 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6629 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

6633 #i‚de‡
GL_EXT_dïth_bounds_ã°


6634 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6635 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

6636 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

6637 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6638 #ifde‡
GL_GLEXT_PROTOTYPES


6639 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

6643 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


6644 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

6645 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

6646 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

6647 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

6648 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6649 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6650 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6651 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6652 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

6653 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6654 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6655 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6656 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6657 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6658 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6659 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6660 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6661 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

6662 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

6663 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6664 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6665 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6666 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6667 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6668 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6669 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6670 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6671 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6672 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6673 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6674 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6675 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6676 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6677 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6678 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6679 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6680 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6681 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6682 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6683 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6684 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6685 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6686 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6687 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6688 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6689 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6690 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6691 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6692 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6693 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6694 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6695 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6696 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6697 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6698 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6699 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6700 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6701 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6702 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6703 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6704 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6705 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6706 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6707 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6708 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6709 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6710 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6711 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6712 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6713 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6714 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6715 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6716 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6717 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6718 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6719 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6720 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6721 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6722 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6723 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6724 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6725 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6726 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6727 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6728 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6729 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6730 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6731 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6732 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6733 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6734 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6735 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6736 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6737 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6738 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6739 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6740 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6741 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6742 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6743 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6744 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6745 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6746 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6747 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6748 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6749 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6750 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6751 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6752 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6753 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6754 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6755 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6756 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6757 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6758 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6759 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6760 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6761 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6762 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6763 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6764 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6765 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6766 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6767 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6768 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6769 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6770 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6771 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6772 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6773 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6776 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6777 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6778 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6779 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6780 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6781 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6782 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6783 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6784 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6785 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6786 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6787 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6788 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6789 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6790 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6791 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6792 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6793 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6794 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6795 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6796 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6797 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6798 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6799 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6800 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6801 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6802 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6803 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6804 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6805 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6806 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6807 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6808 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6809 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6810 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6811 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6812 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6813 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6814 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6815 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6816 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6817 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6818 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6819 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6820 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6821 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6822 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6823 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6824 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6825 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6826 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6827 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6828 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6829 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6830 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6831 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6832 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6833 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6834 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6835 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6836 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6837 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6838 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6839 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6840 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6841 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6842 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6843 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6844 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6845 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6846 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6847 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6848 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6849 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6850 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6851 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6852 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6853 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6854 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6855 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6856 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6857 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6858 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6859 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6860 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6861 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6862 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6863 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6864 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6865 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6866 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6867 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6868 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6869 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6870 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6871 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6872 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6873 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6874 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6875 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6876 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6877 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6878 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6888 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6889 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6890 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6891 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6892 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6893 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6894 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6895 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6896 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6897 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6898 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6899 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6900 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6901 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

6902 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6903 #ifde‡
GL_GLEXT_PROTOTYPES


6904 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6905 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6906 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6907 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6908 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6909 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6910 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6911 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6912 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6913 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6914 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6915 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6916 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6917 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6918 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6919 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6920 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6921 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6922 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6923 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6924 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6925 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6926 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6927 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6928 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6929 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6930 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6931 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6932 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6933 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6934 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6935 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6936 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6937 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6938 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6939 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6940 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6941 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6942 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6943 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6944 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6945 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6946 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6947 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6948 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6949 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6950 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6951 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6952 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6953 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6954 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6955 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6956 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6957 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6958 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6959 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6960 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6961 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6962 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6963 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6964 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6965 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6966 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6967 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6968 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6969 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6970 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6971 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6972 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6973 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6974 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6975 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6976 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6977 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6978 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6979 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6980 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6981 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6982 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6983 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6984 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6985 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6986 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6987 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6988 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6989 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6990 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6991 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6992 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6993 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6994 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

6995 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6996 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6997 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6998 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6999 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7000 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7001 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

7002 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7003 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7004 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7005 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7006 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

7007 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

7008 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

7009 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

7010 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7011 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

7012 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

7013 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7014 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7015 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7016 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7017 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

7018 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7019 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7020 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7021 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7022 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7023 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7024 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7025 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7026 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7027 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7028 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7029 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7030 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7031 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7032 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7033 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7034 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7035 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7036 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7037 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7038 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

7039 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7040 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7041 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

7042 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7043 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

7044 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7045 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7046 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7047 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7048 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

7049 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

7050 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

7051 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7052 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7053 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7054 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7055 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7056 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7057 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

7058 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

7059 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

7060 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

7061 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

7062 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

7063 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

7064 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

7065 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7066 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7067 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7068 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7069 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

7070 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

7071 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7072 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7073 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7074 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7075 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

7076 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

7077 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7078 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

7079 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7080 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7081 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7082 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7083 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

7084 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7085 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7086 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7087 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

7088 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7089 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

7090 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

7091 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7092 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7093 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7094 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7095 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7096 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7097 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7098 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7099 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

7100 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7101 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7102 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7103 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7104 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7105 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7106 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7107 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7108 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7109 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7110 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7111 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7112 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7113 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7114 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7115 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7116 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7117 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

7118 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7119 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

7120 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7121 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7122 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

7123 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7124 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7125 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7126 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7127 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

7128 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7129 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7130 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7131 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7132 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7133 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7134 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7135 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7136 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7137 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7138 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7139 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7140 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7141 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7142 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7143 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7144 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7145 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

7146 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7147 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

7148 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7149 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7150 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

7151 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

7152 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7153 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7154 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

7155 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

7156 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7157 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

7158 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

7162 #i‚de‡
GL_EXT_døw_buf„rs2


7163 
	#GL_EXT_døw_buf„rs2
 1

	)

7164 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

7165 #ifde‡
GL_GLEXT_PROTOTYPES


7166 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

7170 #i‚de‡
GL_EXT_døw_ö°™˚d


7171 
	#GL_EXT_døw_ö°™˚d
 1

	)

7172 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7173 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7174 #ifde‡
GL_GLEXT_PROTOTYPES


7175 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7176 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

7180 #i‚de‡
GL_EXT_døw_ønge_ñemíts


7181 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

7182 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

7183 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

7184 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

7185 #ifde‡
GL_GLEXT_PROTOTYPES


7186 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

7190 #i‚de‡
GL_EXT_fog_co‹d


7191 
	#GL_EXT_fog_co‹d
 1

	)

7192 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

7193 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

7194 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

7195 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

7196 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

7197 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

7198 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

7199 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

7200 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

7201 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

7202 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

7203 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

7204 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7205 #ifde‡
GL_GLEXT_PROTOTYPES


7206 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

7207 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

7208 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

7209 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

7210 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7214 #i‚de‡
GL_EXT_‰amebuf„r_blô


7215 
	#GL_EXT_‰amebuf„r_blô
 1

	)

7216 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

7217 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

7218 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7219 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

7220 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7221 #ifde‡
GL_GLEXT_PROTOTYPES


7222 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7226 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


7227 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

7228 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

7229 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

7230 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

7231 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7232 #ifde‡
GL_GLEXT_PROTOTYPES


7233 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7237 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


7238 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

7239 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

7240 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

7243 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


7244 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

7245 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

7246 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

7247 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7248 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

7249 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

7250 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

7251 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

7252 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

7253 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

7254 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

7255 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

7256 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

7257 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

7258 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

7259 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

7260 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

7261 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

7262 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

7263 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

7264 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

7265 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

7266 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

7267 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

7268 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

7269 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

7270 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

7271 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

7272 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

7273 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

7274 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

7275 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

7276 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

7277 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

7278 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

7279 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

7280 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

7281 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

7282 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

7283 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

7284 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

7285 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

7286 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

7287 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

7288 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

7289 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

7290 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

7291 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

7292 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

7293 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

7294 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

7295 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

7296 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7297 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7298 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7299 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7300 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7301 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7302 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7303 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7304 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7305 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7306 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7307 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7308 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7309 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7310 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7311 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7312 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7313 #ifde‡
GL_GLEXT_PROTOTYPES


7314 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

7315 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7316 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7317 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7318 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7319 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7320 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

7321 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7322 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7323 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7324 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

7325 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7326 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7327 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7328 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7329 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7330 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

7334 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


7335 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

7336 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

7337 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

7340 #i‚de‡
GL_EXT_geomëry_shadî4


7341 
	#GL_EXT_geomëry_shadî4
 1

	)

7342 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

7343 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

7344 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

7345 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

7346 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

7347 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

7348 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

7349 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

7350 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

7351 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

7352 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

7353 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

7354 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

7355 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

7356 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

7357 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

7358 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

7359 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

7360 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

7361 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

7362 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7363 #ifde‡
GL_GLEXT_PROTOTYPES


7364 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7368 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


7369 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

7370 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7371 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7372 #ifde‡
GL_GLEXT_PROTOTYPES


7373 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7374 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7378 #i‚de‡
GL_EXT_gpu_shadî4


7379 
	#GL_EXT_gpu_shadî4
 1

	)

7380 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

7381 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

7382 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

7383 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

7384 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

7385 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

7386 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

7387 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

7388 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

7389 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

7390 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

7391 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

7392 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

7393 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

7394 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

7395 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

7396 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

7397 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

7398 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

7399 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

7400 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

7401 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

7402 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

7403 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

7404 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

7405 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

7406 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

7407 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

7408 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

7409 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

7410 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7411 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

7412 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

7413 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7414 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7415 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7416 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7417 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7418 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7419 #ifde‡
GL_GLEXT_PROTOTYPES


7420 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

7421 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

7422 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7423 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

7424 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

7425 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

7426 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7427 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7428 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7429 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7430 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7434 #i‚de‡
GL_EXT_hi°ogøm


7435 
	#GL_EXT_hi°ogøm
 1

	)

7436 
	#GL_HISTOGRAM_EXT
 0x8024

	)

7437 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

7438 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

7439 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

7440 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

7441 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

7442 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

7443 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

7444 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

7445 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

7446 
	#GL_MINMAX_EXT
 0x802E

	)

7447 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

7448 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

7449 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

7450 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7451 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7452 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7453 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7454 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7455 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7456 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7457 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7458 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7459 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7460 #ifde‡
GL_GLEXT_PROTOTYPES


7461 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7462 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7463 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7464 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7465 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7466 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7467 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7468 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7469 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

7470 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

7474 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


7475 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

7476 
	#GL_IUI_V2F_EXT
 0x81AD

	)

7477 
	#GL_IUI_V3F_EXT
 0x81AE

	)

7478 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

7479 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

7480 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

7481 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

7482 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

7483 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

7486 #i‚de‡
GL_EXT_ödex_func


7487 
	#GL_EXT_ödex_func
 1

	)

7488 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

7489 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

7490 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

7491 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

7492 #ifde‡
GL_GLEXT_PROTOTYPES


7493 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

7497 #i‚de‡
GL_EXT_ödex_m©îül


7498 
	#GL_EXT_ödex_m©îül
 1

	)

7499 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

7500 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

7501 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

7502 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7503 #ifde‡
GL_GLEXT_PROTOTYPES


7504 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7508 #i‚de‡
GL_EXT_ödex_ãxtuª


7509 
	#GL_EXT_ödex_ãxtuª
 1

	)

7512 #i‚de‡
GL_EXT_light_ãxtuª


7513 
	#GL_EXT_light_ãxtuª
 1

	)

7514 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

7515 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

7516 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

7517 
	#GL_ATTENUATION_EXT
 0x834D

	)

7518 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

7519 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

7520 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

7521 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

7522 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

7523 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

7524 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

7525 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7526 #ifde‡
GL_GLEXT_PROTOTYPES


7527 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

7528 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

7529 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7533 #i‚de‡
GL_EXT_misc_©åibuã


7534 
	#GL_EXT_misc_©åibuã
 1

	)

7537 #i‚de‡
GL_EXT_mu…i_døw_¨øys


7538 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

7539 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

7540 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7541 #ifde‡
GL_GLEXT_PROTOTYPES


7542 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

7543 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

7547 #i‚de‡
GL_EXT_mu…ißm∂e


7548 
	#GL_EXT_mu…ißm∂e
 1

	)

7549 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

7550 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

7551 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

7552 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

7553 
	#GL_1PASS_EXT
 0x80A1

	)

7554 
	#GL_2PASS_0_EXT
 0x80A2

	)

7555 
	#GL_2PASS_1_EXT
 0x80A3

	)

7556 
	#GL_4PASS_0_EXT
 0x80A4

	)

7557 
	#GL_4PASS_1_EXT
 0x80A5

	)

7558 
	#GL_4PASS_2_EXT
 0x80A6

	)

7559 
	#GL_4PASS_3_EXT
 0x80A7

	)

7560 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

7561 
	#GL_SAMPLES_EXT
 0x80A9

	)

7562 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

7563 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

7564 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

7565 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

7566 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7567 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7568 #ifde‡
GL_GLEXT_PROTOTYPES


7569 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

7570 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

7574 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7575 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7576 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

7577 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

7578 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

7579 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

7582 #i‚de‡
GL_EXT_∑cked_Êﬂt


7583 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7584 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

7585 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

7586 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

7589 #i‚de‡
GL_EXT_∑cked_pixñs


7590 
	#GL_EXT_∑cked_pixñs
 1

	)

7591 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

7592 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

7593 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

7594 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

7595 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

7598 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


7599 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

7600 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

7601 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

7602 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

7603 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

7604 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

7605 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

7606 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

7607 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

7608 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

7609 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7610 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7611 #ifde‡
GL_GLEXT_PROTOTYPES


7612 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

7613 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

7614 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7615 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7619 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7620 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7621 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

7622 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

7623 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

7624 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

7627 #i‚de‡
GL_EXT_pixñ_å™sf‹m


7628 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

7629 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

7630 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

7631 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

7632 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

7633 
	#GL_CUBIC_EXT
 0x8334

	)

7634 
	#GL_AVERAGE_EXT
 0x8335

	)

7635 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

7636 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

7637 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

7638 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7639 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7640 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7641 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7642 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7643 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7644 #ifde‡
GL_GLEXT_PROTOTYPES


7645 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7646 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7647 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7648 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7649 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7650 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7654 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


7655 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

7658 #i‚de‡
GL_EXT_poöt_∑ømëîs


7659 
	#GL_EXT_poöt_∑ømëîs
 1

	)

7660 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

7661 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

7662 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

7663 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

7664 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7665 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7666 #ifde‡
GL_GLEXT_PROTOTYPES


7667 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7668 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7672 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


7673 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

7674 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

7675 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

7676 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

7677 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

7678 #ifde‡
GL_GLEXT_PROTOTYPES


7679 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

7683 #i‚de‡
GL_EXT_pﬁyg⁄_off£t_˛amp


7684 
	#GL_EXT_pﬁyg⁄_off£t_˛amp
 1

	)

7685 
	#GL_POLYGON_OFFSET_CLAMP_EXT
 0x8E1B

	)

7686 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETCLAMPEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
, GLÊﬂà
	t˛amp
);

7687 #ifde‡
GL_GLEXT_PROTOTYPES


7688 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tCœmpEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
, GLÊﬂà
˛amp
);

7692 #i‚de‡
GL_EXT_po°_dïth_covîage


7693 
	#GL_EXT_po°_dïth_covîage
 1

	)

7696 #i‚de‡
GL_EXT_¥ovokög_vîãx


7697 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7698 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7699 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7700 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7701 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7702 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7703 #ifde‡
GL_GLEXT_PROTOTYPES


7704 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7708 #i‚de‡
GL_EXT_ø°î_mu…ißm∂e


7709 
	#GL_EXT_ø°î_mu…ißm∂e
 1

	)

7710 
	#GL_RASTER_MULTISAMPLE_EXT
 0x9327

	)

7711 
	#GL_RASTER_SAMPLES_EXT
 0x9328

	)

7712 
	#GL_MAX_RASTER_SAMPLES_EXT
 0x9329

	)

7713 
	#GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
 0x932A

	)

7714 
	#GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
 0x932B

	)

7715 
	#GL_EFFECTIVE_RASTER_SAMPLES_EXT
 0x932C

	)

7716 (
APIENTRYP
 
	tPFNGLRASTERSAMPLESEXTPROC
Ë(
	tGLuöt
 
	tßm∂es
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7717 #ifde‡
GL_GLEXT_PROTOTYPES


7718 
GLAPI
 
APIENTRY
 
glRa°îSam∂esEXT
 (
GLuöt
 
ßm∂es
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7722 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7723 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7724 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7727 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7728 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7729 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7730 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7731 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7732 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7733 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7734 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7735 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7736 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7737 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7738 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7739 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7740 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7741 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7742 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7743 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7744 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7745 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7746 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7747 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7748 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7749 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7750 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7751 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7752 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7753 #ifde‡
GL_GLEXT_PROTOTYPES


7754 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7755 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7756 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7757 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7758 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7759 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7760 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7761 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7762 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7763 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7764 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7765 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7766 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7767 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7768 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7769 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7770 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7774 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7775 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7776 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7777 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7778 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7779 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7780 #ifde‡
GL_GLEXT_PROTOTYPES


7781 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7782 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7783 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7787 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7788 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7789 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7790 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7791 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7794 #i‚de‡
GL_EXT_shadî_image_lﬂd_f‹m©ãd


7795 
	#GL_EXT_shadî_image_lﬂd_f‹m©ãd
 1

	)

7798 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7799 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7800 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7801 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7802 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7803 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7804 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7805 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7806 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7807 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7808 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7809 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7810 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7811 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7812 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7813 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7814 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7815 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7816 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7817 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7818 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7819 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7820 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7821 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7822 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7823 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7824 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7825 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7826 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7827 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7828 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7829 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7830 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7831 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7832 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7833 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7834 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7835 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7836 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7837 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7838 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7839 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7840 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7841 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7842 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7843 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7844 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7845 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7846 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7847 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7848 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7849 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7850 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7851 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7852 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7853 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7854 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7855 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7856 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7857 #ifde‡
GL_GLEXT_PROTOTYPES


7858 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7859 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7863 #i‚de‡
GL_EXT_shadî_öãgî_mix


7864 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7867 #i‚de‡
GL_EXT_shadow_funcs


7868 
	#GL_EXT_shadow_funcs
 1

	)

7871 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7872 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7873 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7876 #i‚de‡
GL_EXT_•¨£_ãxtuª2


7877 
	#GL_EXT_•¨£_ãxtuª2
 1

	)

7880 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7881 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7882 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7883 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7884 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7885 #ifde‡
GL_GLEXT_PROTOTYPES


7886 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7890 #i‚de‡
GL_EXT_°ícû_two_side


7891 
	#GL_EXT_°ícû_two_side
 1

	)

7892 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7893 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7894 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7895 #ifde‡
GL_GLEXT_PROTOTYPES


7896 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7900 #i‚de‡
GL_EXT_°ícû_wøp


7901 
	#GL_EXT_°ícû_wøp
 1

	)

7902 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7903 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7906 #i‚de‡
GL_EXT_subãxtuª


7907 
	#GL_EXT_subãxtuª
 1

	)

7908 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7909 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7910 #ifde‡
GL_GLEXT_PROTOTYPES


7911 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7912 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7916 #i‚de‡
GL_EXT_ãxtuª


7917 
	#GL_EXT_ãxtuª
 1

	)

7918 
	#GL_ALPHA4_EXT
 0x803B

	)

7919 
	#GL_ALPHA8_EXT
 0x803C

	)

7920 
	#GL_ALPHA12_EXT
 0x803D

	)

7921 
	#GL_ALPHA16_EXT
 0x803E

	)

7922 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7923 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7924 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7925 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7926 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7927 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7928 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7929 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7930 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7931 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7932 
	#GL_INTENSITY_EXT
 0x8049

	)

7933 
	#GL_INTENSITY4_EXT
 0x804A

	)

7934 
	#GL_INTENSITY8_EXT
 0x804B

	)

7935 
	#GL_INTENSITY12_EXT
 0x804C

	)

7936 
	#GL_INTENSITY16_EXT
 0x804D

	)

7937 
	#GL_RGB2_EXT
 0x804E

	)

7938 
	#GL_RGB4_EXT
 0x804F

	)

7939 
	#GL_RGB5_EXT
 0x8050

	)

7940 
	#GL_RGB8_EXT
 0x8051

	)

7941 
	#GL_RGB10_EXT
 0x8052

	)

7942 
	#GL_RGB12_EXT
 0x8053

	)

7943 
	#GL_RGB16_EXT
 0x8054

	)

7944 
	#GL_RGBA2_EXT
 0x8055

	)

7945 
	#GL_RGBA4_EXT
 0x8056

	)

7946 
	#GL_RGB5_A1_EXT
 0x8057

	)

7947 
	#GL_RGBA8_EXT
 0x8058

	)

7948 
	#GL_RGB10_A2_EXT
 0x8059

	)

7949 
	#GL_RGBA12_EXT
 0x805A

	)

7950 
	#GL_RGBA16_EXT
 0x805B

	)

7951 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7952 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7953 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7954 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7955 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7956 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7957 
	#GL_REPLACE_EXT
 0x8062

	)

7958 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7959 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7960 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7963 #i‚de‡
GL_EXT_ãxtuª3D


7964 
	#GL_EXT_ãxtuª3D
 1

	)

7965 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7966 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7967 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7968 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7969 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7970 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7971 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7972 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7973 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7974 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7975 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7976 #ifde‡
GL_GLEXT_PROTOTYPES


7977 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7978 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7982 #i‚de‡
GL_EXT_ãxtuª_¨øy


7983 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7984 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7985 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7986 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7987 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7988 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7989 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7990 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7991 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

7992 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7993 #ifde‡
GL_GLEXT_PROTOTYPES


7994 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7998 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


7999 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

8000 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

8001 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

8002 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

8003 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

8004 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

8005 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8006 #ifde‡
GL_GLEXT_PROTOTYPES


8007 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

8011 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


8012 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

8013 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

8014 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

8015 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

8016 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

8019 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


8020 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

8021 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

8022 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

8023 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

8024 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

8027 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


8028 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

8029 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

8030 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

8031 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

8032 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

8035 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


8036 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

8037 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

8038 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

8039 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

8040 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

8041 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

8042 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

8043 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

8044 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

8045 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

8046 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

8047 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

8048 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

8051 #i‚de‡
GL_EXT_ãxtuª_ív_add


8052 
	#GL_EXT_ãxtuª_ív_add
 1

	)

8055 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


8056 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

8057 
	#GL_COMBINE_EXT
 0x8570

	)

8058 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

8059 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

8060 
	#GL_RGB_SCALE_EXT
 0x8573

	)

8061 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

8062 
	#GL_INTERPOLATE_EXT
 0x8575

	)

8063 
	#GL_CONSTANT_EXT
 0x8576

	)

8064 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

8065 
	#GL_PREVIOUS_EXT
 0x8578

	)

8066 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

8067 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

8068 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

8069 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

8070 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

8071 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

8072 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

8073 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

8074 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

8075 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

8076 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

8077 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

8080 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


8081 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

8082 
	#GL_DOT3_RGB_EXT
 0x8740

	)

8083 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

8086 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


8087 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

8088 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

8089 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

8092 #i‚de‡
GL_EXT_ãxtuª_fûãr_mömax


8093 
	#GL_EXT_ãxtuª_fûãr_mömax
 1

	)

8096 #i‚de‡
GL_EXT_ãxtuª_öãgî


8097 
	#GL_EXT_ãxtuª_öãgî
 1

	)

8098 
	#GL_RGBA32UI_EXT
 0x8D70

	)

8099 
	#GL_RGB32UI_EXT
 0x8D71

	)

8100 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

8101 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

8102 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

8103 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

8104 
	#GL_RGBA16UI_EXT
 0x8D76

	)

8105 
	#GL_RGB16UI_EXT
 0x8D77

	)

8106 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

8107 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

8108 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

8109 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

8110 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

8111 
	#GL_RGB8UI_EXT
 0x8D7D

	)

8112 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

8113 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

8114 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

8115 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

8116 
	#GL_RGBA32I_EXT
 0x8D82

	)

8117 
	#GL_RGB32I_EXT
 0x8D83

	)

8118 
	#GL_ALPHA32I_EXT
 0x8D84

	)

8119 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

8120 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

8121 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

8122 
	#GL_RGBA16I_EXT
 0x8D88

	)

8123 
	#GL_RGB16I_EXT
 0x8D89

	)

8124 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

8125 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

8126 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

8127 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

8128 
	#GL_RGBA8I_EXT
 0x8D8E

	)

8129 
	#GL_RGB8I_EXT
 0x8D8F

	)

8130 
	#GL_ALPHA8I_EXT
 0x8D90

	)

8131 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

8132 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

8133 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

8134 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

8135 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

8136 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

8137 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

8138 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

8139 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

8140 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

8141 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

8142 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

8143 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

8144 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

8145 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8146 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8147 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8148 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

8149 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

8150 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

8151 #ifde‡
GL_GLEXT_PROTOTYPES


8152 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8153 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

8154 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8155 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

8156 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

8157 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

8161 #i‚de‡
GL_EXT_ãxtuª_lod_büs


8162 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

8163 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

8164 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

8165 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

8168 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


8169 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

8170 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

8171 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

8172 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

8175 #i‚de‡
GL_EXT_ãxtuª_obje˘


8176 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8177 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

8178 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

8179 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

8180 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

8181 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

8182 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

8183 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

8184 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

8185 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

8186 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8187 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

8188 #ifde‡
GL_GLEXT_PROTOTYPES


8189 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8190 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8191 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8192 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8193 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8194 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

8198 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


8199 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

8200 
	#GL_PERTURB_EXT
 0x85AE

	)

8201 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

8202 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

8203 #ifde‡
GL_GLEXT_PROTOTYPES


8204 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

8208 #i‚de‡
GL_EXT_ãxtuª_sRGB


8209 
	#GL_EXT_ãxtuª_sRGB
 1

	)

8210 
	#GL_SRGB_EXT
 0x8C40

	)

8211 
	#GL_SRGB8_EXT
 0x8C41

	)

8212 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

8213 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

8214 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

8215 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

8216 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

8217 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

8218 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

8219 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

8220 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

8221 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

8222 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

8223 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

8224 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

8225 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

8228 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


8229 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

8230 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

8231 
	#GL_DECODE_EXT
 0x8A49

	)

8232 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

8235 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


8236 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

8237 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

8238 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

8239 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

8242 #i‚de‡
GL_EXT_ãxtuª_¢‹m


8243 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

8244 
	#GL_ALPHA_SNORM
 0x9010

	)

8245 
	#GL_LUMINANCE_SNORM
 0x9011

	)

8246 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

8247 
	#GL_INTENSITY_SNORM
 0x9013

	)

8248 
	#GL_ALPHA8_SNORM
 0x9014

	)

8249 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

8250 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

8251 
	#GL_INTENSITY8_SNORM
 0x9017

	)

8252 
	#GL_ALPHA16_SNORM
 0x9018

	)

8253 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

8254 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

8255 
	#GL_INTENSITY16_SNORM
 0x901B

	)

8256 
	#GL_RED_SNORM
 0x8F90

	)

8257 
	#GL_RG_SNORM
 0x8F91

	)

8258 
	#GL_RGB_SNORM
 0x8F92

	)

8259 
	#GL_RGBA_SNORM
 0x8F93

	)

8262 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


8263 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

8264 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

8265 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

8266 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

8267 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

8268 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

8271 #i‚de‡
GL_EXT_timî_quîy


8272 
	#GL_EXT_timî_quîy
 1

	)

8273 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

8274 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

8275 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

8276 #ifde‡
GL_GLEXT_PROTOTYPES


8277 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

8278 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

8282 #i‚de‡
GL_EXT_å™sf‹m_„edback


8283 
	#GL_EXT_å™sf‹m_„edback
 1

	)

8284 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

8285 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

8286 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

8287 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

8288 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

8289 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

8290 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

8291 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

8292 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

8293 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

8294 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

8295 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

8296 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

8297 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

8298 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

8299 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8300 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

8301 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8302 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8303 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8304 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8305 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8306 #ifde‡
GL_GLEXT_PROTOTYPES


8307 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

8308 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

8309 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8310 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

8311 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

8312 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

8313 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

8317 #i‚de‡
GL_EXT_vîãx_¨øy


8318 
	#GL_EXT_vîãx_¨øy
 1

	)

8319 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

8320 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

8321 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

8322 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

8323 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

8324 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

8325 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

8326 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

8327 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

8328 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

8329 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

8330 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

8331 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

8332 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

8333 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

8334 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

8335 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

8336 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

8337 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

8338 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

8339 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

8340 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

8341 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

8342 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

8343 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

8344 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

8345 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

8346 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

8347 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

8348 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

8349 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

8350 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

8351 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

8352 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8353 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8354 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

8355 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

8356 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8357 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8358 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8359 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8360 #ifde‡
GL_GLEXT_PROTOTYPES


8361 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

8362 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8363 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

8364 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

8365 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

8366 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8367 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8368 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8369 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8373 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


8374 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

8377 #i‚de‡
GL_EXT_vîãx_©åib_64bô


8378 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

8379 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

8380 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

8381 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

8382 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

8383 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

8384 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

8385 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

8386 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

8387 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

8388 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

8389 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

8390 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

8391 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8392 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8393 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8394 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8395 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8396 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8397 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8398 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8400 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8401 #ifde‡
GL_GLEXT_PROTOTYPES


8402 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8403 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8404 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8405 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8406 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8407 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8408 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8409 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8410 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8411 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8415 #i‚de‡
GL_EXT_vîãx_shadî


8416 
	#GL_EXT_vîãx_shadî
 1

	)

8417 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

8418 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

8419 
	#GL_OP_INDEX_EXT
 0x8782

	)

8420 
	#GL_OP_NEGATE_EXT
 0x8783

	)

8421 
	#GL_OP_DOT3_EXT
 0x8784

	)

8422 
	#GL_OP_DOT4_EXT
 0x8785

	)

8423 
	#GL_OP_MUL_EXT
 0x8786

	)

8424 
	#GL_OP_ADD_EXT
 0x8787

	)

8425 
	#GL_OP_MADD_EXT
 0x8788

	)

8426 
	#GL_OP_FRAC_EXT
 0x8789

	)

8427 
	#GL_OP_MAX_EXT
 0x878A

	)

8428 
	#GL_OP_MIN_EXT
 0x878B

	)

8429 
	#GL_OP_SET_GE_EXT
 0x878C

	)

8430 
	#GL_OP_SET_LT_EXT
 0x878D

	)

8431 
	#GL_OP_CLAMP_EXT
 0x878E

	)

8432 
	#GL_OP_FLOOR_EXT
 0x878F

	)

8433 
	#GL_OP_ROUND_EXT
 0x8790

	)

8434 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

8435 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

8436 
	#GL_OP_POWER_EXT
 0x8793

	)

8437 
	#GL_OP_RECIP_EXT
 0x8794

	)

8438 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

8439 
	#GL_OP_SUB_EXT
 0x8796

	)

8440 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

8441 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

8442 
	#GL_OP_MOV_EXT
 0x8799

	)

8443 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

8444 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

8445 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

8446 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

8447 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

8448 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

8449 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

8450 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

8451 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

8452 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

8453 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

8454 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

8455 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

8456 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

8457 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

8458 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

8459 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

8460 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

8461 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

8462 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

8463 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

8464 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

8465 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

8466 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

8467 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

8468 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

8469 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

8470 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

8471 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

8472 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

8473 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

8474 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

8475 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

8476 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

8477 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

8478 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

8479 
	#GL_SCALAR_EXT
 0x87BE

	)

8480 
	#GL_VECTOR_EXT
 0x87BF

	)

8481 
	#GL_MATRIX_EXT
 0x87C0

	)

8482 
	#GL_VARIANT_EXT
 0x87C1

	)

8483 
	#GL_INVARIANT_EXT
 0x87C2

	)

8484 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

8485 
	#GL_LOCAL_EXT
 0x87C4

	)

8486 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

8487 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

8488 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

8489 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

8490 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

8491 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

8492 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

8493 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

8494 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

8495 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

8496 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

8497 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

8498 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

8499 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

8500 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

8501 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

8502 
	#GL_X_EXT
 0x87D5

	)

8503 
	#GL_Y_EXT
 0x87D6

	)

8504 
	#GL_Z_EXT
 0x87D7

	)

8505 
	#GL_W_EXT
 0x87D8

	)

8506 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

8507 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

8508 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

8509 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

8510 
	#GL_ZERO_EXT
 0x87DD

	)

8511 
	#GL_ONE_EXT
 0x87DE

	)

8512 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

8513 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

8514 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

8515 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

8516 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

8517 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

8518 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

8519 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

8520 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

8521 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

8522 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

8523 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

8524 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

8525 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

8526 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

8527 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

8528 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

8529 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8530 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

8531 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8532 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

8533 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

8534 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

8535 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8536 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8537 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8538 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8539 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

8540 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8541 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8542 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

8543 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

8544 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

8545 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

8546 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

8547 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

8548 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

8549 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

8550 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

8551 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8552 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8553 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

8554 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

8555 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

8556 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

8557 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

8558 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

8559 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8560 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8561 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8562 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

8563 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8564 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8565 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8566 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8567 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8568 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8569 #ifde‡
GL_GLEXT_PROTOTYPES


8570 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

8571 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

8572 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

8573 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

8574 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

8575 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

8576 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

8577 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

8578 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8579 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8580 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8581 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8582 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

8583 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8584 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8585 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

8586 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

8587 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

8588 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

8589 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

8590 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

8591 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

8592 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

8593 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

8594 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8595 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8596 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

8597 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

8598 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

8599 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

8600 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

8601 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

8602 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8603 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8604 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8605 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

8606 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8607 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8608 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8609 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8610 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8611 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8615 #i‚de‡
GL_EXT_vîãx_weightög


8616 
	#GL_EXT_vîãx_weightög
 1

	)

8617 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

8618 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

8619 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

8620 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

8621 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

8622 
	#GL_MODELVIEW0_EXT
 0x1700

	)

8623 
	#GL_MODELVIEW1_EXT
 0x850A

	)

8624 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

8625 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

8626 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

8627 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

8628 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

8629 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

8630 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

8631 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

8632 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8633 #ifde‡
GL_GLEXT_PROTOTYPES


8634 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

8635 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

8636 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8640 #i‚de‡
GL_EXT_x11_sync_obje˘


8641 
	#GL_EXT_x11_sync_obje˘
 1

	)

8642 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

8643 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

8644 #ifde‡
GL_GLEXT_PROTOTYPES


8645 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

8649 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8650 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8651 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8652 #ifde‡
GL_GLEXT_PROTOTYPES


8653 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8657 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8658 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8659 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

8660 #ifde‡
GL_GLEXT_PROTOTYPES


8661 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

8665 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


8666 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

8667 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

8668 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

8669 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

8670 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

8673 #i‚de‡
GL_HP_image_å™sf‹m


8674 
	#GL_HP_image_å™sf‹m
 1

	)

8675 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

8676 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

8677 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

8678 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

8679 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

8680 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

8681 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

8682 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

8683 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

8684 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

8685 
	#GL_CUBIC_HP
 0x815F

	)

8686 
	#GL_AVERAGE_HP
 0x8160

	)

8687 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

8688 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

8689 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

8690 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8691 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8692 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8693 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8694 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8695 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8696 #ifde‡
GL_GLEXT_PROTOTYPES


8697 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8698 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

8699 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8700 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8701 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8702 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8706 #i‚de‡
GL_HP_oc˛usi⁄_ã°


8707 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

8708 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

8709 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

8712 #i‚de‡
GL_HP_ãxtuª_lightög


8713 
	#GL_HP_ãxtuª_lightög
 1

	)

8714 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

8715 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

8716 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

8719 #i‚de‡
GL_IBM_cuŒ_vîãx


8720 
	#GL_IBM_cuŒ_vîãx
 1

	)

8721 
	#GL_CULL_VERTEX_IBM
 103050

	)

8724 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


8725 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

8726 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8727 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8728 #ifde‡
GL_GLEXT_PROTOTYPES


8729 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8730 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8734 #i‚de‡
GL_IBM_ø°îpos_˛ù


8735 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8736 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8739 #i‚de‡
GL_IBM_°©ic_d©a


8740 
	#GL_IBM_°©ic_d©a
 1

	)

8741 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8742 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8743 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8744 #ifde‡
GL_GLEXT_PROTOTYPES


8745 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8749 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8750 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8751 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8754 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8755 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8756 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8757 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8758 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8759 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8760 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8761 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8762 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8763 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8764 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8765 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8766 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8767 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8768 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8769 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8770 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8771 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8772 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8773 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8774 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8775 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8776 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8777 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8778 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8779 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8780 #ifde‡
GL_GLEXT_PROTOTYPES


8781 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8782 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8783 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8784 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8785 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8786 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8787 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8788 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8792 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8793 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8794 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8795 #ifde‡
GL_GLEXT_PROTOTYPES


8796 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8800 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8801 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8802 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8803 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8804 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8805 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8806 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8807 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8808 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8809 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8812 #i‚de‡
GL_INGR_öãæa˚_ªad


8813 
	#GL_INGR_öãæa˚_ªad
 1

	)

8814 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8817 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8818 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8821 #i‚de‡
GL_INTEL_‰amebuf„r_CMAA


8822 
	#GL_INTEL_‰amebuf„r_CMAA
 1

	)

8823 (
APIENTRYP
 
	tPFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
) ();

8824 #ifde‡
GL_GLEXT_PROTOTYPES


8825 
GLAPI
 
APIENTRY
 
glAµlyFømebuf„rAâachmítCMAAINTEL
 ();

8829 #i‚de‡
GL_INTEL_m≠_ãxtuª


8830 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8831 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8832 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8833 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8834 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8835 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8836 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8837 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8838 #ifde‡
GL_GLEXT_PROTOTYPES


8839 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8840 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8841 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8845 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8846 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8847 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8848 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8849 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8850 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8851 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8852 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8853 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8854 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8855 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8856 #ifde‡
GL_GLEXT_PROTOTYPES


8857 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8858 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8859 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8860 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8864 #i‚de‡
GL_INTEL_≥rf‹m™˚_quîy


8865 
	#GL_INTEL_≥rf‹m™˚_quîy
 1

	)

8866 
	#GL_PERFQUERY_SINGLE_CONTEXT_INTEL
 0x00000000

	)

8867 
	#GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
 0x00000001

	)

8868 
	#GL_PERFQUERY_WAIT_INTEL
 0x83FB

	)

8869 
	#GL_PERFQUERY_FLUSH_INTEL
 0x83FA

	)

8870 
	#GL_PERFQUERY_DONOT_FLUSH_INTEL
 0x83F9

	)

8871 
	#GL_PERFQUERY_COUNTER_EVENT_INTEL
 0x94F0

	)

8872 
	#GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
 0x94F1

	)

8873 
	#GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
 0x94F2

	)

8874 
	#GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
 0x94F3

	)

8875 
	#GL_PERFQUERY_COUNTER_RAW_INTEL
 0x94F4

	)

8876 
	#GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
 0x94F5

	)

8877 
	#GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
 0x94F8

	)

8878 
	#GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
 0x94F9

	)

8879 
	#GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
 0x94FA

	)

8880 
	#GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
 0x94FB

	)

8881 
	#GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
 0x94FC

	)

8882 
	#GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
 0x94FD

	)

8883 
	#GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
 0x94FE

	)

8884 
	#GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
 0x94FF

	)

8885 
	#GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
 0x9500

	)

8886 (
APIENTRYP
 
	tPFNGLBEGINPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8887 (
APIENTRYP
 
	tPFNGLCREATEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	tquîyH™dÀ
);

8888 (
APIENTRYP
 
	tPFNGLDELETEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8889 (
APIENTRYP
 
	tPFNGLENDPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8890 (
APIENTRYP
 
	tPFNGLGETFIRSTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 *
	tquîyId
);

8891 (
APIENTRYP
 
	tPFNGLGETNEXTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	t√xtQuîyId
);

8892 (
APIENTRYP
 
	tPFNGLGETPERFCOUNTERINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tcou¡îId
, GLuöà
	tcou¡îNameLígth
, 
	tGLch¨
 *
	tcou¡îName
, GLuöà
	tcou¡îDescLígth
, GLch¨ *
	tcou¡îDesc
, GLuöà*
	tcou¡îOff£t
, GLuöà*
	tcou¡îD©aSize
, GLuöà*
	tcou¡îTy≥Enum
, GLuöà*
	tcou¡îD©aTy≥Enum
, 
	tGLuöt64
 *
	tøwCou¡îMaxVÆue
);

8893 (
APIENTRYP
 
	tPFNGLGETPERFQUERYDATAINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
, GLuöà
	tÊags
, 
	tGLsizei
 
	td©aSize
, 
	tGLvoid
 *
	td©a
, GLuöà*
	tbyãsWrôãn
);

8894 (
APIENTRYP
 
	tPFNGLGETPERFQUERYIDBYNAMEINTELPROC
Ë(
	tGLch¨
 *
	tquîyName
, 
	tGLuöt
 *
	tquîyId
);

8895 (
APIENTRYP
 
	tPFNGLGETPERFQUERYINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tquîyNameLígth
, 
	tGLch¨
 *
	tquîyName
, GLuöà*
	td©aSize
, GLuöà*
	tnoCou¡îs
, GLuöà*
	tnoIn°™˚s
, GLuöà*
	tˇpsMask
);

8896 #ifde‡
GL_GLEXT_PROTOTYPES


8897 
GLAPI
 
APIENTRY
 
glBegöPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8898 
GLAPI
 
APIENTRY
 
glCª©ePîfQuîyINTEL
 (
GLuöt
 
quîyId
, GLuöà*
quîyH™dÀ
);

8899 
GLAPI
 
APIENTRY
 
glDñëePîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8900 
GLAPI
 
APIENTRY
 
glEndPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8901 
GLAPI
 
APIENTRY
 
glGëFú°PîfQuîyIdINTEL
 (
GLuöt
 *
quîyId
);

8902 
GLAPI
 
APIENTRY
 
glGëNextPîfQuîyIdINTEL
 (
GLuöt
 
quîyId
, GLuöà*
√xtQuîyId
);

8903 
GLAPI
 
APIENTRY
 
glGëPîfCou¡îInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
cou¡îId
, GLuöà
cou¡îNameLígth
, 
GLch¨
 *
cou¡îName
, GLuöà
cou¡îDescLígth
, GLch¨ *
cou¡îDesc
, GLuöà*
cou¡îOff£t
, GLuöà*
cou¡îD©aSize
, GLuöà*
cou¡îTy≥Enum
, GLuöà*
cou¡îD©aTy≥Enum
, 
GLuöt64
 *
øwCou¡îMaxVÆue
);

8904 
GLAPI
 
APIENTRY
 
glGëPîfQuîyD©aINTEL
 (
GLuöt
 
quîyH™dÀ
, GLuöà
Êags
, 
GLsizei
 
d©aSize
, 
GLvoid
 *
d©a
, GLuöà*
byãsWrôãn
);

8905 
GLAPI
 
APIENTRY
 
glGëPîfQuîyIdByNameINTEL
 (
GLch¨
 *
quîyName
, 
GLuöt
 *
quîyId
);

8906 
GLAPI
 
APIENTRY
 
glGëPîfQuîyInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
quîyNameLígth
, 
GLch¨
 *
quîyName
, GLuöà*
d©aSize
, GLuöà*
noCou¡îs
, GLuöà*
noIn°™˚s
, GLuöà*
ˇpsMask
);

8910 #i‚de‡
GL_MESAX_ãxtuª_°ack


8911 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8912 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8913 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8914 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8915 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8916 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8917 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8920 #i‚de‡
GL_MESA_∑ck_övît


8921 
	#GL_MESA_∑ck_övît
 1

	)

8922 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8925 #i‚de‡
GL_MESA_ªsize_buf„rs


8926 
	#GL_MESA_ªsize_buf„rs
 1

	)

8927 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8928 #ifde‡
GL_GLEXT_PROTOTYPES


8929 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8933 #i‚de‡
GL_MESA_wödow_pos


8934 
	#GL_MESA_wödow_pos
 1

	)

8935 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8936 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8937 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8938 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8939 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8940 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8941 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8942 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8943 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8944 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8945 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8946 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8947 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8948 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8949 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8950 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8951 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8952 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8953 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8954 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8955 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8956 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8957 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8958 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8959 #ifde‡
GL_GLEXT_PROTOTYPES


8960 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8961 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8962 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8963 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8964 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8965 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8966 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8967 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8968 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8969 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8970 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8971 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8972 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

8973 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

8974 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

8975 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8976 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8977 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8978 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

8979 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8980 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8981 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

8982 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

8983 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8987 #i‚de‡
GL_MESA_ycb¸_ãxtuª


8988 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

8989 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

8990 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

8991 
	#GL_YCBCR_MESA
 0x8757

	)

8994 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


8995 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

8996 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

8997 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

8998 #ifde‡
GL_GLEXT_PROTOTYPES


8999 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

9000 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

9004 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


9005 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

9006 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

9007 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

9008 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

9009 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

9010 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

9013 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


9014 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

9015 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9016 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9017 #ifde‡
GL_GLEXT_PROTOTYPES


9018 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9019 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9023 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡


9024 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡
 1

	)

9025 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9026 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9027 #ifde‡
GL_GLEXT_PROTOTYPES


9028 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9029 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9033 #i‚de‡
GL_NV_bödÀss_ãxtuª


9034 
	#GL_NV_bödÀss_ãxtuª
 1

	)

9035 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9036 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

9037 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9038 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9039 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

9040 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

9041 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9042 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9043 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

9044 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9045 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

9046 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9047 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9048 #ifde‡
GL_GLEXT_PROTOTYPES


9049 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

9050 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

9051 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9052 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9053 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

9054 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

9055 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9056 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9057 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

9058 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9059 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

9060 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9061 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9065 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


9066 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

9067 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

9068 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

9069 
	#GL_BLUE_NV
 0x1905

	)

9070 
	#GL_COLORBURN_NV
 0x929A

	)

9071 
	#GL_COLORDODGE_NV
 0x9299

	)

9072 
	#GL_CONJOINT_NV
 0x9284

	)

9073 
	#GL_CONTRAST_NV
 0x92A1

	)

9074 
	#GL_DARKEN_NV
 0x9297

	)

9075 
	#GL_DIFFERENCE_NV
 0x929E

	)

9076 
	#GL_DISJOINT_NV
 0x9283

	)

9077 
	#GL_DST_ATOP_NV
 0x928F

	)

9078 
	#GL_DST_IN_NV
 0x928B

	)

9079 
	#GL_DST_NV
 0x9287

	)

9080 
	#GL_DST_OUT_NV
 0x928D

	)

9081 
	#GL_DST_OVER_NV
 0x9289

	)

9082 
	#GL_EXCLUSION_NV
 0x92A0

	)

9083 
	#GL_GREEN_NV
 0x1904

	)

9084 
	#GL_HARDLIGHT_NV
 0x929B

	)

9085 
	#GL_HARDMIX_NV
 0x92A9

	)

9086 
	#GL_HSL_COLOR_NV
 0x92AF

	)

9087 
	#GL_HSL_HUE_NV
 0x92AD

	)

9088 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

9089 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

9090 
	#GL_INVERT_OVG_NV
 0x92B4

	)

9091 
	#GL_INVERT_RGB_NV
 0x92A3

	)

9092 
	#GL_LIGHTEN_NV
 0x9298

	)

9093 
	#GL_LINEARBURN_NV
 0x92A5

	)

9094 
	#GL_LINEARDODGE_NV
 0x92A4

	)

9095 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

9096 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

9097 
	#GL_MINUS_NV
 0x929F

	)

9098 
	#GL_MULTIPLY_NV
 0x9294

	)

9099 
	#GL_OVERLAY_NV
 0x9296

	)

9100 
	#GL_PINLIGHT_NV
 0x92A8

	)

9101 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

9102 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

9103 
	#GL_PLUS_DARKER_NV
 0x9292

	)

9104 
	#GL_PLUS_NV
 0x9291

	)

9105 
	#GL_RED_NV
 0x1903

	)

9106 
	#GL_SCREEN_NV
 0x9295

	)

9107 
	#GL_SOFTLIGHT_NV
 0x929C

	)

9108 
	#GL_SRC_ATOP_NV
 0x928E

	)

9109 
	#GL_SRC_IN_NV
 0x928A

	)

9110 
	#GL_SRC_NV
 0x9286

	)

9111 
	#GL_SRC_OUT_NV
 0x928C

	)

9112 
	#GL_SRC_OVER_NV
 0x9288

	)

9113 
	#GL_UNCORRELATED_NV
 0x9282

	)

9114 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

9115 
	#GL_XOR_NV
 0x1506

	)

9116 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9117 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

9118 #ifde‡
GL_GLEXT_PROTOTYPES


9119 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9120 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

9124 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


9125 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

9126 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

9129 #i‚de‡
GL_NV_bÀnd_squ¨e


9130 
	#GL_NV_bÀnd_squ¨e
 1

	)

9133 #i‚de‡
GL_NV_comm™d_li°


9134 
	#GL_NV_comm™d_li°
 1

	)

9135 
	#GL_TERMINATE_SEQUENCE_COMMAND_NV
 0x0000

	)

9136 
	#GL_NOP_COMMAND_NV
 0x0001

	)

9137 
	#GL_DRAW_ELEMENTS_COMMAND_NV
 0x0002

	)

9138 
	#GL_DRAW_ARRAYS_COMMAND_NV
 0x0003

	)

9139 
	#GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
 0x0004

	)

9140 
	#GL_DRAW_ARRAYS_STRIP_COMMAND_NV
 0x0005

	)

9141 
	#GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
 0x0006

	)

9142 
	#GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
 0x0007

	)

9143 
	#GL_ELEMENT_ADDRESS_COMMAND_NV
 0x0008

	)

9144 
	#GL_ATTRIBUTE_ADDRESS_COMMAND_NV
 0x0009

	)

9145 
	#GL_UNIFORM_ADDRESS_COMMAND_NV
 0x000A

	)

9146 
	#GL_BLEND_COLOR_COMMAND_NV
 0x000B

	)

9147 
	#GL_STENCIL_REF_COMMAND_NV
 0x000C

	)

9148 
	#GL_LINE_WIDTH_COMMAND_NV
 0x000D

	)

9149 
	#GL_POLYGON_OFFSET_COMMAND_NV
 0x000E

	)

9150 
	#GL_ALPHA_REF_COMMAND_NV
 0x000F

	)

9151 
	#GL_VIEWPORT_COMMAND_NV
 0x0010

	)

9152 
	#GL_SCISSOR_COMMAND_NV
 0x0011

	)

9153 
	#GL_FRONT_FACE_COMMAND_NV
 0x0012

	)

9154 (
APIENTRYP
 
	tPFNGLCREATESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t°©es
);

9155 (
APIENTRYP
 
	tPFNGLDELETESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t°©es
);

9156 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSTATENVPROC
Ë(
	tGLuöt
 
	t°©e
);

9157 (
APIENTRYP
 
	tPFNGLSTATECAPTURENVPROC
Ë(
	tGLuöt
 
	t°©e
, 
	tGLíum
 
	tmode
);

9158 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETCOMMANDHEADERNVPROC
Ë(
	tGLíum
 
	ttokíID
, 
	tGLuöt
 
	tsize
);

9159 
GLush‹t
 (
	tAPIENTRYP
 
	tPFNGLGETSTAGEINDEXNVPROC
Ë(
	tGLíum
 
	tshadîty≥
);

9160 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, 
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, GLuöà
	tcou¡
);

9161 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSADDRESSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, 
	tGLuöt
 
	tcou¡
);

9162 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9163 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESADDRESSNVPROC
Ë(c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° 
	tGLuöt
 *
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9164 (
APIENTRYP
 
	tPFNGLCREATECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tli°s
);

9165 (
APIENTRYP
 
	tPFNGLDELETECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tli°s
);

9166 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9167 (
APIENTRYP
 
	tPFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmít
, c⁄° **
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9168 (
APIENTRYP
 
	tPFNGLCOMMANDLISTSEGMENTSNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmíts
);

9169 (
APIENTRYP
 
	tPFNGLCOMPILECOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9170 (
APIENTRYP
 
	tPFNGLCALLCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9171 #ifde‡
GL_GLEXT_PROTOTYPES


9172 
GLAPI
 
APIENTRY
 
glCª©eSèãsNV
 (
GLsizei
 
n
, 
GLuöt
 *
°©es
);

9173 
GLAPI
 
APIENTRY
 
glDñëeSèãsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
°©es
);

9174 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSèãNV
 (
GLuöt
 
°©e
);

9175 
GLAPI
 
APIENTRY
 
glSèãC≠tuªNV
 (
GLuöt
 
°©e
, 
GLíum
 
mode
);

9176 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëComm™dHódîNV
 (
GLíum
 
tokíID
, GLuöà
size
);

9177 
GLAPI
 
GLush‹t
 
APIENTRY
 
glGëSègeIndexNV
 (
GLíum
 
shadîty≥
);

9178 
GLAPI
 
APIENTRY
 
glDøwComm™dsNV
 (
GLíum
 
¥imôiveMode
, 
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, GLuöà
cou¡
);

9179 
GLAPI
 
APIENTRY
 
glDøwComm™dsAddªssNV
 (
GLíum
 
¥imôiveMode
, c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, 
GLuöt
 
cou¡
);

9180 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsNV
 (
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9181 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsAddªssNV
 (c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° 
GLuöt
 *
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9182 
GLAPI
 
APIENTRY
 
glCª©eComm™dLi°sNV
 (
GLsizei
 
n
, 
GLuöt
 *
li°s
);

9183 
GLAPI
 
APIENTRY
 
glDñëeComm™dLi°sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
li°s
);

9184 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsComm™dLi°NV
 (
GLuöt
 
li°
);

9185 
GLAPI
 
APIENTRY
 
glLi°DøwComm™dsSèãsClõ¡NV
 (
GLuöt
 
li°
, GLuöà
£gmít
, c⁄° **
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9186 
GLAPI
 
APIENTRY
 
glComm™dLi°SegmítsNV
 (
GLuöt
 
li°
, GLuöà
£gmíts
);

9187 
GLAPI
 
APIENTRY
 
glCompûeComm™dLi°NV
 (
GLuöt
 
li°
);

9188 
GLAPI
 
APIENTRY
 
glCÆlComm™dLi°NV
 (
GLuöt
 
li°
);

9192 #i‚de‡
GL_NV_compuã_¥ogøm5


9193 
	#GL_NV_compuã_¥ogøm5
 1

	)

9194 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

9195 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

9198 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


9199 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

9200 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

9201 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

9202 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

9203 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

9204 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

9205 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

9206 #ifde‡
GL_GLEXT_PROTOTYPES


9207 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

9208 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

9212 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î


9213 
	#GL_NV_c⁄£rv©ive_ø°î
 1

	)

9214 
	#GL_CONSERVATIVE_RASTERIZATION_NV
 0x9346

	)

9215 
	#GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
 0x9347

	)

9216 
	#GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
 0x9348

	)

9217 
	#GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
 0x9349

	)

9218 (
APIENTRYP
 
	tPFNGLSUBPIXELPRECISIONBIASNVPROC
Ë(
	tGLuöt
 
	txbôs
, GLuöà
	tybôs
);

9219 #ifde‡
GL_GLEXT_PROTOTYPES


9220 
GLAPI
 
APIENTRY
 
glSubpixñPªcisi⁄BüsNV
 (
GLuöt
 
xbôs
, GLuöà
ybôs
);

9224 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_dû©e


9225 
	#GL_NV_c⁄£rv©ive_ø°î_dû©e
 1

	)

9226 
	#GL_CONSERVATIVE_RASTER_DILATE_NV
 0x9379

	)

9227 
	#GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
 0x937A

	)

9228 
	#GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
 0x937B

	)

9229 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9230 #ifde‡
GL_GLEXT_PROTOTYPES


9231 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9235 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


9236 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

9237 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

9238 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

9241 #i‚de‡
GL_NV_c›y_image


9242 
	#GL_NV_c›y_image
 1

	)

9243 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

9244 #ifde‡
GL_GLEXT_PROTOTYPES


9245 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

9249 #i‚de‡
GL_NV_dìp_ãxtuª3D


9250 
	#GL_NV_dìp_ãxtuª3D
 1

	)

9251 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

9252 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

9255 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


9256 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

9257 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

9258 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

9259 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

9260 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

9261 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

9262 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

9263 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

9264 #ifde‡
GL_GLEXT_PROTOTYPES


9265 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

9266 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

9267 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

9271 #i‚de‡
GL_NV_dïth_˛amp


9272 
	#GL_NV_dïth_˛amp
 1

	)

9273 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

9276 #i‚de‡
GL_NV_døw_ãxtuª


9277 
	#GL_NV_døw_ãxtuª
 1

	)

9278 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

9284 #i‚de‡
GL_NV_evÆu©‹s


9285 
	#GL_NV_evÆu©‹s
 1

	)

9286 
	#GL_EVAL_2D_NV
 0x86C0

	)

9287 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

9288 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

9289 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

9290 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

9291 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

9292 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

9293 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

9294 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

9295 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

9296 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

9297 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

9298 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

9299 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

9300 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

9301 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

9302 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

9303 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

9304 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

9305 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

9306 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

9307 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

9308 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

9309 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

9310 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

9311 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9312 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9313 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

9314 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9315 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9316 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9317 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9318 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

9319 #ifde‡
GL_GLEXT_PROTOTYPES


9320 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

9321 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9322 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9323 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

9324 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9325 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9326 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9327 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9328 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

9332 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


9333 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

9334 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

9335 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

9336 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

9337 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

9338 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

9339 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

9340 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

9341 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

9342 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

9343 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

9344 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

9345 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

9346 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9347 #ifde‡
GL_GLEXT_PROTOTYPES


9348 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

9349 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

9350 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

9354 #i‚de‡
GL_NV_„n˚


9355 
	#GL_NV_„n˚
 1

	)

9356 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

9357 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

9358 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

9359 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

9360 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

9361 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9362 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9363 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9364 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9365 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

9366 #ifde‡
GL_GLEXT_PROTOTYPES


9367 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

9368 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

9369 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

9370 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

9371 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9372 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

9373 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

9377 #i‚de‡
GL_NV_fûl_ª˘™gÀ


9378 
	#GL_NV_fûl_ª˘™gÀ
 1

	)

9379 
	#GL_FILL_RECTANGLE_NV
 0x933C

	)

9382 #i‚de‡
GL_NV_Êﬂt_buf„r


9383 
	#GL_NV_Êﬂt_buf„r
 1

	)

9384 
	#GL_FLOAT_R_NV
 0x8880

	)

9385 
	#GL_FLOAT_RG_NV
 0x8881

	)

9386 
	#GL_FLOAT_RGB_NV
 0x8882

	)

9387 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

9388 
	#GL_FLOAT_R16_NV
 0x8884

	)

9389 
	#GL_FLOAT_R32_NV
 0x8885

	)

9390 
	#GL_FLOAT_RG16_NV
 0x8886

	)

9391 
	#GL_FLOAT_RG32_NV
 0x8887

	)

9392 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

9393 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

9394 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

9395 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

9396 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

9397 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

9398 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

9401 #i‚de‡
GL_NV_fog_di°™˚


9402 
	#GL_NV_fog_di°™˚
 1

	)

9403 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

9404 
	#GL_EYE_RADIAL_NV
 0x855B

	)

9405 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

9408 #i‚de‡
GL_NV_‰agmít_covîage_to_cﬁ‹


9409 
	#GL_NV_‰agmít_covîage_to_cﬁ‹
 1

	)

9410 
	#GL_FRAGMENT_COVERAGE_TO_COLOR_NV
 0x92DD

	)

9411 
	#GL_FRAGMENT_COVERAGE_COLOR_NV
 0x92DE

	)

9412 (
APIENTRYP
 
	tPFNGLFRAGMENTCOVERAGECOLORNVPROC
Ë(
	tGLuöt
 
	tcﬁ‹
);

9413 #ifde‡
GL_GLEXT_PROTOTYPES


9414 
GLAPI
 
APIENTRY
 
glFøgmítCovîageCﬁ‹NV
 (
GLuöt
 
cﬁ‹
);

9418 #i‚de‡
GL_NV_‰agmít_¥ogøm


9419 
	#GL_NV_‰agmít_¥ogøm
 1

	)

9420 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

9421 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

9422 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

9423 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

9424 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

9425 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

9426 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9427 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9428 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9429 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9430 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

9431 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

9432 #ifde‡
GL_GLEXT_PROTOTYPES


9433 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9434 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

9435 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9436 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

9437 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

9438 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

9442 #i‚de‡
GL_NV_‰agmít_¥ogøm2


9443 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

9444 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

9445 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

9446 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

9447 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

9448 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

9451 #i‚de‡
GL_NV_‰agmít_¥ogøm4


9452 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

9455 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


9456 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

9459 #i‚de‡
GL_NV_‰agmít_shadî_öãæock


9460 
	#GL_NV_‰agmít_shadî_öãæock
 1

	)

9463 #i‚de‡
GL_NV_‰amebuf„r_mixed_ßm∂es


9464 
	#GL_NV_‰amebuf„r_mixed_ßm∂es
 1

	)

9465 
	#GL_COVERAGE_MODULATION_TABLE_NV
 0x9331

	)

9466 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

9467 
	#GL_DEPTH_SAMPLES_NV
 0x932D

	)

9468 
	#GL_STENCIL_SAMPLES_NV
 0x932E

	)

9469 
	#GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
 0x932F

	)

9470 
	#GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
 0x9330

	)

9471 
	#GL_COVERAGE_MODULATION_NV
 0x9332

	)

9472 
	#GL_COVERAGE_MODULATION_TABLE_SIZE_NV
 0x9333

	)

9473 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9474 (
APIENTRYP
 
	tPFNGLGETCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tbufsize
, 
	tGLÊﬂt
 *
	tv
);

9475 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONNVPROC
Ë(
	tGLíum
 
	tcomp⁄íts
);

9476 #ifde‡
GL_GLEXT_PROTOTYPES


9477 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄TabÀNV
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
v
);

9478 
GLAPI
 
APIENTRY
 
glGëCovîageModuœti⁄TabÀNV
 (
GLsizei
 
bufsize
, 
GLÊﬂt
 *
v
);

9479 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄NV
 (
GLíum
 
comp⁄íts
);

9483 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


9484 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

9485 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

9486 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

9487 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

9488 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

9489 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9490 #ifde‡
GL_GLEXT_PROTOTYPES


9491 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

9495 #i‚de‡
GL_NV_geomëry_¥ogøm4


9496 
	#GL_NV_geomëry_¥ogøm4
 1

	)

9497 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

9498 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

9499 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

9500 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

9501 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9502 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9503 #ifde‡
GL_GLEXT_PROTOTYPES


9504 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

9505 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

9506 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

9510 #i‚de‡
GL_NV_geomëry_shadî4


9511 
	#GL_NV_geomëry_shadî4
 1

	)

9514 #i‚de‡
GL_NV_geomëry_shadî_∑s°hrough


9515 
	#GL_NV_geomëry_shadî_∑s°hrough
 1

	)

9518 #i‚de‡
GL_NV_gpu_¥ogøm4


9519 
	#GL_NV_gpu_¥ogøm4
 1

	)

9520 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

9521 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

9522 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

9523 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

9524 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

9525 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

9526 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

9527 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

9528 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9529 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9530 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9531 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9532 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9533 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9534 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9535 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9536 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9537 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9538 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9539 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9540 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9541 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9542 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9543 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9544 #ifde‡
GL_GLEXT_PROTOTYPES


9545 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9546 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9547 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9548 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9549 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9550 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9551 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9552 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9553 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9554 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9555 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9556 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9557 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9558 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9559 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9560 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9564 #i‚de‡
GL_NV_gpu_¥ogøm5


9565 
	#GL_NV_gpu_¥ogøm5
 1

	)

9566 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

9567 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

9568 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

9569 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

9570 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

9571 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

9572 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

9573 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

9574 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9575 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

9576 #ifde‡
GL_GLEXT_PROTOTYPES


9577 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

9578 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

9582 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


9583 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

9586 #i‚de‡
GL_NV_gpu_shadî5


9587 
	#GL_NV_gpu_shadî5
 1

	)

9590 #i‚de‡
GL_NV_hÆf_Êﬂt


9591 
	#GL_NV_hÆf_Êﬂt
 1

	)

9592 
	tGLhÆfNV
;

9593 
	#GL_HALF_FLOAT_NV
 0x140B

	)

9594 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9595 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9596 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9597 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9598 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9599 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9600 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

9601 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9602 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9603 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9604 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

9605 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9606 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

9607 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9608 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9609 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9610 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9611 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9612 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9613 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9614 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

9615 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9616 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9617 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9618 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9619 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9620 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9621 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9622 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

9623 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

9624 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9625 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9626 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

9627 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

9628 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

9629 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9630 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9631 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9632 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9633 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9634 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9635 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9636 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9637 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9638 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9639 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9640 #ifde‡
GL_GLEXT_PROTOTYPES


9641 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9642 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9643 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9644 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9645 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9646 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9647 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

9648 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9649 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9650 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9651 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

9652 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9653 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

9654 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9655 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9656 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9657 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9658 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9659 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9660 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9661 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

9662 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9663 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9664 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9665 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9666 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9667 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9668 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9669 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

9670 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

9671 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9672 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9673 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

9674 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

9675 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

9676 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9677 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9678 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9679 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9680 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9681 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9682 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9683 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9684 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9685 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9686 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9690 #i‚de‡
GL_NV_öã∫Æf‹m©_ßm∂e_quîy


9691 
	#GL_NV_öã∫Æf‹m©_ßm∂e_quîy
 1

	)

9692 
	#GL_MULTISAMPLES_NV
 0x9371

	)

9693 
	#GL_SUPERSAMPLE_SCALE_X_NV
 0x9372

	)

9694 
	#GL_SUPERSAMPLE_SCALE_Y_NV
 0x9373

	)

9695 
	#GL_CONFORMANT_NV
 0x9374

	)

9696 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATSAMPLEIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	t≤ame
, GLsizeò
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

9697 #ifde‡
GL_GLEXT_PROTOTYPES


9698 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©Sam∂eivNV
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
ßm∂es
, GLíum 
≤ame
, GLsizeò
bufSize
, 
GLöt
 *
∑øms
);

9702 #i‚de‡
GL_NV_light_max_exp⁄ít


9703 
	#GL_NV_light_max_exp⁄ít
 1

	)

9704 
	#GL_MAX_SHININESS_NV
 0x8504

	)

9705 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

9708 #i‚de‡
GL_NV_mu…ißm∂e_covîage


9709 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

9712 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


9713 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

9714 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

9717 #i‚de‡
GL_NV_oc˛usi⁄_quîy


9718 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

9719 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

9720 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

9721 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

9722 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

9723 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9724 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9725 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9726 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9727 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

9728 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9729 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9730 #ifde‡
GL_GLEXT_PROTOTYPES


9731 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9732 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9733 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9734 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9735 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

9736 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9737 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9741 #i‚de‡
GL_NV_∑cked_dïth_°ícû


9742 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

9743 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

9744 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

9747 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


9748 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

9749 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

9750 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

9751 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

9752 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

9753 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

9754 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9755 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9756 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9757 #ifde‡
GL_GLEXT_PROTOTYPES


9758 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

9759 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9760 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9764 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9765 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9768 #i‚de‡
GL_NV_∑th_ªndîög


9769 
	#GL_NV_∑th_ªndîög
 1

	)

9770 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

9771 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

9772 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

9773 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

9774 
	#GL_FILE_NAME_NV
 0x9074

	)

9775 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

9776 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

9777 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

9778 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

9779 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

9780 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

9781 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

9782 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

9783 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

9784 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

9785 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

9786 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

9787 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

9788 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

9789 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

9790 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

9791 
	#GL_COUNT_UP_NV
 0x9088

	)

9792 
	#GL_COUNT_DOWN_NV
 0x9089

	)

9793 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

9794 
	#GL_CONVEX_HULL_NV
 0x908B

	)

9795 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

9796 
	#GL_TRANSLATE_X_NV
 0x908E

	)

9797 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

9798 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

9799 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

9800 
	#GL_AFFINE_2D_NV
 0x9092

	)

9801 
	#GL_AFFINE_3D_NV
 0x9094

	)

9802 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

9803 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

9804 
	#GL_UTF8_NV
 0x909A

	)

9805 
	#GL_UTF16_NV
 0x909B

	)

9806 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

9807 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

9808 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

9809 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

9810 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

9811 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

9812 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

9813 
	#GL_SQUARE_NV
 0x90A3

	)

9814 
	#GL_ROUND_NV
 0x90A4

	)

9815 
	#GL_TRIANGULAR_NV
 0x90A5

	)

9816 
	#GL_BEVEL_NV
 0x90A6

	)

9817 
	#GL_MITER_REVERT_NV
 0x90A7

	)

9818 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

9819 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

9820 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

9821 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

9822 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

9823 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

9824 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

9825 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

9826 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

9827 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

9828 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

9829 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

9830 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

9831 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

9832 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

9833 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

9834 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9835 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9836 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9837 
	#GL_CLOSE_PATH_NV
 0x00

	)

9838 
	#GL_MOVE_TO_NV
 0x02

	)

9839 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9840 
	#GL_LINE_TO_NV
 0x04

	)

9841 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9842 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9843 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9844 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9845 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9846 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9847 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9848 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9849 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9850 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9851 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9852 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9853 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9854 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9855 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9856 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9857 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9858 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9859 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9860 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9861 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9862 
	#GL_RESTART_PATH_NV
 0xF0

	)

9863 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9864 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9865 
	#GL_RECT_NV
 0xF6

	)

9866 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9867 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9868 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9869 
	#GL_ARC_TO_NV
 0xFE

	)

9870 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9871 
	#GL_BOLD_BIT_NV
 0x01

	)

9872 
	#GL_ITALIC_BIT_NV
 0x02

	)

9873 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9874 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9875 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9876 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9877 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9878 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9879 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9880 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9881 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9882 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9883 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9884 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9885 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9886 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9887 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9888 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9889 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9890 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9891 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9892 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9893 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9894 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9895 
	#GL_ROUNDED_RECT_NV
 0xE8

	)

9896 
	#GL_RELATIVE_ROUNDED_RECT_NV
 0xE9

	)

9897 
	#GL_ROUNDED_RECT2_NV
 0xEA

	)

9898 
	#GL_RELATIVE_ROUNDED_RECT2_NV
 0xEB

	)

9899 
	#GL_ROUNDED_RECT4_NV
 0xEC

	)

9900 
	#GL_RELATIVE_ROUNDED_RECT4_NV
 0xED

	)

9901 
	#GL_ROUNDED_RECT8_NV
 0xEE

	)

9902 
	#GL_RELATIVE_ROUNDED_RECT8_NV
 0xEF

	)

9903 
	#GL_RELATIVE_RECT_NV
 0xF7

	)

9904 
	#GL_FONT_GLYPHS_AVAILABLE_NV
 0x9368

	)

9905 
	#GL_FONT_TARGET_UNAVAILABLE_NV
 0x9369

	)

9906 
	#GL_FONT_UNAVAILABLE_NV
 0x936A

	)

9907 
	#GL_FONT_UNINTELLIGIBLE_NV
 0x936B

	)

9908 
	#GL_CONIC_CURVE_TO_NV
 0x1A

	)

9909 
	#GL_RELATIVE_CONIC_CURVE_TO_NV
 0x1B

	)

9910 
	#GL_FONT_NUM_GLYPH_INDICES_BIT_NV
 0x20000000

	)

9911 
	#GL_STANDARD_FONT_FORMAT_NV
 0x936C

	)

9912 
	#GL_2_BYTES_NV
 0x1407

	)

9913 
	#GL_3_BYTES_NV
 0x1408

	)

9914 
	#GL_4_BYTES_NV
 0x1409

	)

9915 
	#GL_EYE_LINEAR_NV
 0x2400

	)

9916 
	#GL_OBJECT_LINEAR_NV
 0x2401

	)

9917 
	#GL_CONSTANT_NV
 0x8576

	)

9918 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

9919 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9920 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9921 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

9922 
	#GL_PATH_PROJECTION_NV
 0x1701

	)

9923 
	#GL_PATH_MODELVIEW_NV
 0x1700

	)

9924 
	#GL_PATH_MODELVIEW_STACK_DEPTH_NV
 0x0BA3

	)

9925 
	#GL_PATH_MODELVIEW_MATRIX_NV
 0x0BA6

	)

9926 
	#GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
 0x0D36

	)

9927 
	#GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
 0x84E3

	)

9928 
	#GL_PATH_PROJECTION_STACK_DEPTH_NV
 0x0BA4

	)

9929 
	#GL_PATH_PROJECTION_MATRIX_NV
 0x0BA7

	)

9930 
	#GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
 0x0D38

	)

9931 
	#GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
 0x84E4

	)

9932 
	#GL_FRAGMENT_INPUT_NV
 0x936D

	)

9933 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9934 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9935 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9936 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9937 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9938 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9939 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9940 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9941 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9942 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9943 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9944 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9945 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9946 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9947 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9948 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9949 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9950 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9951 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

9952 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

9953 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

9954 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

9955 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

9956 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9957 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9958 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

9959 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9960 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9961 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9962 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9963 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9964 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9965 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

9966 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

9967 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

9968 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9969 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9970 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

9971 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9972 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9973 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

9974 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

9975 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9976 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9977 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9978 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9979 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9980 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

9981 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
);

9982 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, 
	tGLíum
 
	tcovîMode
);

9983 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9984 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9985 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXRANGENVPROC
Ë(
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLuöt
 
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
, GLuöà
	tba£AndCou¡
[2]);

9986 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°GlyphIndex
, 
	tGLsizei
 
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9987 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, 
	tGLsizeùå
 
	tf⁄tSize
, c⁄° *
	tf⁄tD©a
, 
	tGLsizei
 
	tÁ˚Index
, GLuöà
	tfú°GlyphIndex
, GLsizeò
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9988 (
APIENTRYP
 
	tPFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLíum
 
	tgíMode
, GLöà
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9989 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEFVNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLÊﬂt
 *
	t∑øms
);

9990 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9991 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9992 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

9993 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9994 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9995 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9996 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9997 #ifde‡
GL_GLEXT_PROTOTYPES


9998 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

9999 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

10000 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

10001 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10002 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10003 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10004 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10005 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

10006 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10007 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10008 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

10009 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

10010 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

10011 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10012 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

10013 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

10014 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

10015 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

10016 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

10017 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

10018 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

10019 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

10020 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

10021 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10022 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10023 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

10024 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10025 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10026 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10027 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10028 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

10029 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10030 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

10031 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

10032 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

10033 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10034 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10035 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

10036 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10037 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10038 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

10039 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

10040 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10041 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10042 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10043 
GLAPI
 
APIENTRY
 
glM©rixMu…3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10044 
GLAPI
 
APIENTRY
 
glM©rixMu…3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10045 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10046 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
);

10047 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, 
GLíum
 
covîMode
);

10048 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10049 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10050 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexR™geNV
 (GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLuöt
 
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
, GLuöà
ba£AndCou¡
[2]);

10051 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°GlyphIndex
, 
GLsizei
 
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10052 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hMem‹yGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, 
GLsizeùå
 
f⁄tSize
, c⁄° *
f⁄tD©a
, 
GLsizei
 
Á˚Index
, GLuöà
fú°GlyphIndex
, GLsizeò
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10053 
GLAPI
 
APIENTRY
 
glProgømP©hFøgmítI≈utGíNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLíum
 
gíMode
, GLöà
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10054 
GLAPI
 
APIENTRY
 
glGëProgømResour˚fvNV
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLÊﬂt
 *
∑øms
);

10055 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10056 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10057 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

10058 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10059 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10060 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10061 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10065 #i‚de‡
GL_NV_∑th_ªndîög_sh¨ed_edge


10066 
	#GL_NV_∑th_ªndîög_sh¨ed_edge
 1

	)

10067 
	#GL_SHARED_EDGE_NV
 0xC0

	)

10070 #i‚de‡
GL_NV_pixñ_d©a_ønge


10071 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10072 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

10073 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

10074 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

10075 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

10076 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

10077 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

10078 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10079 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10080 #ifde‡
GL_GLEXT_PROTOTYPES


10081 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10082 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10086 #i‚de‡
GL_NV_poöt_•rôe


10087 
	#GL_NV_poöt_•rôe
 1

	)

10088 
	#GL_POINT_SPRITE_NV
 0x8861

	)

10089 
	#GL_COORD_REPLACE_NV
 0x8862

	)

10090 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

10091 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10092 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10093 #ifde‡
GL_GLEXT_PROTOTYPES


10094 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10095 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10099 #i‚de‡
GL_NV_¥e£¡_video


10100 
	#GL_NV_¥e£¡_video
 1

	)

10101 
	#GL_FRAME_NV
 0x8E26

	)

10102 
	#GL_FIELDS_NV
 0x8E27

	)

10103 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

10104 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

10105 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

10106 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

10107 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

10108 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

10109 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10110 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10111 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10112 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10113 #ifde‡
GL_GLEXT_PROTOTYPES


10114 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

10115 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

10116 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10117 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10118 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10119 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10123 #i‚de‡
GL_NV_¥imôive_ª°¨t


10124 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10125 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

10126 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

10127 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10128 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10129 #ifde‡
GL_GLEXT_PROTOTYPES


10130 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10131 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10135 #i‚de‡
GL_NV_ªgi°î_comböîs


10136 
	#GL_NV_ªgi°î_comböîs
 1

	)

10137 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

10138 
	#GL_VARIABLE_A_NV
 0x8523

	)

10139 
	#GL_VARIABLE_B_NV
 0x8524

	)

10140 
	#GL_VARIABLE_C_NV
 0x8525

	)

10141 
	#GL_VARIABLE_D_NV
 0x8526

	)

10142 
	#GL_VARIABLE_E_NV
 0x8527

	)

10143 
	#GL_VARIABLE_F_NV
 0x8528

	)

10144 
	#GL_VARIABLE_G_NV
 0x8529

	)

10145 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

10146 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

10147 
	#GL_SPARE0_NV
 0x852E

	)

10148 
	#GL_SPARE1_NV
 0x852F

	)

10149 
	#GL_DISCARD_NV
 0x8530

	)

10150 
	#GL_E_TIMES_F_NV
 0x8531

	)

10151 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

10152 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

10153 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

10154 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

10155 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

10156 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

10157 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

10158 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

10159 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

10160 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

10161 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

10162 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

10163 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

10164 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

10165 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

10166 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

10167 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

10168 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

10169 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

10170 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

10171 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

10172 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

10173 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

10174 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

10175 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

10176 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

10177 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

10178 
	#GL_COMBINER0_NV
 0x8550

	)

10179 
	#GL_COMBINER1_NV
 0x8551

	)

10180 
	#GL_COMBINER2_NV
 0x8552

	)

10181 
	#GL_COMBINER3_NV
 0x8553

	)

10182 
	#GL_COMBINER4_NV
 0x8554

	)

10183 
	#GL_COMBINER5_NV
 0x8555

	)

10184 
	#GL_COMBINER6_NV
 0x8556

	)

10185 
	#GL_COMBINER7_NV
 0x8557

	)

10186 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10187 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10188 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10189 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10190 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10191 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

10192 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10193 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10194 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10195 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10196 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10197 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10198 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10199 #ifde‡
GL_GLEXT_PROTOTYPES


10200 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10201 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10202 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10203 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10204 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10205 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

10206 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10207 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10208 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10209 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10210 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10211 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10212 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10216 #i‚de‡
GL_NV_ªgi°î_comböîs2


10217 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10218 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

10219 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10220 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10221 #ifde‡
GL_GLEXT_PROTOTYPES


10222 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10223 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10227 #i‚de‡
GL_NV_ßm∂e_loˇti⁄s


10228 
	#GL_NV_ßm∂e_loˇti⁄s
 1

	)

10229 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
 0x933D

	)

10230 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
 0x933E

	)

10231 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
 0x933F

	)

10232 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
 0x9340

	)

10233 
	#GL_SAMPLE_LOCATION_NV
 0x8E50

	)

10234 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
 0x9341

	)

10235 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
 0x9342

	)

10236 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
 0x9343

	)

10237 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10238 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10239 (
APIENTRYP
 
	tPFNGLRESOLVEDEPTHVALUESNVPROC
) ();

10240 #ifde‡
GL_GLEXT_PROTOTYPES


10241 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10242 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10243 
GLAPI
 
APIENTRY
 
glResﬁveDïthVÆuesNV
 ();

10247 #i‚de‡
GL_NV_ßm∂e_mask_ovîride_covîage


10248 
	#GL_NV_ßm∂e_mask_ovîride_covîage
 1

	)

10251 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


10252 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

10255 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


10256 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

10259 #i‚de‡
GL_NV_shadî_©omic_Â16_ve˘‹


10260 
	#GL_NV_shadî_©omic_Â16_ve˘‹
 1

	)

10263 #i‚de‡
GL_NV_shadî_©omic_öt64


10264 
	#GL_NV_shadî_©omic_öt64
 1

	)

10267 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


10268 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

10269 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

10270 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

10271 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

10272 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

10273 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10274 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10275 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

10276 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10277 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10278 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10279 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10280 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

10281 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10282 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10283 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10284 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10285 #ifde‡
GL_GLEXT_PROTOTYPES


10286 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

10287 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

10288 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

10289 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

10290 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

10291 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

10292 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10293 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10294 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

10295 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10296 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10297 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10298 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10302 #i‚de‡
GL_NV_shadî_buf„r_°‹e


10303 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

10304 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

10307 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


10308 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

10311 #i‚de‡
GL_NV_shadî_thªad_group


10312 
	#GL_NV_shadî_thªad_group
 1

	)

10313 
	#GL_WARP_SIZE_NV
 0x9339

	)

10314 
	#GL_WARPS_PER_SM_NV
 0x933A

	)

10315 
	#GL_SM_COUNT_NV
 0x933B

	)

10318 #i‚de‡
GL_NV_shadî_thªad_shufÊe


10319 
	#GL_NV_shadî_thªad_shufÊe
 1

	)

10322 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


10323 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

10324 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

10325 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

10326 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

10327 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

10328 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

10331 #i‚de‡
GL_NV_ãxgí_emboss


10332 
	#GL_NV_ãxgí_emboss
 1

	)

10333 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

10334 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

10335 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

10338 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


10339 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

10340 
	#GL_NORMAL_MAP_NV
 0x8511

	)

10341 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

10344 #i‚de‡
GL_NV_ãxtuª_b¨rõr


10345 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

10346 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

10347 #ifde‡
GL_GLEXT_PROTOTYPES


10348 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

10352 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10353 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10356 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


10357 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

10358 
	#GL_COMBINE4_NV
 0x8503

	)

10359 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

10360 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

10361 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

10362 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

10365 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10366 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10367 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

10370 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


10371 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

10372 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

10373 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

10374 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10375 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10376 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10377 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10378 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10379 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10380 #ifde‡
GL_GLEXT_PROTOTYPES


10381 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10382 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10383 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10384 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10385 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10386 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10390 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10391 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10392 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

10393 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

10394 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

10395 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

10398 #i‚de‡
GL_NV_ãxtuª_shadî


10399 
	#GL_NV_ãxtuª_shadî
 1

	)

10400 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

10401 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

10402 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

10403 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

10404 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

10405 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

10406 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

10407 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

10408 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

10409 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

10410 
	#GL_CULL_MODES_NV
 0x86E0

	)

10411 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

10412 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

10413 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

10414 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

10415 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

10416 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

10417 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

10418 
	#GL_CONST_EYE_NV
 0x86E5

	)

10419 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

10420 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

10421 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

10422 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

10423 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

10424 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

10425 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

10426 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

10427 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

10428 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

10429 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

10430 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

10431 
	#GL_HILO_NV
 0x86F4

	)

10432 
	#GL_DSDT_NV
 0x86F5

	)

10433 
	#GL_DSDT_MAG_NV
 0x86F6

	)

10434 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

10435 
	#GL_HILO16_NV
 0x86F8

	)

10436 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

10437 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

10438 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

10439 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

10440 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

10441 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

10442 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

10443 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

10444 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

10445 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

10446 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

10447 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

10448 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

10449 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

10450 
	#GL_DSDT8_NV
 0x8709

	)

10451 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

10452 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

10453 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

10454 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

10455 
	#GL_HI_SCALE_NV
 0x870E

	)

10456 
	#GL_LO_SCALE_NV
 0x870F

	)

10457 
	#GL_DS_SCALE_NV
 0x8710

	)

10458 
	#GL_DT_SCALE_NV
 0x8711

	)

10459 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

10460 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

10461 
	#GL_HI_BIAS_NV
 0x8714

	)

10462 
	#GL_LO_BIAS_NV
 0x8715

	)

10463 
	#GL_DS_BIAS_NV
 0x8716

	)

10464 
	#GL_DT_BIAS_NV
 0x8717

	)

10465 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

10466 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

10467 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

10468 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

10469 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

10470 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

10471 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

10472 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

10475 #i‚de‡
GL_NV_ãxtuª_shadî2


10476 
	#GL_NV_ãxtuª_shadî2
 1

	)

10477 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

10480 #i‚de‡
GL_NV_ãxtuª_shadî3


10481 
	#GL_NV_ãxtuª_shadî3
 1

	)

10482 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

10483 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

10484 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

10485 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

10486 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

10487 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

10488 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

10489 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

10490 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

10491 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

10492 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

10493 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

10494 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

10495 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

10496 
	#GL_HILO8_NV
 0x885E

	)

10497 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

10498 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

10501 #i‚de‡
GL_NV_å™sf‹m_„edback


10502 
	#GL_NV_å™sf‹m_„edback
 1

	)

10503 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

10504 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

10505 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

10506 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

10507 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

10508 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

10509 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

10510 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

10511 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

10512 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

10513 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

10514 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

10515 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

10516 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

10517 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

10518 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

10519 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

10520 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

10521 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

10522 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

10523 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

10524 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

10525 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

10526 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

10527 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

10528 
	#GL_LAYER_NV
 0x8DAA

	)

10529 
	#GL_NEXT_BUFFER_NV
 -2

	)

10530 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

10531 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

10532 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

10533 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

10534 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

10535 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

10536 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

10537 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

10538 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

10539 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

10540 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

10541 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10542 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10543 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

10544 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

10545 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

10546 #ifde‡
GL_GLEXT_PROTOTYPES


10547 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

10548 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

10549 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

10550 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

10551 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

10552 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

10553 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

10554 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10555 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10556 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

10557 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

10558 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

10562 #i‚de‡
GL_NV_å™sf‹m_„edback2


10563 
	#GL_NV_å™sf‹m_„edback2
 1

	)

10564 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

10565 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

10566 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

10567 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

10568 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10569 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10570 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10571 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

10572 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

10573 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

10574 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

10575 #ifde‡
GL_GLEXT_PROTOTYPES


10576 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10577 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10578 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10579 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

10580 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

10581 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

10582 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

10586 #i‚de‡
GL_NV_unif‹m_buf„r_unifõd_mem‹y


10587 
	#GL_NV_unif‹m_buf„r_unifõd_mem‹y
 1

	)

10588 
	#GL_UNIFORM_BUFFER_UNIFIED_NV
 0x936E

	)

10589 
	#GL_UNIFORM_BUFFER_ADDRESS_NV
 0x936F

	)

10590 
	#GL_UNIFORM_BUFFER_LENGTH_NV
 0x9370

	)

10593 #i‚de‡
GL_NV_vd∑u_öãr›


10594 
	#GL_NV_vd∑u_öãr›
 1

	)

10595 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

10596 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

10597 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

10598 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

10599 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

10600 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

10601 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

10602 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10603 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10604 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10605 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10606 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

10607 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

10608 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10609 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10610 #ifde‡
GL_GLEXT_PROTOTYPES


10611 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

10612 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

10613 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10614 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10615 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10616 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10617 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

10618 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

10619 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10620 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10624 #i‚de‡
GL_NV_vîãx_¨øy_ønge


10625 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

10626 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

10627 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

10628 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

10629 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

10630 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

10631 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

10632 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10633 #ifde‡
GL_GLEXT_PROTOTYPES


10634 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

10635 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10639 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10640 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10641 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

10644 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


10645 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

10646 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

10647 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

10648 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

10649 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

10650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10654 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

10655 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

10656 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

10657 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

10658 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10659 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10660 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10661 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10662 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10663 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10664 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10665 #ifde‡
GL_GLEXT_PROTOTYPES


10666 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

10667 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

10668 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

10669 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

10670 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10671 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10672 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10673 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10674 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

10675 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

10676 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

10677 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

10678 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10679 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10680 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10681 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10682 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10683 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10684 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10688 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


10689 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

10690 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

10691 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

10692 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

10693 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

10694 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

10695 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

10696 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

10697 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

10698 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

10699 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

10700 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

10701 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

10702 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

10703 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

10704 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

10705 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

10706 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

10707 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

10708 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

10709 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

10710 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

10711 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

10712 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

10713 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

10714 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

10715 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

10716 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10717 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10718 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10719 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10720 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10721 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

10722 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10723 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

10725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10726 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

10727 #ifde‡
GL_GLEXT_PROTOTYPES


10728 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

10729 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10730 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10731 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10732 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10733 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10734 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

10735 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10736 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10737 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

10738 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10739 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

10743 #i‚de‡
GL_NV_vîãx_¥ogøm


10744 
	#GL_NV_vîãx_¥ogøm
 1

	)

10745 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

10746 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

10747 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

10748 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

10749 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

10750 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

10751 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

10752 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

10753 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

10754 
	#GL_IDENTITY_NV
 0x862A

	)

10755 
	#GL_INVERSE_NV
 0x862B

	)

10756 
	#GL_TRANSPOSE_NV
 0x862C

	)

10757 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

10758 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

10759 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

10760 
	#GL_MATRIX0_NV
 0x8630

	)

10761 
	#GL_MATRIX1_NV
 0x8631

	)

10762 
	#GL_MATRIX2_NV
 0x8632

	)

10763 
	#GL_MATRIX3_NV
 0x8633

	)

10764 
	#GL_MATRIX4_NV
 0x8634

	)

10765 
	#GL_MATRIX5_NV
 0x8635

	)

10766 
	#GL_MATRIX6_NV
 0x8636

	)

10767 
	#GL_MATRIX7_NV
 0x8637

	)

10768 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

10769 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

10770 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

10771 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

10772 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

10773 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

10774 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

10775 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

10776 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

10777 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

10778 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

10779 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

10780 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

10781 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

10782 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

10783 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

10784 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

10785 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

10786 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

10787 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

10788 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

10789 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

10790 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

10791 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

10792 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

10793 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

10794 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

10795 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

10796 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

10797 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

10798 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

10799 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

10800 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

10801 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

10802 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

10803 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

10804 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

10805 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

10806 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

10807 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

10808 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

10809 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

10810 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

10811 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

10812 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

10813 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

10814 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

10815 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

10816 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

10817 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

10818 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

10819 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

10820 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

10821 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

10822 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

10823 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

10824 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

10825 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

10826 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

10827 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

10828 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10829 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10830 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10831 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10832 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10833 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10834 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10835 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10836 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10837 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10838 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10839 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10840 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10841 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

10842 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10843 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10844 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10845 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10846 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10847 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10848 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10849 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10850 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10851 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10852 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10853 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10854 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10855 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10856 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10857 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10858 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10859 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10860 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10861 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10862 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10863 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10864 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10865 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10866 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10867 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10868 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10869 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10870 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10871 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10872 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10873 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10874 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10875 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10876 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10877 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10878 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10879 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10880 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10881 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10882 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10883 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10884 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10885 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10886 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10887 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10888 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10889 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10890 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10891 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10892 #ifde‡
GL_GLEXT_PROTOTYPES


10893 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10894 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10895 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10896 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10897 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10898 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10899 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10900 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10901 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10902 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10903 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10904 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10905 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10906 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

10907 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10908 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10909 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10910 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10911 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10912 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10913 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10914 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10915 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10916 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10917 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10918 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10919 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10920 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10921 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10922 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10923 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10924 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10925 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10926 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10927 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10928 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10929 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10930 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10931 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10932 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10933 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10934 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10935 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10936 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10937 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10938 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10939 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10940 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10941 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10942 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

10943 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10944 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10945 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10946 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10947 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10948 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10949 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10950 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10951 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10952 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10953 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10954 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10955 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10956 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10960 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10961 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10964 #i‚de‡
GL_NV_vîãx_¥ogøm2


10965 
	#GL_NV_vîãx_¥ogøm2
 1

	)

10968 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


10969 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

10972 #i‚de‡
GL_NV_vîãx_¥ogøm3


10973 
	#GL_NV_vîãx_¥ogøm3
 1

	)

10976 #i‚de‡
GL_NV_vîãx_¥ogøm4


10977 
	#GL_NV_vîãx_¥ogøm4
 1

	)

10978 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

10979 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

10980 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10981 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10982 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10983 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

10984 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

10985 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

10986 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

10987 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10988 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10989 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10990 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10991 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10992 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10993 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10994 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10995 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

10996 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10997 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10998 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

10999 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

11000 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11001 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11002 #ifde‡
GL_GLEXT_PROTOTYPES


11003 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11004 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11005 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11006 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11007 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11008 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11009 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11010 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11011 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11012 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11013 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11014 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11015 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11016 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11017 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11018 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11019 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11020 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11021 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11022 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11023 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

11024 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11025 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11029 #i‚de‡
GL_NV_video_ˇ±uª


11030 
	#GL_NV_video_ˇ±uª
 1

	)

11031 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

11032 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

11033 
	#GL_FIELD_UPPER_NV
 0x9022

	)

11034 
	#GL_FIELD_LOWER_NV
 0x9023

	)

11035 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

11036 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

11037 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

11038 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

11039 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

11040 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

11041 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

11042 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

11043 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

11044 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

11045 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

11046 
	#GL_SUCCESS_NV
 0x902F

	)

11047 
	#GL_FAILURE_NV
 0x9030

	)

11048 
	#GL_YCBYCR8_422_NV
 0x9031

	)

11049 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

11050 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

11051 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

11052 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

11053 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

11054 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

11055 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

11056 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

11057 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

11058 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

11059 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

11060 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11061 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

11062 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

11063 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11064 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11065 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11066 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11067 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11068 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

11069 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11070 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11071 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11072 #ifde‡
GL_GLEXT_PROTOTYPES


11073 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11074 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

11075 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

11076 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11077 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11078 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11079 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11080 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11081 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

11082 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11083 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11084 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11088 #i‚de‡
GL_NV_võwp‹t_¨øy2


11089 
	#GL_NV_võwp‹t_¨øy2
 1

	)

11092 #i‚de‡
GL_OML_öãæa˚


11093 
	#GL_OML_öãæa˚
 1

	)

11094 
	#GL_INTERLACE_OML
 0x8980

	)

11095 
	#GL_INTERLACE_READ_OML
 0x8981

	)

11098 #i‚de‡
GL_OML_ªßm∂e


11099 
	#GL_OML_ªßm∂e
 1

	)

11100 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

11101 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

11102 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

11103 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

11104 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

11105 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

11108 #i‚de‡
GL_OML_subßm∂e


11109 
	#GL_OML_subßm∂e
 1

	)

11110 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

11111 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

11114 #i‚de‡
GL_OVR_mu…ivõw


11115 
	#GL_OVR_mu…ivõw
 1

	)

11116 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
 0x9630

	)

11117 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
 0x9632

	)

11118 
	#GL_MAX_VIEWS_OVR
 0x9631

	)

11119 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tba£VõwIndex
, 
	tGLsizei
 
	tnumVõws
);

11120 #ifde‡
GL_GLEXT_PROTOTYPES


11121 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªMu…ivõwOVR
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
ba£VõwIndex
, 
GLsizei
 
numVõws
);

11125 #i‚de‡
GL_OVR_mu…ivõw2


11126 
	#GL_OVR_mu…ivõw2
 1

	)

11129 #i‚de‡
GL_PGI_misc_höts


11130 
	#GL_PGI_misc_höts
 1

	)

11131 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

11132 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

11133 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

11134 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

11135 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

11136 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

11137 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

11138 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

11139 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

11140 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

11141 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

11142 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

11143 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

11144 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

11145 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

11146 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

11147 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

11148 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

11149 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

11150 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

11151 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

11152 #ifde‡
GL_GLEXT_PROTOTYPES


11153 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

11157 #i‚de‡
GL_PGI_vîãx_höts


11158 
	#GL_PGI_vîãx_höts
 1

	)

11159 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

11160 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

11161 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

11162 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

11163 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

11164 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

11165 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

11166 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

11167 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

11168 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

11169 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

11170 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

11171 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

11172 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

11173 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

11174 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

11175 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

11176 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

11177 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

11178 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

11179 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

11180 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

11183 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


11184 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

11185 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

11186 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

11189 #i‚de‡
GL_S3_s3tc


11190 
	#GL_S3_s3tc
 1

	)

11191 
	#GL_RGB_S3TC
 0x83A0

	)

11192 
	#GL_RGB4_S3TC
 0x83A1

	)

11193 
	#GL_RGBA_S3TC
 0x83A2

	)

11194 
	#GL_RGBA4_S3TC
 0x83A3

	)

11195 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

11196 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

11199 #i‚de‡
GL_SGIS_dëaû_ãxtuª


11200 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

11201 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

11202 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

11203 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

11204 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

11205 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

11206 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

11207 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

11208 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

11209 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11210 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11211 #ifde‡
GL_GLEXT_PROTOTYPES


11212 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11213 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11217 #i‚de‡
GL_SGIS_fog_fun˘i⁄


11218 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

11219 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

11220 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

11221 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

11222 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11223 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

11224 #ifde‡
GL_GLEXT_PROTOTYPES


11225 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11226 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

11230 #i‚de‡
GL_SGIS_gíî©e_mùm≠


11231 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

11232 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

11233 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

11236 #i‚de‡
GL_SGIS_mu…ißm∂e


11237 
	#GL_SGIS_mu…ißm∂e
 1

	)

11238 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

11239 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

11240 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

11241 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

11242 
	#GL_1PASS_SGIS
 0x80A1

	)

11243 
	#GL_2PASS_0_SGIS
 0x80A2

	)

11244 
	#GL_2PASS_1_SGIS
 0x80A3

	)

11245 
	#GL_4PASS_0_SGIS
 0x80A4

	)

11246 
	#GL_4PASS_1_SGIS
 0x80A5

	)

11247 
	#GL_4PASS_2_SGIS
 0x80A6

	)

11248 
	#GL_4PASS_3_SGIS
 0x80A7

	)

11249 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

11250 
	#GL_SAMPLES_SGIS
 0x80A9

	)

11251 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

11252 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

11253 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

11254 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

11255 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

11256 #ifde‡
GL_GLEXT_PROTOTYPES


11257 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

11258 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

11262 #i‚de‡
GL_SGIS_pixñ_ãxtuª


11263 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

11264 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

11265 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

11266 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

11267 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

11268 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11269 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11270 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11271 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11272 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11273 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11274 #ifde‡
GL_GLEXT_PROTOTYPES


11275 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11276 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11277 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11278 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11279 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11280 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11284 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


11285 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

11286 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

11287 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

11288 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

11289 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

11290 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

11291 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

11292 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

11293 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

11296 #i‚de‡
GL_SGIS_poöt_∑ømëîs


11297 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

11298 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

11299 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

11300 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

11301 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

11302 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11303 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11304 #ifde‡
GL_GLEXT_PROTOTYPES


11305 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11306 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11310 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


11311 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

11312 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

11313 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

11314 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

11315 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

11316 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11317 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11318 #ifde‡
GL_GLEXT_PROTOTYPES


11319 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11320 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11324 #i‚de‡
GL_SGIS_ãxtuª4D


11325 
	#GL_SGIS_ãxtuª4D
 1

	)

11326 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

11327 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

11328 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

11329 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

11330 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

11331 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

11332 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

11333 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

11334 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

11335 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

11336 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11337 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11338 #ifde‡
GL_GLEXT_PROTOTYPES


11339 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11340 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11344 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


11345 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

11346 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

11349 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


11350 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

11351 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

11352 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

11353 #ifde‡
GL_GLEXT_PROTOTYPES


11354 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

11358 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


11359 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

11360 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

11363 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


11364 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

11365 
	#GL_FILTER4_SGIS
 0x8146

	)

11366 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

11367 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

11368 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

11369 #ifde‡
GL_GLEXT_PROTOTYPES


11370 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

11371 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

11375 #i‚de‡
GL_SGIS_ãxtuª_lod


11376 
	#GL_SGIS_ãxtuª_lod
 1

	)

11377 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

11378 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

11379 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

11380 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

11383 #i‚de‡
GL_SGIS_ãxtuª_£À˘


11384 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

11385 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

11386 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

11387 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

11388 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

11389 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

11390 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

11391 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

11392 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

11393 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

11394 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

11395 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

11396 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

11397 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

11398 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

11399 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

11400 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

11401 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

11402 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

11403 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

11404 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

11405 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

11406 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

11409 #i‚de‡
GL_SGIX_async


11410 
	#GL_SGIX_async
 1

	)

11411 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

11412 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11413 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11414 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11415 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

11416 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

11417 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11418 #ifde‡
GL_GLEXT_PROTOTYPES


11419 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11420 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11421 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11422 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

11423 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

11424 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11428 #i‚de‡
GL_SGIX_async_hi°ogøm


11429 
	#GL_SGIX_async_hi°ogøm
 1

	)

11430 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

11431 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

11434 #i‚de‡
GL_SGIX_async_pixñ


11435 
	#GL_SGIX_async_pixñ
 1

	)

11436 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

11437 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

11438 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

11439 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

11440 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

11441 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

11444 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


11445 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

11446 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

11447 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

11450 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


11451 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

11452 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

11455 #i‚de‡
GL_SGIX_˛ùm≠


11456 
	#GL_SGIX_˛ùm≠
 1

	)

11457 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

11458 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

11459 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

11460 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

11461 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

11462 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

11463 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

11464 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

11465 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

11466 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

11467 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

11468 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

11471 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


11472 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

11473 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

11476 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


11477 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

11480 #i‚de‡
GL_SGIX_dïth_ãxtuª


11481 
	#GL_SGIX_dïth_ãxtuª
 1

	)

11482 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

11483 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

11484 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

11487 #i‚de‡
GL_SGIX_Êush_ø°î


11488 
	#GL_SGIX_Êush_ø°î
 1

	)

11489 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

11490 #ifde‡
GL_GLEXT_PROTOTYPES


11491 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

11495 #i‚de‡
GL_SGIX_fog_off£t


11496 
	#GL_SGIX_fog_off£t
 1

	)

11497 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

11498 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

11501 #i‚de‡
GL_SGIX_‰agmít_lightög


11502 
	#GL_SGIX_‰agmít_lightög
 1

	)

11503 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

11504 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

11505 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

11506 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

11507 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

11508 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

11509 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

11510 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

11511 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

11512 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

11513 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

11514 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

11515 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

11516 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

11517 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

11518 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

11519 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

11520 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

11521 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

11522 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

11523 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

11524 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11525 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11526 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11527 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11528 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11529 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11530 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11531 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11532 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11533 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11534 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11535 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11536 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11537 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11538 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11539 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11540 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11541 #ifde‡
GL_GLEXT_PROTOTYPES


11542 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

11543 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11544 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11545 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11546 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11547 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11548 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11549 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11550 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11551 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11552 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11553 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11554 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11555 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11556 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11557 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11558 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11559 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11563 #i‚de‡
GL_SGIX_‰amezoom


11564 
	#GL_SGIX_‰amezoom
 1

	)

11565 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

11566 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

11567 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

11568 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11569 #ifde‡
GL_GLEXT_PROTOTYPES


11570 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

11574 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


11575 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

11576 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

11577 #ifde‡
GL_GLEXT_PROTOTYPES


11578 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

11582 #i‚de‡
GL_SGIX_ö°rumíts


11583 
	#GL_SGIX_ö°rumíts
 1

	)

11584 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

11585 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

11586 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

11587 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

11588 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

11589 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11590 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

11591 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11592 #ifde‡
GL_GLEXT_PROTOTYPES


11593 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

11594 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

11595 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

11596 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

11597 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

11598 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

11602 #i‚de‡
GL_SGIX_öãæa˚


11603 
	#GL_SGIX_öãæa˚
 1

	)

11604 
	#GL_INTERLACE_SGIX
 0x8094

	)

11607 #i‚de‡
GL_SGIX_ú_ö°rumít1


11608 
	#GL_SGIX_ú_ö°rumít1
 1

	)

11609 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

11612 #i‚de‡
GL_SGIX_li°_¥i‹ôy


11613 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

11614 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

11615 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11616 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11617 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11618 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11619 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11620 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11621 #ifde‡
GL_GLEXT_PROTOTYPES


11622 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11623 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11624 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11625 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11626 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11627 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11631 #i‚de‡
GL_SGIX_pixñ_ãxtuª


11632 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

11633 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

11634 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

11635 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

11636 #ifde‡
GL_GLEXT_PROTOTYPES


11637 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

11641 #i‚de‡
GL_SGIX_pixñ_tûes


11642 
	#GL_SGIX_pixñ_tûes
 1

	)

11643 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

11644 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

11645 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

11646 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

11647 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

11648 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

11649 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

11650 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

11653 #i‚de‡
GL_SGIX_pﬁynomül_ffd


11654 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

11655 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

11656 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

11657 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

11658 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

11659 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

11660 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

11661 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

11662 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

11663 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11664 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11665 #ifde‡
GL_GLEXT_PROTOTYPES


11666 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

11667 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

11668 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

11669 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

11673 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


11674 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

11675 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

11676 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

11677 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

11678 #ifde‡
GL_GLEXT_PROTOTYPES


11679 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

11683 #i‚de‡
GL_SGIX_ªßm∂e


11684 
	#GL_SGIX_ªßm∂e
 1

	)

11685 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

11686 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

11687 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

11688 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

11689 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

11692 #i‚de‡
GL_SGIX_sˇÀbüs_höt


11693 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

11694 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

11697 #i‚de‡
GL_SGIX_shadow


11698 
	#GL_SGIX_shadow
 1

	)

11699 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

11700 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

11701 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

11702 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

11705 #i‚de‡
GL_SGIX_shadow_ambõ¡


11706 
	#GL_SGIX_shadow_ambõ¡
 1

	)

11707 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

11710 #i‚de‡
GL_SGIX_•rôe


11711 
	#GL_SGIX_•rôe
 1

	)

11712 
	#GL_SPRITE_SGIX
 0x8148

	)

11713 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

11714 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

11715 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

11716 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

11717 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

11718 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

11719 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11720 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11721 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11722 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11723 #ifde‡
GL_GLEXT_PROTOTYPES


11724 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11725 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11726 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11727 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11731 #i‚de‡
GL_SGIX_subßm∂e


11732 
	#GL_SGIX_subßm∂e
 1

	)

11733 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

11734 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

11735 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

11736 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

11737 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

11740 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


11741 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

11742 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

11743 #ifde‡
GL_GLEXT_PROTOTYPES


11744 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

11748 #i‚de‡
GL_SGIX_ãxtuª_add_ív


11749 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

11750 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

11753 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


11754 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

11755 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

11756 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

11757 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

11760 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


11761 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

11762 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

11763 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

11764 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

11767 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


11768 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

11769 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

11772 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


11773 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

11774 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

11775 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

11776 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

11777 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

11780 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


11781 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

11782 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

11783 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

11786 #i‚de‡
GL_SGIX_y¸cb


11787 
	#GL_SGIX_y¸cb
 1

	)

11788 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

11789 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

11792 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


11793 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

11796 #i‚de‡
GL_SGIX_y¸cba


11797 
	#GL_SGIX_y¸cba
 1

	)

11798 
	#GL_YCRCB_SGIX
 0x8318

	)

11799 
	#GL_YCRCBA_SGIX
 0x8319

	)

11802 #i‚de‡
GL_SGI_cﬁ‹_m©rix


11803 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

11804 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

11805 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

11806 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

11807 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

11808 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

11809 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

11810 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

11811 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

11812 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

11813 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

11814 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

11817 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


11818 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

11819 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

11820 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

11821 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

11822 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

11823 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

11824 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

11825 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

11826 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

11827 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

11828 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

11829 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

11830 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

11831 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

11832 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

11833 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

11834 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

11835 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

11836 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11837 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11838 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11839 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

11840 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11841 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11842 #ifde‡
GL_GLEXT_PROTOTYPES


11843 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

11844 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11845 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11846 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

11847 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

11848 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11849 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11853 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


11854 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

11855 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

11856 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

11859 #i‚de‡
GL_SUNX_c⁄°™t_d©a


11860 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

11861 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

11862 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

11863 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

11864 #ifde‡
GL_GLEXT_PROTOTYPES


11865 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

11869 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


11870 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

11871 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

11874 #i‚de‡
GL_SUN_globÆ_Æpha


11875 
	#GL_SUN_globÆ_Æpha
 1

	)

11876 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

11877 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

11878 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

11879 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

11880 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11881 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

11882 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

11883 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

11884 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

11885 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

11886 #ifde‡
GL_GLEXT_PROTOTYPES


11887 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

11888 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

11889 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

11890 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

11891 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

11892 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

11893 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

11894 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

11898 #i‚de‡
GL_SUN_mesh_¨øy


11899 
	#GL_SUN_mesh_¨øy
 1

	)

11900 
	#GL_QUAD_MESH_SUN
 0x8614

	)

11901 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

11902 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

11903 #ifde‡
GL_GLEXT_PROTOTYPES


11904 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

11908 #i‚de‡
GL_SUN_¶i˚_accum


11909 
	#GL_SUN_¶i˚_accum
 1

	)

11910 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

11913 #i‚de‡
GL_SUN_åüngÀ_li°


11914 
	#GL_SUN_åüngÀ_li°
 1

	)

11915 
	#GL_RESTART_SUN
 0x0001

	)

11916 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

11917 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

11918 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

11919 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

11920 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

11921 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

11922 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

11923 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

11924 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

11925 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

11926 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

11927 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

11928 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

11929 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

11930 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

11931 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

11932 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

11933 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

11934 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

11935 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

11936 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

11937 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

11938 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

11939 #ifde‡
GL_GLEXT_PROTOTYPES


11940 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

11941 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

11942 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

11943 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

11944 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

11945 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

11946 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

11950 #i‚de‡
GL_SUN_vîãx


11951 
	#GL_SUN_vîãx
 1

	)

11952 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

11953 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11954 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11955 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11956 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11957 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11958 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11959 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

11960 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11961 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11962 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11963 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11964 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11965 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11966 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11967 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11968 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11969 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

11970 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11971 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11972 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11973 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11974 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11975 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11976 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11977 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11978 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11979 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11980 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11981 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11982 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11983 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

11984 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11985 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11986 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11987 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11988 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11989 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11990 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11991 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11992 #ifde‡
GL_GLEXT_PROTOTYPES


11993 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

11994 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11995 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11996 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11997 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11998 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

11999 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12000 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12001 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12002 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12003 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12004 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12005 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12006 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12007 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12008 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

12009 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12010 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

12011 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12012 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12013 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12014 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12015 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12016 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12017 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12018 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

12019 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12020 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12021 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12022 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12023 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12024 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12025 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12026 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12027 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12028 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12029 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12030 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12031 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12032 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12036 #i‚de‡
GL_WIN_ph⁄g_shadög


12037 
	#GL_WIN_ph⁄g_shadög
 1

	)

12038 
	#GL_PHONG_WIN
 0x80EA

	)

12039 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

12042 #i‚de‡
GL_WIN_•ecuœr_fog


12043 
	#GL_WIN_•ecuœr_fog
 1

	)

12044 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

12047 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/fcntl.h

19 #i‚def 
_FCNTL_H


23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_GNU


25 
	~<bôs/uio.h
>

31 
	#O_ACCMODE
 0003

	)

32 
	#O_RDONLY
 00

	)

33 
	#O_WRONLY
 01

	)

34 
	#O_RDWR
 02

	)

35 
	#O_CREAT
 0100

	)

36 
	#O_EXCL
 0200

	)

37 
	#O_NOCTTY
 0400

	)

38 
	#O_TRUNC
 01000

	)

39 
	#O_APPEND
 02000

	)

40 
	#O_NONBLOCK
 04000

	)

41 
	#O_NDELAY
 
O_NONBLOCK


	)

42 
	#O_SYNC
 04010000

	)

43 
	#O_FSYNC
 
O_SYNC


	)

44 
	#O_ASYNC
 020000

	)

46 #ifde‡
__USE_XOPEN2K8


47 
	#O_DIRECTORY
 0200000

	)

48 
	#O_NOFOLLOW
 0400000

	)

49 
	#O_CLOEXEC
 02000000

	)

51 #ifde‡
__USE_GNU


52 
	#O_DIRECT
 040000

	)

53 
	#O_NOATIME
 01000000

	)

54 
	#O_PATH
 010000000

	)

60 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


61 
	#O_DSYNC
 010000

	)

62 
	#O_RSYNC
 
O_SYNC


	)

65 #ifde‡
__USE_LARGEFILE64


66 #ifde‡
__x86_64__


67 
	#O_LARGEFILE
 0

	)

69 
	#O_LARGEFILE
 0100000

	)

74 
	#F_DUPFD
 0

	)

75 
	#F_GETFD
 1

	)

76 
	#F_SETFD
 2

	)

77 
	#F_GETFL
 3

	)

78 
	#F_SETFL
 4

	)

79 #ifde‡
__x86_64__


80 
	#F_GETLK
 5

	)

81 
	#F_SETLK
 6

	)

82 
	#F_SETLKW
 7

	)

84 
	#F_GETLK64
 5

	)

85 
	#F_SETLK64
 6

	)

86 
	#F_SETLKW64
 7

	)

88 #i‚de‡
__USE_FILE_OFFSET64


89 
	#F_GETLK
 5

	)

90 
	#F_SETLK
 6

	)

91 
	#F_SETLKW
 7

	)

93 
	#F_GETLK
 
F_GETLK64


	)

94 
	#F_SETLK
 
F_SETLK64


	)

95 
	#F_SETLKW
 
F_SETLKW64


	)

97 
	#F_GETLK64
 12

	)

98 
	#F_SETLK64
 13

	)

99 
	#F_SETLKW64
 14

	)

102 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


103 
	#F_SETOWN
 8

	)

104 
	#F_GETOWN
 9

	)

107 #ifde‡
__USE_GNU


108 
	#F_SETSIG
 10

	)

109 
	#F_GETSIG
 11

	)

110 
	#F_SETOWN_EX
 15

	)

111 
	#F_GETOWN_EX
 16

	)

114 #ifde‡
__USE_GNU


115 
	#F_SETLEASE
 1024

	)

116 
	#F_GETLEASE
 1025

	)

117 
	#F_NOTIFY
 1026

	)

118 
	#F_SETPIPE_SZ
 1031

	)

119 
	#F_GETPIPE_SZ
 1032

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

251 
	sfûe_h™dÀ


253 
	mh™dÀ_byãs
;

254 
	mh™dÀ_ty≥
;

256 
	mf_h™dÀ
[0];

260 
	#MAX_HANDLE_SZ
 128

	)

263 
	g__BEGIN_DECLS


265 #ifde‡
__USE_GNU


268 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

269 
__THROW
;

276 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

277 
__Êags
);

284 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

285 
size_t
 
__cou¡
, 
__Êags
);

291 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

292 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

293 
__Êags
);

299 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

300 
__Êags
);

306 #i‚de‡
__USE_FILE_OFFSET64


307 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

309 #ifde‡
__REDIRECT


310 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

311 
__off64_t
 
__Àn
),

312 
ÁŒoˇã64
);

314 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

317 #ifde‡
__USE_LARGEFILE64


318 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

319 
__off64_t
 
__Àn
);

324 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

325 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

326 
__Êags
Ë
__THROW
;

332 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

333 
__Êags
);

337 
__END_DECLS


	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
__±hªad_li°_t
 
	m__li°
;

106 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	m__nu£rs
;

109 
__exãnsi⁄__
 union

111 
	m__•ös
;

112 
__±hªad_¶i°_t
 
	m__li°
;

115 } 
	m__d©a
;

116 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 
	m__Æign
;

118 } 
	t±hªad_muãx_t
;

122 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 
	m__Æign
;

124 } 
	t±hªad_muãx©å_t
;

133 
	m__lock
;

134 
	m__fuãx
;

135 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

136 
__exãnsi⁄__
 
	m__wakeup_£q
;

137 
__exãnsi⁄__
 
	m__wokí_£q
;

138 *
	m__muãx
;

139 
	m__nwaôîs
;

140 
	m__brﬂdˇ°_£q
;

141 } 
	m__d©a
;

142 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__exãnsi⁄__
 
	m__Æign
;

144 } 
	t±hªad_c⁄d_t
;

148 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 
	m__Æign
;

150 } 
	t±hªad_c⁄d©å_t
;

154 
	t±hªad_key_t
;

158 
	t±hªad_⁄˚_t
;

161 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


166 #ifde‡
__x86_64__


169 
	m__lock
;

170 
	m__ƒ_ªadîs
;

171 
	m__ªadîs_wakeup
;

172 
	m__wrôî_wakeup
;

173 
	m__ƒ_ªadîs_queued
;

174 
	m__ƒ_wrôîs_queued
;

175 
	m__wrôî
;

176 
	m__sh¨ed
;

177 
	m__∑d1
;

178 
	m__∑d2
;

181 
	m__Êags
;

182 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__d©a
;

187 
	m__lock
;

188 
	m__ƒ_ªadîs
;

189 
	m__ªadîs_wakeup
;

190 
	m__wrôî_wakeup
;

191 
	m__ƒ_ªadîs_queued
;

192 
	m__ƒ_wrôîs_queued
;

195 
	m__Êags
;

196 
	m__sh¨ed
;

197 
	m__∑d1
;

198 
	m__∑d2
;

199 
	m__wrôî
;

200 } 
	m__d©a
;

202 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 
	m__Æign
;

204 } 
	t±hªad_rwlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 
	m__Æign
;

210 } 
	t±hªad_rwlock©å_t
;

214 #ifde‡
__USE_XOPEN2K


216 vﬁ©ûê
	t±hªad_•ölock_t
;

223 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 
	m__Æign
;

225 } 
	t±hªad_b¨rõr_t
;

229 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 
	m__Æign
;

231 } 
	t±hªad_b¨rõøâr_t
;

235 #i‚de‡
__x86_64__


237 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

154 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

157 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

160 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

163 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

168 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

169 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

172 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

173 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

176 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

177 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

185 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

187 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

191 
__off64_t
 
	t__loff_t
;

192 
__quad_t
 *
	t__qaddr_t
;

193 *
	t__ˇddr_t
;

196 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

199 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

202 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 16

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 
	~<sys/cdefs.h
>

64 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

65 #i‚de‡
_G_HAVE_PRINTF_FP


66 
	#_IO_USE_DTOA
 1

	)

69 #i‚de‡
EOF


70 
	#EOF
 (-1)

	)

72 #i‚de‡
NULL


73 #i‡
deföed
 
__GNUG__
 && \

74 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

75 
	#NULL
 (
__nuŒ
)

	)

77 #i‡!
deföed
(
__˝lu•lus
)

78 
	#NULL
 ((*)0)

	)

80 
	#NULL
 (0)

	)

85 
	#_IOS_INPUT
 1

	)

86 
	#_IOS_OUTPUT
 2

	)

87 
	#_IOS_ATEND
 4

	)

88 
	#_IOS_APPEND
 8

	)

89 
	#_IOS_TRUNC
 16

	)

90 
	#_IOS_NOCREATE
 32

	)

91 
	#_IOS_NOREPLACE
 64

	)

92 
	#_IOS_BIN
 128

	)

100 
	#_IO_MAGIC
 0xFBAD0000

	)

101 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

102 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

103 
	#_IO_USER_BUF
 1

	)

104 
	#_IO_UNBUFFERED
 2

	)

105 
	#_IO_NO_READS
 4

	)

106 
	#_IO_NO_WRITES
 8

	)

107 
	#_IO_EOF_SEEN
 0x10

	)

108 
	#_IO_ERR_SEEN
 0x20

	)

109 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

110 
	#_IO_LINKED
 0x80

	)

111 
	#_IO_IN_BACKUP
 0x100

	)

112 
	#_IO_LINE_BUF
 0x200

	)

113 
	#_IO_TIED_PUT_GET
 0x400

	)

114 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

115 
	#_IO_IS_APPENDING
 0x1000

	)

116 
	#_IO_IS_FILEBUF
 0x2000

	)

117 
	#_IO_BAD_SEEN
 0x4000

	)

118 
	#_IO_USER_LOCK
 0x8000

	)

120 
	#_IO_FLAGS2_MMAP
 1

	)

121 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

122 #ifde‡
_LIBC


123 
	#_IO_FLAGS2_FORTIFY
 4

	)

125 
	#_IO_FLAGS2_USER_WBUF
 8

	)

126 #ifde‡
_LIBC


127 
	#_IO_FLAGS2_SCANF_STD
 16

	)

128 
	#_IO_FLAGS2_NOCLOSE
 32

	)

129 
	#_IO_FLAGS2_CLOEXEC
 64

	)

133 
	#_IO_SKIPWS
 01

	)

134 
	#_IO_LEFT
 02

	)

135 
	#_IO_RIGHT
 04

	)

136 
	#_IO_INTERNAL
 010

	)

137 
	#_IO_DEC
 020

	)

138 
	#_IO_OCT
 040

	)

139 
	#_IO_HEX
 0100

	)

140 
	#_IO_SHOWBASE
 0200

	)

141 
	#_IO_SHOWPOINT
 0400

	)

142 
	#_IO_UPPERCASE
 01000

	)

143 
	#_IO_SHOWPOS
 02000

	)

144 
	#_IO_SCIENTIFIC
 04000

	)

145 
	#_IO_FIXED
 010000

	)

146 
	#_IO_UNITBUF
 020000

	)

147 
	#_IO_STDIO
 040000

	)

148 
	#_IO_DONT_CLOSE
 0100000

	)

149 
	#_IO_BOOLALPHA
 0200000

	)

152 
_IO_jump_t
; 
	g_IO_FILE
;

155 #ifde‡
_IO_MTSAFE_IO


156 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

157 
	~<bôs/°dio-lock.h
>

162 
	t_IO_lock_t
;

168 
	s_IO_m¨kî
 {

169 
_IO_m¨kî
 *
	m_√xt
;

170 
_IO_FILE
 *
	m_sbuf
;

174 
	m_pos
;

176 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

177 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

178 
	mpublic
:

179 
°ªamm¨kî
(
°ªambuf
 *
sb
);

180 ~
°ªamm¨kî
();

181 
ßvög
(Ë{  
	m_•os
 == -2; }

182 
dñè
(
°ªamm¨kî
&);

183 
dñè
();

188 
	e__codecvt_ªsu…


190 
	m__codecvt_ok
,

191 
	m__codecvt_∑πül
,

192 
	m__codecvt_îr‹
,

193 
	m__codecvt_noc⁄v


196 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


199 
	s_IO_codecvt


201 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

202 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

203 
	m__mb°©e_t
 *,

204 c⁄° 
	mwch¨_t
 *,

205 c⁄° 
	mwch¨_t
 *,

206 c⁄° 
	mwch¨_t
 **, *,

208 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

209 
	m__mb°©e_t
 *, *,

211 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

212 
	m__mb°©e_t
 *,

214 c⁄° **, 
	mwch¨_t
 *,

215 
	mwch¨_t
 *, wchar_t **);

216 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

217 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

218 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

219 c⁄° *, c⁄° *, 
	m_IO_size_t
);

220 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

222 
_IO_ic⁄v_t
 
	m__cd_ö
;

223 
_IO_ic⁄v_t
 
	m__cd_out
;

227 
	s_IO_wide_d©a


229 
wch¨_t
 *
	m_IO_ªad_±r
;

230 
wch¨_t
 *
	m_IO_ªad_íd
;

231 
wch¨_t
 *
	m_IO_ªad_ba£
;

232 
wch¨_t
 *
	m_IO_wrôe_ba£
;

233 
wch¨_t
 *
	m_IO_wrôe_±r
;

234 
wch¨_t
 *
	m_IO_wrôe_íd
;

235 
wch¨_t
 *
	m_IO_buf_ba£
;

236 
wch¨_t
 *
	m_IO_buf_íd
;

238 
wch¨_t
 *
	m_IO_ßve_ba£
;

239 
wch¨_t
 *
	m_IO_backup_ba£
;

241 
wch¨_t
 *
	m_IO_ßve_íd
;

243 
__mb°©e_t
 
	m_IO_°©e
;

244 
__mb°©e_t
 
	m_IO_œ°_°©e
;

245 
_IO_codecvt
 
	m_codecvt
;

247 
wch¨_t
 
	m_sh‹tbuf
[1];

249 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

253 
	s_IO_FILE
 {

254 
	m_Êags
;

255 
	#_IO_fûe_Êags
 
_Êags


	)

259 * 
	m_IO_ªad_±r
;

260 * 
	m_IO_ªad_íd
;

261 * 
	m_IO_ªad_ba£
;

262 * 
	m_IO_wrôe_ba£
;

263 * 
	m_IO_wrôe_±r
;

264 * 
	m_IO_wrôe_íd
;

265 * 
	m_IO_buf_ba£
;

266 * 
	m_IO_buf_íd
;

268 *
	m_IO_ßve_ba£
;

269 *
	m_IO_backup_ba£
;

270 *
	m_IO_ßve_íd
;

272 
_IO_m¨kî
 *
	m_m¨kîs
;

274 
_IO_FILE
 *
	m_chaö
;

276 
	m_fûío
;

278 
	m_blksize
;

280 
	m_Êags2
;

282 
_IO_off_t
 
	m_ﬁd_off£t
;

284 
	#__HAVE_COLUMN


	)

286 
	m_cur_cﬁumn
;

287 sig√d 
	m_vèbÀ_off£t
;

288 
	m_sh‹tbuf
[1];

292 
_IO_lock_t
 *
	m_lock
;

293 #ifde‡
_IO_USE_OLD_IO_FILE


296 
	s_IO_FILE_com∂ëe


298 
_IO_FILE
 
	m_fûe
;

300 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

301 
_IO_off64_t
 
	m_off£t
;

302 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


304 
_IO_codecvt
 *
	m_codecvt
;

305 
_IO_wide_d©a
 *
	m_wide_d©a
;

306 
_IO_FILE
 *
	m_‰ìªs_li°
;

307 *
	m_‰ìªs_buf
;

308 
size_t
 
	m_‰ìªs_size
;

310 *
	m__∑d1
;

311 *
	m__∑d2
;

312 *
	m__∑d3
;

313 *
	m__∑d4
;

314 
size_t
 
	m__∑d5
;

316 
	m_mode
;

318 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

322 #i‚de‡
__˝lu•lus


323 
_IO_FILE
 
	t_IO_FILE
;

326 
	g_IO_FILE_∂us
;

328 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

329 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

330 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

331 #i‚de‡
_LIBC


332 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

333 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

334 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

336 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

337 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

338 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

346 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

354 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

355 
	tsize_t
 
	t__n
);

363 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

366 
	t__io_˛o£_‚
 (*
	t__cookõ
);

369 #ifde‡
_GNU_SOURCE


371 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

372 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

373 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

374 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

379 
__io_ªad_‚
 *
	mªad
;

380 
__io_wrôe_‚
 *
	mwrôe
;

381 
__io_£ek_‚
 *
	m£ek
;

382 
__io_˛o£_‚
 *
	m˛o£
;

383 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

384 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

386 
	g_IO_cookõ_fûe
;

389 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

390 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

394 #ifde‡
__˝lu•lus


398 
__undîÊow
 (
_IO_FILE
 *);

399 
__uÊow
 (
_IO_FILE
 *);

400 
__ovîÊow
 (
_IO_FILE
 *, );

401 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


402 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

403 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

404 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

407 #i‡ 
__GNUC__
 >= 3

408 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

410 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

413 
	#_IO_gëc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

415 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

416 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

417 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

418 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

419 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

420 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

421 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

422 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

423 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

425 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


426 
	#_IO_gëwc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

428 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

429 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

430 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

431 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

433 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

434 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

435 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

436 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

439 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

440 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

442 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

443 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

444 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

450 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

451 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

453 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

454 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

455 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 #ifde‡
_IO_MTSAFE_IO


458 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

459 
	#_IO_Êockfûe
(
_Â
) \

460 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

461 
	#_IO_fu∆ockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

464 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

465 
	#_IO_Êockfûe
(
_Â
Ë

	)

466 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

467 
	#_IO_·rylockfûe
(
_Â
Ë

	)

468 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

469 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

472 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

473 
_IO_va_li°
, *
__ª°ri˘
);

474 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

475 
_IO_va_li°
);

476 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

477 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

479 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

480 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

482 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

484 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


485 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

486 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

487 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

488 #i‡
__GNUC__
 >= 2

491 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


492 
	~<shlib-com∑t.h
>

493 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

494 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

495 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

496 c⁄° 
_IO_°dö_u£d
;

497 
wók_exã∫
 (
_IO_°dö_u£d
);

500 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


501 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

505 
	#_IO_fwide
(
__Â
, 
__mode
) \

506 ({ 
__ªsu…
 = (
__mode
); \

507 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

509 i‡((
__Â
)->
_mode
 == 0) \

511 (
__Â
)->
_mode
 = -1; \

512 
__ªsu…
 = (
__Â
)->
_mode
; \

514 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

515 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

517 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

518 
__ªsu…
; })

	)

521 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

522 
_IO_va_li°
, *
__ª°ri˘
);

523 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

524 
_IO_va_li°
);

525 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

526 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

529 #ifde‡
__LDBL_COMPAT


530 
	~<bôs/libio-ldbl.h
>

533 #ifde‡
__˝lu•lus


	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	#__mÆloc_±r_t
 *

	)

29 
	#__mÆloc_size_t
 
size_t


	)

30 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

32 #ifde‡
__GNUC__


34 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

37 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

39 #ifde‡
_LIBC


40 
	#__MALLOC_HOOK_VOLATILE


	)

41 
	#__MALLOC_DEPRECATED


	)

43 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

44 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

49 
	#__MALLOC_P
(
¨gs
Ë
	)
args

50 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

51 
	#__MALLOC_HOOK_VOLATILE


	)

52 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

57 
__BEGIN_DECLS


60 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

64 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

72 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

75 
	$‰ì
 (*
__±r
Ë
__THROW
;

78 
	$c‰ì
 (*
__±r
Ë
__THROW
;

81 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

85 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

89 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

93 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

96 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

97 
__THROW
 
__©åibuã_mÆloc__
;

101 
	smÆlöfo


103 
¨ía
;

104 
‹dblks
;

105 
smblks
;

106 
hblks
;

107 
hblkhd
;

108 
usmblks
;

109 
fsmblks
;

110 
u‹dblks
;

111 
f‹dblks
;

112 
kìpco°
;

116 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

119 #i‚de‡
M_MXFAST


120 
	#M_MXFAST
 1

	)

122 #i‚de‡
M_NLBLKS


123 
	#M_NLBLKS
 2

	)

125 #i‚de‡
M_GRAIN


126 
	#M_GRAIN
 3

	)

128 #i‚de‡
M_KEEP


129 
	#M_KEEP
 4

	)

133 
	#M_TRIM_THRESHOLD
 -1

	)

134 
	#M_TOP_PAD
 -2

	)

135 
	#M_MMAP_THRESHOLD
 -3

	)

136 
	#M_MMAP_MAX
 -4

	)

137 
	#M_CHECK_ACTION
 -5

	)

138 
	#M_PERTURB
 -6

	)

139 
	#M_ARENA_TEST
 -7

	)

140 
	#M_ARENA_MAX
 -8

	)

143 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

147 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

151 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

154 
	$mÆloc_°©s
 (Ë
__THROW
;

157 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

160 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

164 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

169 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

170 
__MALLOC_DEPRECATED
;

172 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

173 c⁄° 
__mÆloc_±r_t
)

174 
__MALLOC_DEPRECATED
;

175 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

176 c⁄° 
__mÆloc_±r_t
)

177 
__MALLOC_DEPRECATED
;

178 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

179 
size_t
 
__size
,

180 c⁄° 
__mÆloc_±r_t
)

181 
__MALLOC_DEPRECATED
;

182 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

183 
size_t
 
__size
,

184 c⁄° 
__mÆloc_±r_t
)

185 
__MALLOC_DEPRECATED
;

186 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

189 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

192 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/home/lixing/include/FL/Fl_Bitmap.H

22 #i‚de‡
Fl_Bôm≠_H


23 
	#Fl_Bôm≠_H


	)

24 
	~"Fl_Image.H
"

26 
˛ass
 
	gFl_Widgë
;

27 
	gFl_Míu_Iãm
;

33 ˛as†
	cFL_EXPORT
 
	mFl_Bôm≠
 : 
public
 
Fl_Image
 {

34 
‰õnd
 
˛ass
 
Fl_Qu¨tz_Gøphics_Drivî
;

35 
‰õnd
 
˛ass
 
	mFl_GDI_Gøphics_Drivî
;

36 
‰õnd
 
˛ass
 
	mFl_GDI_Pröãr_Gøphics_Drivî
;

37 
‰õnd
 
˛ass
 
	mFl_Xlib_Gøphics_Drivî
;

38 
	mpublic
:

41 c⁄° 
uch¨
 *
¨øy
;

43 
	mÆloc_¨øy
;

45 
	m¥iv©e
:

46 
°¨t
(
XP
, 
YP
, 
WP
, 
HP
, &
cx
, &
cy
,

47 &
X
, &
Y
, &
W
, &
H
);

48 #i‡
deföed
(
__APPLE__
Ë|| 
	$deföed
(
WIN32
)

50 *
id_
;

53 
id_
;

56 
public
:

59 
	$Fl_Bôm≠
(c⁄° 
uch¨
 *
bôs
, 
W
, 
H
) :

60 
	`Fl_Image
(
W
,
H
,0), 
	`¨øy
(
bôs
), 
	`Æloc_¨øy
(0), 
	$id_
(0Ë{
	`d©a
((c⁄° **)&
¨øy
, 1);}

62 
	$Fl_Bôm≠
(c⁄° *
bôs
, 
W
, 
H
) :

63 
	`Fl_Image
(
W
,
H
,0), 
	`¨øy
((c⁄° 
uch¨
 *)
bôs
), 
	`Æloc_¨øy
(0), 
	$id_
(0Ë{
	`d©a
((c⁄° **)&
¨øy
, 1);
	}
}

64 
	gvútuÆ
 ~
Fl_Bôm≠
();

65 
vútuÆ
 
Fl_Image
 *
c›y
(
W
, 
H
);

66 
Fl_Image
 *
	$c›y
(Ë{  
	`c›y
(
	`w
(), 
	`h
()); 
	}
}

67 
vútuÆ
 
døw
(
X
, 
Y
, 
W
, 
H
, 
cx
=0, 
cy
=0);

68 
	$døw
(
X
, 
Y
Ë{
	`døw
(X, Y, 
	`w
(), 
	`h
(), 0, 0);
	}
}

69 
vútuÆ
 
œbñ
(
Fl_Widgë
*
w
);

70 
vútuÆ
 
œbñ
(
Fl_Míu_Iãm
*
m
);

71 
vútuÆ
 
unˇche
();

	@/home/lixing/include/FL/Fl_Check_Button.H

19 #i‚de‡
Fl_Check_Buâ⁄_H


20 
	#Fl_Check_Buâ⁄_H


	)

22 
	~"Fl_Light_Buâ⁄.H
"

30 ˛as†
	cFL_EXPORT
 
	mFl_Check_Buâ⁄
 : 
public
 
Fl_Light_Buâ⁄
 {

31 
public
:

32 
Fl_Check_Buâ⁄
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
 = 0);

	@/home/lixing/include/FL/Fl_File_Browser.H

26 #i‚de‡
_Fl_Fûe_Brow£r_H_


27 
	#_Fl_Fûe_Brow£r_H_


	)

29 
	~"Fl_Brow£r.H
"

30 
	~"Fl_Fûe_Ic⁄.H
"

31 
	~"fûíame.H
"

39 ˛as†
	cFL_EXPORT
 
	mFl_Fûe_Brow£r
 : 
public
 
Fl_Brow£r
 {

41 
fûëy≥_
;

42 c⁄° *
	mdúe˘‹y_
;

43 
uch¨
 
	mic⁄size_
;

44 c⁄° *
	m∑âîn_
;

46 
	$fuŒ_height
() const;

47 
	$ôem_height
(*) const;

48 
	$ôem_width
(*) const;

49 
	$ôem_døw
(*, , , , ) const;

50 
	$ö¸_height
(Ëc⁄° {  (
	`ôem_height
(0)); }

52 
public
:

53 íum { 
FILES
, 
DIRECTORIES
 
	}
};

59 
Fl_Fûe_Brow£r
(, , , , const * = 0);

62 
uch¨
 
	$ic⁄size
(Ëc⁄° {  (
ic⁄size_
); 
	}
};

64 
	$ic⁄size
(
uch¨
 
s
Ë{ 
ic⁄size_
 = s; 
	`ªdøw
(); 
	}
};

71 
fûãr
(c⁄° *
∑âîn
);

77 c⁄° *
	$fûãr
(Ëc⁄° {  (
∑âîn_
); 
	}
};

86 
lﬂd
(c⁄° *
dúe˘‹y
, 
Fl_Fûe_S‹t_F
 *
s‹t
 = 
Ê_numîics‹t
);

88 
Fl_F⁄tsize
 
	$ãxtsize
(Ëc⁄° {  
Fl_Brow£r
::
	`ãxtsize
(); 
	}
};

89 
	$ãxtsize
(
Fl_F⁄tsize
 
s
Ë{ 
Fl_Brow£r
::
	`ãxtsize
(s); 
ic⁄size_
 = (
uch¨
)(3 * s / 2); 
	}
};

97 
	$fûëy≥
(Ëc⁄° {  (
fûëy≥_
); 
	}
};

104 
	$fûëy≥
(
t
Ë{ 
fûëy≥_
 =Å; 
	}
};

	@/home/lixing/include/FL/Fl_File_Input.H

23 #i‚de‡
Fl_Fûe_I≈ut_H


24 
	#Fl_Fûe_I≈ut_H


	)

26 
	~<FL/Fl_I≈ut.H
>

47 ˛as†
	cFL_EXPORT
 
	mFl_Fûe_I≈ut
 : 
public
 
Fl_I≈ut
 {

49 
Fl_Cﬁ‹
 
îr‹cﬁ‹_
;

50 
	mok_íåy_
;

51 
uch¨
 
	mdown_box_
;

52 
	mbuâ⁄s_
[200];

53 
	m¥es£d_
;

55 
døw_buâ⁄s
();

56 
h™dÀ_buâ⁄
(
evít
);

57 
upd©e_buâ⁄s
();

59 
	mpublic
:

61 
Fl_Fûe_I≈ut
(
X
, 
Y
, 
W
, 
H
, c⁄° *
L
=0);

63 
vútuÆ
 
h™dÀ
(
evít
);

65 
	m¥Ÿe˘ed
:

66 
vútuÆ
 
døw
();

68 
	mpublic
:

70 
Fl_Boxty≥
 
	$down_box
(Ëc⁄° {  (
Fl_Boxty≥
)
down_box_
; }

72 
	$down_box
(
Fl_Boxty≥
 
b
Ë{ 
down_box_
 = b; 
	}
}

78 
Fl_Cﬁ‹
 
	$îr‹cﬁ‹
(Ëc⁄° {  
îr‹cﬁ‹_
; 
	}
}

80 
	$îr‹cﬁ‹
(
Fl_Cﬁ‹
 
c
Ë{ 
îr‹cﬁ‹_
 = c; 
	}
}

82 
vÆue
(c⁄° *
°r
);

83 
vÆue
(c⁄° *
°r
, 
Àn
);

89 c⁄° *
	$vÆue
(Ë{  
Fl_I≈ut_
::
	`vÆue
(); 
	}
}

	@/home/lixing/include/FL/Fl_Menu_Button.H

22 #i‚de‡
Fl_Míu_Buâ⁄_H


23 
	#Fl_Míu_Buâ⁄_H


	)

25 
	~"Fl_Míu_.H
"

50 ˛as†
	cFL_EXPORT
 
	mFl_Míu_Buâ⁄
 : 
public
 
Fl_Míu_
 {

51 
¥Ÿe˘ed
:

52 
døw
();

53 
	mpublic
:

60 
	ep›up_buâ⁄s
 {
POPUP1
 = 1,

61 
	mPOPUP2
,

62 
	mPOPUP12
,

63 
	mPOPUP3
,

64 
	mPOPUP13
,

65 
	mPOPUP23
,

66 
	mPOPUP123


68 
h™dÀ
();

69 c⁄° 
Fl_Míu_Iãm
* 
p›up
();

70 
Fl_Míu_Buâ⁄
(,,,,const * =0);

	@/home/lixing/include/FL/Fl_Paged_Device.H

23 #i‚de‡
Fl_Paged_Devi˚_H


24 
	#Fl_Paged_Devi˚_H


	)

26 
	~<FL/Fl_Devi˚.H
>

27 
	~<FL/Fl_Wödow.H
>

30 
	#NO_PAGE_FORMATS
 30

	)

38 ˛as†
	cFL_EXPORT
 
	mFl_Paged_Devi˚
 : 
public
 
Fl_SurÁ˚_Devi˚
 {

39 
public
:

45 
	ePage_F‹m©
 {

46 
A0
 = 0,

47 
	mA1
,

48 
	mA2
,

49 
	mA3
,

50 
	mA4
,

51 
	mA5
,

52 
	mA6
,

53 
	mA7
,

54 
	mA8
,

55 
	mA9
,

56 
	mB0
,

57 
	mB1
,

58 
	mB2
,

59 
	mB3
,

60 
	mB4
,

61 
	mB5
,

62 
	mB6
,

63 
	mB7
,

64 
	mB8
,

65 
	mB9
,

66 
	mB10
,

67 
	mC5E
,

68 
	mDLE
,

69 
	mEXECUTIVE
,

70 
	mFOLIO
,

71 
	mLEDGER
,

72 
	mLEGAL
,

73 
	mLETTER
,

74 
	mTABLOID
,

75 
	mENVELOPE
,

76 
	mMEDIA
 = 0x1000

81 
	ePage_Layout
 {

82 
	gPORTRAIT
 = 0,

83 
	gLANDSCAPE
 = 0x100,

84 
	gREVERSED
 = 0x200,

85 
	gORIENTATION
 = 0x300

92 
	gwidth
;

94 
	gheight
;

96 c⁄° *
	g«me
;

97 } 
	t∑ge_f‹m©
;

100 c⁄° 
∑ge_f‹m©
 
	g∑ge_f‹m©s
[
NO_PAGE_FORMATS
];

101 
	g¥iv©e
:

102 
åavî£
(
Fl_Widgë
 *
widgë
);

103 
	g¥Ÿe˘ed
:

105 
x_off£t
;

107 
	gy_off£t
;

109 
	$Fl_Paged_Devi˚
(Ë: 
	`Fl_SurÁ˚_Devi˚
(
NULL
), 
	`x_off£t
(0), 
	$y_off£t
(0Ë{
	}
};

110 #i‡
FLTK_ABI_VERSION
 >= 10301

111 
	gpublic
:

113 
vútuÆ
 ~
	$Fl_Paged_Devi˚
(Ë{
	}
};

116 
	gvútuÆ
 ~
	$Fl_Paged_Devi˚
(Ë{
	}
};

117 
	gpublic
:

119 c⁄° *
˛ass_id
;

120 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;
	}
};

121 
vútuÆ
 
°¨t_job
(
∑gecou¡
, *
‰om∑ge
 = 
NULL
, *
t›age
 = NULL);

122 
vútuÆ
 
°¨t_∑ge
();

123 
vútuÆ
 
¥öèbÀ_ª˘
(*
w
, *
h
);

124 
vútuÆ
 
m¨gös
(*
À·
, *
t›
, *
right
, *
bŸtom
);

125 
vútuÆ
 
‹igö
(
x
, 
y
);

126 
vútuÆ
 
‹igö
(*
x
, *
y
);

127 
vútuÆ
 
sˇÀ
(
sˇÀ_x
, 
sˇÀ_y
 = 0.);

128 
vútuÆ
 
rŸ©e
(
™gÀ
);

129 
vútuÆ
 
å™¶©e
(
x
, 
y
);

130 
vútuÆ
 
u¡øn¶©e
();

131 
vútuÆ
 
¥öt_widgë
(
Fl_Widgë
* 
widgë
, 
dñè_x
 = 0, 
dñè_y
 = 0);

139 
¥öt_wödow
(
Fl_Wödow
 *
wö
, 
x_off£t
 = 0, 
y_off£t
 = 0);

140 
vútuÆ
 
¥öt_wödow_∑π
(
Fl_Wödow
 *
wö
, 
x
, 
y
, 
w
, 
h
, 
dñè_x
 = 0, 
dñè_y
 = 0);

141 
vútuÆ
 
íd_∑ge
 ();

142 
vútuÆ
 
íd_job
 ();

	@/home/lixing/include/FL/Fl_Plugin.H

22 #i‚de‡
Fl_Plugö_H


23 
	#Fl_Plugö_H


	)

25 
	~"Fl_Pª„ªn˚s.H
"

61 ˛as†
	cFL_EXPORT
 
	mFl_Plugö
 {

62 
	mFl_Pª„ªn˚s
::
ID
 
id
;

63 
	mpublic
:

64 
Fl_Plugö
(c⁄° *
kœss
, c⁄° *
«me
);

65 
	mvútuÆ
 ~
Fl_Plugö
();

73 ˛as†
	cFL_EXPORT
 
	mFl_Plugö_M™agî
 : 
public
 
Fl_Pª„ªn˚s
 {

74 
public
:

75 
Fl_Plugö_M™agî
(c⁄° *
kœss
);

76 ~
Fl_Plugö_M™agî
();

80 
	$∂ugös
(Ë{  
	`groups
(); }

81 
Fl_Plugö
 *
	`∂ugö
(
ödex
);

82 
Fl_Plugö
 *
	`∂ugö
(c⁄° *
«me
);

83 
Fl_Pª„ªn˚s
::
ID
 
	`addPlugö
(c⁄° *
«me
, 
Fl_Plugö
 *
∂ugö
);

85 
	`ªmovePlugö
(
Fl_Pª„ªn˚s
::
ID
 
id
);

86 
	`lﬂd
(c⁄° *
fûíame
);

87 
	`lﬂdAŒ
(c⁄° *
fûï©h
, c⁄° *
∑âîn
=0);

88 
	}
};

	@/home/lixing/include/FL/Fl_Preferences.H

22 #i‚de‡
Fl_Pª„ªn˚s_H


23 
	#Fl_Pª„ªn˚s_H


	)

25 
	~<°dio.h
>

26 
	~"Fl_Exp‹t.H
"

60 ˛as†
	cFL_EXPORT
 
	mFl_Pª„ªn˚s
 {

62 
	mpublic
:

66 
	eRoŸ
 {

67 
SYSTEM
=0,

68 
	mUSER


78 *
	tID
;

80 c⁄° *
√wUUID
();

82 
Fl_Pª„ªn˚s
–
RoŸ
 
roŸ
, c⁄° *
víd‹
, c⁄° *
≠∂iˇti⁄
 );

83 
Fl_Pª„ªn˚s
–c⁄° *
∑th
, c⁄° *
víd‹
, c⁄° *
≠∂iˇti⁄
 );

84 
Fl_Pª„ªn˚s
–Fl_Pª„ªn˚†&
∑ª¡
, c⁄° *
group
 );

85 
Fl_Pª„ªn˚s
–Fl_Pª„ªn˚†*
∑ª¡
, c⁄° *
group
 );

86 
Fl_Pª„ªn˚s
–Fl_Pª„ªn˚†&
∑ª¡
, 
groupIndex
 );

87 
Fl_Pª„ªn˚s
–Fl_Pª„ªn˚†*
∑ª¡
, 
groupIndex
 );

88 
Fl_Pª„ªn˚s
(const Fl_Preferences&);

89 
Fl_Pª„ªn˚s
–
ID
 
id
 );

90 
	gvútuÆ
 ~
Fl_Pª„ªn˚s
();

94 
ID
 
	$id
(Ë{  (
ID
)
node
; 
	}
}

98 
	$ªmove
(
ID
 
id_
Ë{  ((
Node
*)id_)->
	`ªmove
(); 
	}
}

102 c⁄° *
	$«me
(Ë{  
node
->
	`«me
(); 
	}
}

106 c⁄° *
	$∑th
(Ë{  
node
->
	`∑th
(); 
	}
}

108 
groups
();

109 c⁄° *
group
–
num_group
 );

110 
groupExi°s
–c⁄° *
key
 );

111 
dñëeGroup
–c⁄° *
group
 );

112 
dñëeAŒGroups
();

114 
íåõs
();

115 c⁄° *
íåy
–
ödex
 );

116 
íåyExi°s
–c⁄° *
key
 );

117 
dñëeE¡ry
–c⁄° *
íåy
 );

118 
dñëeAŒE¡rõs
();

120 
˛ór
();

122 
£t
–c⁄° *
íåy
, 
vÆue
 );

123 
£t
–c⁄° *
íåy
, 
vÆue
 );

124 
£t
–c⁄° *
íåy
, 
vÆue
, 
¥ecisi⁄
 );

125 
£t
–c⁄° *
íåy
, 
vÆue
 );

126 
£t
–c⁄° *
íåy
, 
vÆue
, 
¥ecisi⁄
 );

127 
£t
–c⁄° *
íåy
, c⁄° *
vÆue
 );

128 
£t
–c⁄° *
íåy
, c⁄° *
vÆue
, 
size
 );

130 
gë
–c⁄° *
íåy
, &
vÆue
, 
deÁu…VÆue
 );

131 
gë
–c⁄° *
íåy
, &
vÆue
, 
deÁu…VÆue
 );

132 
gë
–c⁄° *
íåy
, &
vÆue
, 
deÁu…VÆue
 );

133 
gë
–c⁄° *
íåy
, *&
vÆue
, c⁄° *
deÁu…VÆue
 );

134 
gë
–c⁄° *
íåy
, *
vÆue
, c⁄° *
deÁu…VÆue
, 
maxSize
 );

135 
gë
–c⁄° *
íåy
, *&
vÆue
, c⁄° *
deÁu…VÆue
, 
deÁu…Size
 );

136 
gë
–c⁄° *
íåy
, *
vÆue
, c⁄° *
deÁu…VÆue
, 
deÁu…Size
, 
maxSize
 );

138 
size
–c⁄° *
íåy
 );

140 
gëU£rd©aP©h
–*
∑th
, 
∑thÀn
 );

142 
Êush
();

159 ˛as†
	cFL_EXPORT
 
	gName
 {

161 *
	gd©a_
;

163 
	gpublic
:

164 
Name
–
n
 );

165 
Name
–c⁄° *
f‹m©
, ... );

171 
›î©‹
 c⁄° *(Ë{  
	gd©a_
; }

172 ~
Name
();

176 
	sE¡ry
 {

177 *
	g«me
, *
	gvÆue
;

180 
	g¥iv©e
:

181 
	$Fl_Pª„ªn˚s
(Ë: 
	`node
(0), 
	$roŸNode
(0Ë{ 
	}
}

182 
	gFl_Pª„ªn˚s
 &
	g›î©‹
=(c⁄° 
Fl_Pª„ªn˚s
&);

184 
	g«meBuf„r
[128];

185 
	guuidBuf„r
[40];

186 
Fl_Pª„ªn˚s
 *
	gru¡imePªfs
;

188 
	gpublic
:

189 
˛ass
 
RoŸNode
;

191 ˛as†
	cFL_EXPORT
 
	gNode
 {

193 
Node
 *
	gchûd_
, *
	g√xt_
;

195 
Node
 *
	g∑ª¡_
;

196 
RoŸNode
 *
	groŸ_
;

198 *
	g∑th_
;

199 
E¡ry
 *
	gíåy_
;

200 
	gnE¡ry_
, 
	gNE¡ry_
;

201 
	gdúty_
:1;

202 
	gt›_
:1;

203 
	gödexed_
:1;

205 
Node
 **
	gödex_
;

206 
	gnIndex_
, 
	gNIndex_
;

207 
¸óãIndex
();

208 
upd©eIndex
();

209 
dñëeIndex
();

210 
	gpublic
:

211 
œ°E¡rySë
;

212 
	gpublic
:

213 
Node
–c⁄° *
∑th
 );

214 ~
Node
();

216 
wrôe
–
FILE
 *
f
 );

217 c⁄° *
«me
();

218 c⁄° *
∑th
(Ë{  
	g∑th_
; }

219 
Node
 *
föd
–c⁄° *
∑th
 );

220 
Node
 *
£¨ch
–c⁄° *
∑th
, 
off£t
=0 );

221 
Node
 *
chûdNode
–
ix
 );

222 
Node
 *
addChûd
–c⁄° *
∑th
 );

223 
£tP¨ít
–
Node
 *
∑ª¡
 );

224 
Node
 *
∑ª¡
(Ë{  
	gt›_
?0L:
∑ª¡_
; }

225 
£tRoŸ
(
RoŸNode
 *
r
Ë{ 
	groŸ_
 =Ñ; 
	gt›_
 = 1; }

226 
RoŸNode
 *
födRoŸ
();

227 
ªmove
();

228 
dúty
();

229 
dñëeAŒChûdªn
();

231 
nChûdªn
();

232 c⁄° *
chûd
–
ix
 );

233 
£t
–c⁄° *
«me
, c⁄° *
vÆue
 );

234 
£t
–c⁄° *
löe
 );

235 
add
–c⁄° *
löe
 );

236 c⁄° *
gë
–c⁄° *
«me
 );

237 
gëE¡ry
–c⁄° *
«me
 );

238 
dñëeE¡ry
–c⁄° *
«me
 );

239 
dñëeAŒE¡rõs
();

240 
nE¡ry
(Ë{  
	gnE¡ry_
; }

241 
	gE¡ry
 &
íåy
(
i
Ë{  
	gíåy_
[i]; }

243 
‰õnd
 
˛ass
 
	gNode
;

245 ˛as†
	cFL_EXPORT
 
	gRoŸNode
 {

246 
Fl_Pª„ªn˚s
 *
	g¥efs_
;

247 *
	gfûíame_
;

248 *
	gvíd‹_
, *
	g≠∂iˇti⁄_
;

249 
	gpublic
:

250 
RoŸNode
–
Fl_Pª„ªn˚s
 *, 
RoŸ
 
roŸ
, c⁄° *
víd‹
, c⁄° *
≠∂iˇti⁄
 );

251 
RoŸNode
–
Fl_Pª„ªn˚s
 *, c⁄° *
∑th
, c⁄° *
víd‹
, c⁄° *
≠∂iˇti⁄
 );

252 
RoŸNode
–
Fl_Pª„ªn˚s
 * );

253 ~
RoŸNode
();

254 
ªad
();

255 
wrôe
();

256 
gëP©h
–*
∑th
, 
∑thÀn
 );

258 
‰õnd
 
˛ass
 
	gRoŸNode
;

260 
	g¥Ÿe˘ed
:

261 
Node
 *
node
;

262 
RoŸNode
 *
	groŸNode
;

	@/home/lixing/include/FL/Fl_Printer.H

23 #i‚de‡
Fl_Pröãr_H


24 
	#Fl_Pröãr_H


	)

26 
	~<FL/x.H
>

27 
	~<FL/Fl_Paged_Devi˚.H
>

28 
	~<FL/Ê_døw.H
>

29 
	~<FL/Fl_Pixm≠.H
>

30 
	~<FL/Fl_RGB_Image.H
>

31 
	~<FL/Fl_Bôm≠.H
>

32 
	~<°dio.h
>

33 #i‡!(
deföed
(
__APPLE__
Ë|| deföed(
WIN32
))

34 
	~<FL/Fl_Po°S¸ùt.H
>

35 #ñi‡
deföed
(
WIN32
)

36 
	~<commdlg.h
>

39 #i‡
deföed
(
__APPLE__
Ë|| deföed(
WIN32
Ë|| deföed(
FL_DOXYGEN
)

47 ˛as†
	cFl_Sy°em_Pröãr
 : 
public
 
Fl_Paged_Devi˚
 {

48 
‰õnd
 
˛ass
 
Fl_Pröãr
;

49 
	m¥iv©e
:

51 *
gc
;

52 
£t_cuºít
();

53 #ifde‡
__APPLE__


54 
	msˇÀ_x
;

55 
	msˇÀ_y
;

56 
	m™gÀ
;

57 
PMPrötSessi⁄
 
	m¥ötSessi⁄
;

58 
PMPageF‹m©
 
	m∑geF‹m©
;

59 
PMPrötSëtögs
 
	m¥ötSëtögs
;

60 #ñi‡
	$deföed
(
WIN32
)

61 
ab‹tPröt
;

62 
PRINTDLG
 
pd
;

63 
HDC
 
hPr
;

64 
¥îr
;

65 
À·_m¨gö
;

66 
t›_m¨gö
;

67 
	`absﬁuã_¥öèbÀ_ª˘
(*
x
, *
y
, *
w
, *
h
);

69 
¥Ÿe˘ed
:

71 
	`Fl_Sy°em_Pröãr
();

72 
public
:

73 c⁄° *
˛ass_id
;

74 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

75 
	`°¨t_job
(
∑gecou¡
, *
‰om∑ge
 = 
NULL
, *
t›age
 = NULL);

76 
	`°¨t_∑ge
 ();

77 
	`¥öèbÀ_ª˘
(*
w
, *
h
);

78 
	`m¨gös
(*
À·
, *
t›
, *
right
, *
bŸtom
);

79 
	`‹igö
(*
x
, *
y
);

80 
	`‹igö
(
x
, 
y
);

81 
	`sˇÀ
 (
sˇÀ_x
, 
sˇÀ_y
 = 0.);

82 
	`rŸ©e
(
™gÀ
);

83 
	`å™¶©e
(
x
, 
y
);

84 
	`u¡øn¶©e
();

85 
	`íd_∑ge
 ();

86 
	`íd_job
 ();

87 #ifde‡
__APPLE__


88 
	`¥öt_wödow_∑π
(
Fl_Wödow
 *
wö
, 
x
, 
y
, 
w
, 
h
, 
dñè_x
, 
dñè_y
);

91 ~
	`Fl_Sy°em_Pröãr
();

92 
	}
};

96 #i‡!(
deföed
(
__APPLE__
Ë|| deföed(
WIN32
) )

104 ˛as†
	cFl_Po°S¸ùt_Pröãr
 : 
public
 
Fl_Po°S¸ùt_Fûe_Devi˚
 {

105 
‰õnd
 
˛ass
 
Fl_Pröãr
;

106 
	m¥Ÿe˘ed
:

108 
	$Fl_Po°S¸ùt_Pröãr
() {};

109 
public
:

110 c⁄° *
˛ass_id
;

111 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;
	}
};

112 
°¨t_job
(
∑ges
, *
fú°∑ge
 = 
NULL
, *
œ°∑ge
 = NULL);

149 ˛as†
	cFL_EXPORT
 
	mFl_Pröãr
 : 
public
 
Fl_Paged_Devi˚
 {

150 
public
:

151 c⁄° *
˛ass_id
;

152 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

154 
	`Fl_Pröãr
();

155 
	`°¨t_job
(
∑gecou¡
, *
‰om∑ge
 = 
NULL
, *
t›age
 = NULL);

156 
	`°¨t_∑ge
();

157 
	`¥öèbÀ_ª˘
(*
w
, *
h
);

158 
	`m¨gös
(*
À·
, *
t›
, *
right
, *
bŸtom
);

159 
	`‹igö
(*
x
, *
y
);

160 
	`‹igö
(
x
, 
y
);

161 
	`sˇÀ
(
sˇÀ_x
, 
sˇÀ_y
 = 0.);

162 
	`rŸ©e
(
™gÀ
);

163 
	`å™¶©e
(
x
, 
y
);

164 
	`u¡øn¶©e
();

165 
	`íd_∑ge
 ();

166 
	`íd_job
 ();

167 
	`¥öt_widgë
(
Fl_Widgë
* 
widgë
, 
dñè_x
=0, 
dñè_y
=0);

168 
	`¥öt_wödow_∑π
(
Fl_Wödow
 *
wö
, 
x
, 
y
, 
w
, 
h
, 
dñè_x
=0, 
dñè_y
=0);

169 
	`£t_cuºít
();

170 
Fl_Gøphics_Drivî
* 
	`drivî
();

172 ~
	`Fl_Pröãr
();

177 c⁄° *
dülog_tôÀ
;

178 c⁄° *
dülog_¥öãr
;

179 c⁄° *
dülog_ønge
;

180 c⁄° *
dülog_c›õs
;

181 c⁄° *
dülog_Æl
;

182 c⁄° *
dülog_∑ges
;

183 c⁄° *
dülog_‰om
;

184 c⁄° *
dülog_to
;

185 c⁄° *
dülog_¥›îtõs
;

186 c⁄° *
dülog_c›yNo
;

187 c⁄° *
dülog_¥öt_buâ⁄
;

188 c⁄° *
dülog_ˇn˚l_buâ⁄
;

189 c⁄° *
dülog_¥öt_to_fûe
;

190 c⁄° *
¥›îty_tôÀ
;

191 c⁄° *
¥›îty_∑gesize
;

192 c⁄° *
¥›îty_mode
;

193 c⁄° *
¥›îty_u£
;

194 c⁄° *
¥›îty_ßve
;

195 c⁄° *
¥›îty_ˇn˚l
;

197 
¥iv©e
:

198 #i‡
	`deföed
(
WIN32
Ë|| 
	$deföed
(
__APPLE__
)

199 
Fl_Sy°em_Pröãr
 *
¥öãr
;

201 
Fl_Po°S¸ùt_Pröãr
 *
¥öãr
;

203 
	}
};

	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

61 #i‡
deföed
(
ISC
Ë&& deföed(
USE_XMBTOWC
)

62 
	#w˘omb
(
a
,
b
Ë
	`_Xw˘omb
◊,b)

	)

63 
	#mbÀn
(
a
,
b
Ë
	`_XmbÀn
◊,b)

	)

64 #i‚de‡
USE_XWCHAR_STRING


65 
	#mbtowc
(
a
,
b
,
c
Ë
	`_Xmbtowc
◊,b,c)

	)

70 
_XmbÀn
(

71 #ifde‡
ISC


72 c⁄° *
°r
,

73 
size_t
 
Àn


75 *
°r
,

76 
Àn


82 
	#X_HAVE_UTF8_STRING
 1

	)

87 #ifde‡
__˛™g__


88 #¥agm®
˛™g
 
dügno°ic
 
push


89 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

92 *
	tXPoöãr
;

94 
	#Boﬁ
 

	)

95 
	#Sètus
 

	)

96 
	#True
 1

	)

97 
	#FÆ£
 0

	)

99 
	#QueuedAÃódy
 0

	)

100 
	#QueuedA·îRódög
 1

	)

101 
	#QueuedA·îFlush
 2

	)

103 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

104 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

105 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

106 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

107 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

108 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

109 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

110 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

111 
	#AŒPœ√s
 (()~0L)

	)

112 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

113 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

114 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

115 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

116 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

117 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

118 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

119 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

120 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

121 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

122 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

123 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

124 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

125 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

126 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

127 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

128 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

129 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

130 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

131 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

132 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

135 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

136 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

137 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

138 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

139 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

140 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

141 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

142 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

143 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

144 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

145 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

146 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

147 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

148 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

149 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

150 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

151 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

152 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

153 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

154 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

155 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

160 
	s_XExtD©a
 {

161 
	mnumbî
;

162 
_XExtD©a
 *
	m√xt
;

163 (*
	m‰ì_¥iv©e
)(

164 
_XExtD©a
 *
	mexãnsi⁄


166 
XPoöãr
 
	m¥iv©e_d©a
;

167 } 
	tXExtD©a
;

173 
	mexãnsi⁄
;

174 
	mmaj‹_›code
;

175 
	mfú°_evít
;

176 
	mfú°_îr‹
;

177 } 
	tXExtCodes
;

184 
	mdïth
;

185 
	mbôs_≥r_pixñ
;

186 
	msˇ∆öe_∑d
;

187 } 
	tXPixm≠F‹m©VÆues
;

194 
	mfun˘i⁄
;

195 
	m∂™e_mask
;

196 
	mf‹eground
;

197 
	mbackground
;

198 
	mlöe_width
;

199 
	mlöe_°yÀ
;

200 
	mˇp_°yÀ
;

202 
	mjoö_°yÀ
;

203 
	mfûl_°yÀ
;

205 
	mfûl_ruÀ
;

206 
	m¨c_mode
;

207 
Pixm≠
 
	mtûe
;

208 
Pixm≠
 
	m°ù∂e
;

209 
	mts_x_‹igö
;

210 
	mts_y_‹igö
;

211 
F⁄t
 
	mf⁄t
;

212 
	msubwödow_mode
;

213 
Boﬁ
 
	mgøphics_exposuªs
;

214 
	m˛ù_x_‹igö
;

215 
	m˛ù_y_‹igö
;

216 
Pixm≠
 
	m˛ù_mask
;

217 
	mdash_off£t
;

218 
	mdashes
;

219 } 
	tXGCVÆues
;

226 
	g_XGC


227 #ifde‡
	tXLIB_ILLEGAL_ACCESS


229 
XExtD©a
 *
	gext_d©a
;

230 
GC⁄ãxt
 
	ggid
;

234 *
	tGC
;

240 
XExtD©a
 *
	mext_d©a
;

241 
VisuÆID
 
	mvisuÆid
;

242 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

243 
	mc_˛ass
;

245 
	m˛ass
;

247 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

248 
	mbôs_≥r_rgb
;

249 
	mm≠_íåõs
;

250 } 
	tVisuÆ
;

256 
	mdïth
;

257 
	mnvisuÆs
;

258 
VisuÆ
 *
	mvisuÆs
;

259 } 
	tDïth
;

267 
	g_XDi•œy
;

270 
XExtD©a
 *
	mext_d©a
;

271 
_XDi•œy
 *
	mdi•œy
;

272 
Wödow
 
	mroŸ
;

273 
	mwidth
, 
	mheight
;

274 
	mmwidth
, 
	mmheight
;

275 
	mndïths
;

276 
Dïth
 *
	mdïths
;

277 
	mroŸ_dïth
;

278 
VisuÆ
 *
	mroŸ_visuÆ
;

279 
GC
 
	mdeÁu…_gc
;

280 
Cﬁ‹m≠
 
	mcm≠
;

281 
	mwhôe_pixñ
;

282 
	mbœck_pixñ
;

283 
	mmax_m≠s
, 
	mmö_m≠s
;

284 
	mbackög_°‹e
;

285 
Boﬁ
 
	mßve_undîs
;

286 
	mroŸ_öput_mask
;

287 } 
	tS¸ìn
;

293 
XExtD©a
 *
	mext_d©a
;

294 
	mdïth
;

295 
	mbôs_≥r_pixñ
;

296 
	msˇ∆öe_∑d
;

297 } 
	tS¸ìnF‹m©
;

303 
Pixm≠
 
	mbackground_pixm≠
;

304 
	mbackground_pixñ
;

305 
Pixm≠
 
	mb‹dî_pixm≠
;

306 
	mb‹dî_pixñ
;

307 
	mbô_gøvôy
;

308 
	mwö_gøvôy
;

309 
	mbackög_°‹e
;

310 
	mbackög_∂™es
;

311 
	mbackög_pixñ
;

312 
Boﬁ
 
	mßve_undî
;

313 
	mevít_mask
;

314 
	mdo_nŸ_¥›ag©e_mask
;

315 
Boﬁ
 
	movîride_ªdúe˘
;

316 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

317 
Curs‹
 
	mcurs‹
;

318 } 
	tXSëWödowAâribuãs
;

321 
	mx
, 
	my
;

322 
	mwidth
, 
	mheight
;

323 
	mb‹dî_width
;

324 
	mdïth
;

325 
VisuÆ
 *
	mvisuÆ
;

326 
Wödow
 
	mroŸ
;

327 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

328 
	mc_˛ass
;

330 
	m˛ass
;

332 
	mbô_gøvôy
;

333 
	mwö_gøvôy
;

334 
	mbackög_°‹e
;

335 
	mbackög_∂™es
;

336 
	mbackög_pixñ
;

337 
Boﬁ
 
	mßve_undî
;

338 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

339 
Boﬁ
 
	mm≠_ö°ÆÀd
;

340 
	mm≠_°©e
;

341 
	mÆl_evít_masks
;

342 
	myour_evít_mask
;

343 
	mdo_nŸ_¥›ag©e_mask
;

344 
Boﬁ
 
	movîride_ªdúe˘
;

345 
S¸ìn
 *
	ms¸ìn
;

346 } 
	tXWödowAâribuãs
;

354 
	mÁmûy
;

355 
	mÀngth
;

356 *
	maddªss
;

357 } 
	tXHo°Addªss
;

363 
	mty≥Àngth
;

364 
	mvÆuñígth
;

365 *
	mty≥
;

366 *
	mvÆue
;

367 } 
	tXSîvîI¡î¥ëedAddªss
;

372 
	s_XImage
 {

373 
	mwidth
, 
	mheight
;

374 
	mxoff£t
;

375 
	mf‹m©
;

376 *
	md©a
;

377 
	mbyã_‹dî
;

378 
	mbôm≠_unô
;

379 
	mbôm≠_bô_‹dî
;

380 
	mbôm≠_∑d
;

381 
	mdïth
;

382 
	mbyãs_≥r_löe
;

383 
	mbôs_≥r_pixñ
;

384 
	mªd_mask
;

385 
	mgªí_mask
;

386 
	mblue_mask
;

387 
XPoöãr
 
	mobd©a
;

388 
	sfuncs
 {

389 
	m_XImage
 *(*
	m¸óã_image
)(

390 
	m_XDi•œy
* ,

391 
	mVisuÆ
* ,

400 (*
	mde°roy_image
Ë(
	m_XImage
 *);

401 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

402 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

403 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

404 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

405 } 
	mf
;

406 } 
	tXImage
;

412 
	mx
, 
	my
;

413 
	mwidth
, 
	mheight
;

414 
	mb‹dî_width
;

415 
Wödow
 
	msiblög
;

416 
	m°ack_mode
;

417 } 
	tXWödowCh™ges
;

423 
	mpixñ
;

424 
	mªd
, 
	mgªí
, 
	mblue
;

425 
	mÊags
;

426 
	m∑d
;

427 } 
	tXCﬁ‹
;

435 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

436 } 
	tXSegmít
;

439 
	mx
, 
	my
;

440 } 
	tXPoöt
;

443 
	mx
, 
	my
;

444 
	mwidth
, 
	mheight
;

445 } 
	tXRe˘™gÀ
;

448 
	mx
, 
	my
;

449 
	mwidth
, 
	mheight
;

450 
	m™gÀ1
, 
	m™gÀ2
;

451 } 
	tXArc
;

457 
	mkey_˛ick_≥r˚¡
;

458 
	mbñl_≥r˚¡
;

459 
	mbñl_pôch
;

460 
	mbñl_duøti⁄
;

461 
	mÀd
;

462 
	mÀd_mode
;

463 
	mkey
;

464 
	mauto_ª≥©_mode
;

465 } 
	tXKeybﬂrdC⁄åﬁ
;

470 
	mkey_˛ick_≥r˚¡
;

471 
	mbñl_≥r˚¡
;

472 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

473 
	mÀd_mask
;

474 
	mglobÆ_auto_ª≥©
;

475 
	mauto_ª≥©s
[32];

476 } 
	tXKeybﬂrdSèã
;

481 
Time
 
	mtime
;

482 
	mx
, 
	my
;

483 } 
	tXTimeCo‹d
;

488 
	mmax_key≥rmod
;

489 
KeyCode
 *
	mmodifõrm≠
;

490 } 
	tXModifõrKeym≠
;

498 #i‚de‡
XLIB_ILLEGAL_ACCESS


499 
_XDi•œy
 
	tDi•œy
;

502 
	g_XPriv©e
;

503 
	g_XrmHashBuckëRec
;

506 #ifde‡
XLIB_ILLEGAL_ACCESS


507 
	t_XDi•œy


510 
XExtD©a
 *
	gext_d©a
;

511 
_XPriv©e
 *
	g¥iv©e1
;

512 
	gfd
;

513 
	g¥iv©e2
;

514 
	g¥Ÿo_maj‹_vîsi⁄
;

515 
	g¥Ÿo_mö‹_vîsi⁄
;

516 *
	gvíd‹
;

517 
XID
 
	g¥iv©e3
;

518 
XID
 
	g¥iv©e4
;

519 
XID
 
	g¥iv©e5
;

520 
	g¥iv©e6
;

521 
XID
 (*
ªsour˚_Æloc
)(

522 
	g_XDi•œy
*

524 
	gbyã_‹dî
;

525 
	gbôm≠_unô
;

526 
	gbôm≠_∑d
;

527 
	gbôm≠_bô_‹dî
;

528 
	gnf‹m©s
;

529 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

530 
	g¥iv©e8
;

531 
	gªÀa£
;

532 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

533 
	gqÀn
;

534 
	gœ°_ªque°_ªad
;

535 
	gªque°
;

536 
XPoöãr
 
	g¥iv©e11
;

537 
XPoöãr
 
	g¥iv©e12
;

538 
XPoöãr
 
	g¥iv©e13
;

539 
XPoöãr
 
	g¥iv©e14
;

540 
	gmax_ªque°_size
;

541 
_XrmHashBuckëRec
 *
	gdb
;

542 (*
	g¥iv©e15
)(

543 
	g_XDi•œy
*

545 *
	gdi•œy_«me
;

546 
	gdeÁu…_s¸ìn
;

547 
	gns¸ìns
;

548 
S¸ìn
 *
	gs¸ìns
;

549 
	gmŸi⁄_buf„r
;

550 
	g¥iv©e16
;

551 
	gmö_keycode
;

552 
	gmax_keycode
;

553 
XPoöãr
 
	g¥iv©e17
;

554 
XPoöãr
 
	g¥iv©e18
;

555 
	g¥iv©e19
;

556 *
	gxdeÁu…s
;

559 #ifde‡
	tXLIB_ILLEGAL_ACCESS


560 
	tDi•œy
,

562 *
	t_XPrivDi•œy
;

564 #unde‡
_XEVENT_


565 #i‚de‡
_XEVENT_


570 
	mty≥
;

571 
	m£rül
;

572 
Boﬁ
 
	m£nd_evít
;

573 
Di•œy
 *
	mdi•œy
;

574 
Wödow
 
	mwödow
;

575 
Wödow
 
	mroŸ
;

576 
Wödow
 
	msubwödow
;

577 
Time
 
	mtime
;

578 
	mx
, 
	my
;

579 
	mx_roŸ
, 
	my_roŸ
;

580 
	m°©e
;

581 
	mkeycode
;

582 
Boﬁ
 
	mßme_s¸ìn
;

583 } 
	tXKeyEvít
;

584 
XKeyEvít
 
	tXKeyPªs£dEvít
;

585 
XKeyEvít
 
	tXKeyRñó£dEvít
;

588 
	mty≥
;

589 
	m£rül
;

590 
Boﬁ
 
	m£nd_evít
;

591 
Di•œy
 *
	mdi•œy
;

592 
Wödow
 
	mwödow
;

593 
Wödow
 
	mroŸ
;

594 
Wödow
 
	msubwödow
;

595 
Time
 
	mtime
;

596 
	mx
, 
	my
;

597 
	mx_roŸ
, 
	my_roŸ
;

598 
	m°©e
;

599 
	mbuâ⁄
;

600 
Boﬁ
 
	mßme_s¸ìn
;

601 } 
	tXBuâ⁄Evít
;

602 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

603 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

606 
	mty≥
;

607 
	m£rül
;

608 
Boﬁ
 
	m£nd_evít
;

609 
Di•œy
 *
	mdi•œy
;

610 
Wödow
 
	mwödow
;

611 
Wödow
 
	mroŸ
;

612 
Wödow
 
	msubwödow
;

613 
Time
 
	mtime
;

614 
	mx
, 
	my
;

615 
	mx_roŸ
, 
	my_roŸ
;

616 
	m°©e
;

617 
	mis_höt
;

618 
Boﬁ
 
	mßme_s¸ìn
;

619 } 
	tXMŸi⁄Evít
;

620 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

623 
	mty≥
;

624 
	m£rül
;

625 
Boﬁ
 
	m£nd_evít
;

626 
Di•œy
 *
	mdi•œy
;

627 
Wödow
 
	mwödow
;

628 
Wödow
 
	mroŸ
;

629 
Wödow
 
	msubwödow
;

630 
Time
 
	mtime
;

631 
	mx
, 
	my
;

632 
	mx_roŸ
, 
	my_roŸ
;

633 
	mmode
;

634 
	mdëaû
;

639 
Boﬁ
 
	mßme_s¸ìn
;

640 
Boﬁ
 
	mfocus
;

641 
	m°©e
;

642 } 
	tXCrossögEvít
;

643 
XCrossögEvít
 
	tXE¡îWödowEvít
;

644 
XCrossögEvít
 
	tXLóveWödowEvít
;

647 
	mty≥
;

648 
	m£rül
;

649 
Boﬁ
 
	m£nd_evít
;

650 
Di•œy
 *
	mdi•œy
;

651 
Wödow
 
	mwödow
;

652 
	mmode
;

654 
	mdëaû
;

660 } 
	tXFocusCh™geEvít
;

661 
XFocusCh™geEvít
 
	tXFocusInEvít
;

662 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

666 
	mty≥
;

667 
	m£rül
;

668 
Boﬁ
 
	m£nd_evít
;

669 
Di•œy
 *
	mdi•œy
;

670 
Wödow
 
	mwödow
;

671 
	mkey_ve˘‹
[32];

672 } 
	tXKeym≠Evít
;

675 
	mty≥
;

676 
	m£rül
;

677 
Boﬁ
 
	m£nd_evít
;

678 
Di•œy
 *
	mdi•œy
;

679 
Wödow
 
	mwödow
;

680 
	mx
, 
	my
;

681 
	mwidth
, 
	mheight
;

682 
	mcou¡
;

683 } 
	tXExpo£Evít
;

686 
	mty≥
;

687 
	m£rül
;

688 
Boﬁ
 
	m£nd_evít
;

689 
Di•œy
 *
	mdi•œy
;

690 
DøwabÀ
 
	mdøwabÀ
;

691 
	mx
, 
	my
;

692 
	mwidth
, 
	mheight
;

693 
	mcou¡
;

694 
	mmaj‹_code
;

695 
	mmö‹_code
;

696 } 
	tXGøphicsExpo£Evít
;

699 
	mty≥
;

700 
	m£rül
;

701 
Boﬁ
 
	m£nd_evít
;

702 
Di•œy
 *
	mdi•œy
;

703 
DøwabÀ
 
	mdøwabÀ
;

704 
	mmaj‹_code
;

705 
	mmö‹_code
;

706 } 
	tXNoExpo£Evít
;

709 
	mty≥
;

710 
	m£rül
;

711 
Boﬁ
 
	m£nd_evít
;

712 
Di•œy
 *
	mdi•œy
;

713 
Wödow
 
	mwödow
;

714 
	m°©e
;

715 } 
	tXVisibûôyEvít
;

718 
	mty≥
;

719 
	m£rül
;

720 
Boﬁ
 
	m£nd_evít
;

721 
Di•œy
 *
	mdi•œy
;

722 
Wödow
 
	m∑ª¡
;

723 
Wödow
 
	mwödow
;

724 
	mx
, 
	my
;

725 
	mwidth
, 
	mheight
;

726 
	mb‹dî_width
;

727 
Boﬁ
 
	movîride_ªdúe˘
;

728 } 
	tXCª©eWödowEvít
;

731 
	mty≥
;

732 
	m£rül
;

733 
Boﬁ
 
	m£nd_evít
;

734 
Di•œy
 *
	mdi•œy
;

735 
Wödow
 
	mevít
;

736 
Wödow
 
	mwödow
;

737 } 
	tXDe°royWödowEvít
;

740 
	mty≥
;

741 
	m£rül
;

742 
Boﬁ
 
	m£nd_evít
;

743 
Di•œy
 *
	mdi•œy
;

744 
Wödow
 
	mevít
;

745 
Wödow
 
	mwödow
;

746 
Boﬁ
 
	m‰om_c⁄figuª
;

747 } 
	tXUnm≠Evít
;

750 
	mty≥
;

751 
	m£rül
;

752 
Boﬁ
 
	m£nd_evít
;

753 
Di•œy
 *
	mdi•œy
;

754 
Wödow
 
	mevít
;

755 
Wödow
 
	mwödow
;

756 
Boﬁ
 
	movîride_ªdúe˘
;

757 } 
	tXM≠Evít
;

760 
	mty≥
;

761 
	m£rül
;

762 
Boﬁ
 
	m£nd_evít
;

763 
Di•œy
 *
	mdi•œy
;

764 
Wödow
 
	m∑ª¡
;

765 
Wödow
 
	mwödow
;

766 } 
	tXM≠Reque°Evít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
Wödow
 
	m∑ª¡
;

776 
	mx
, 
	my
;

777 
Boﬁ
 
	movîride_ªdúe˘
;

778 } 
	tXRï¨ítEvít
;

781 
	mty≥
;

782 
	m£rül
;

783 
Boﬁ
 
	m£nd_evít
;

784 
Di•œy
 *
	mdi•œy
;

785 
Wödow
 
	mevít
;

786 
Wödow
 
	mwödow
;

787 
	mx
, 
	my
;

788 
	mwidth
, 
	mheight
;

789 
	mb‹dî_width
;

790 
Wödow
 
	mabove
;

791 
Boﬁ
 
	movîride_ªdúe˘
;

792 } 
	tXC⁄figuªEvít
;

795 
	mty≥
;

796 
	m£rül
;

797 
Boﬁ
 
	m£nd_evít
;

798 
Di•œy
 *
	mdi•œy
;

799 
Wödow
 
	mevít
;

800 
Wödow
 
	mwödow
;

801 
	mx
, 
	my
;

802 } 
	tXGøvôyEvít
;

805 
	mty≥
;

806 
	m£rül
;

807 
Boﬁ
 
	m£nd_evít
;

808 
Di•œy
 *
	mdi•œy
;

809 
Wödow
 
	mwödow
;

810 
	mwidth
, 
	mheight
;

811 } 
	tXResizeReque°Evít
;

814 
	mty≥
;

815 
	m£rül
;

816 
Boﬁ
 
	m£nd_evít
;

817 
Di•œy
 *
	mdi•œy
;

818 
Wödow
 
	m∑ª¡
;

819 
Wödow
 
	mwödow
;

820 
	mx
, 
	my
;

821 
	mwidth
, 
	mheight
;

822 
	mb‹dî_width
;

823 
Wödow
 
	mabove
;

824 
	mdëaû
;

825 
	mvÆue_mask
;

826 } 
	tXC⁄figuªReque°Evít
;

829 
	mty≥
;

830 
	m£rül
;

831 
Boﬁ
 
	m£nd_evít
;

832 
Di•œy
 *
	mdi•œy
;

833 
Wödow
 
	mevít
;

834 
Wödow
 
	mwödow
;

835 
	m∂a˚
;

836 } 
	tXCúcuœãEvít
;

839 
	mty≥
;

840 
	m£rül
;

841 
Boﬁ
 
	m£nd_evít
;

842 
Di•œy
 *
	mdi•œy
;

843 
Wödow
 
	m∑ª¡
;

844 
Wödow
 
	mwödow
;

845 
	m∂a˚
;

846 } 
	tXCúcuœãReque°Evít
;

849 
	mty≥
;

850 
	m£rül
;

851 
Boﬁ
 
	m£nd_evít
;

852 
Di•œy
 *
	mdi•œy
;

853 
Wödow
 
	mwödow
;

854 
Atom
 
	m©om
;

855 
Time
 
	mtime
;

856 
	m°©e
;

857 } 
	tXPr›îtyEvít
;

860 
	mty≥
;

861 
	m£rül
;

862 
Boﬁ
 
	m£nd_evít
;

863 
Di•œy
 *
	mdi•œy
;

864 
Wödow
 
	mwödow
;

865 
Atom
 
	m£À˘i⁄
;

866 
Time
 
	mtime
;

867 } 
	tXSñe˘i⁄CÀ¨Evít
;

870 
	mty≥
;

871 
	m£rül
;

872 
Boﬁ
 
	m£nd_evít
;

873 
Di•œy
 *
	mdi•œy
;

874 
Wödow
 
	mow√r
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Reque°Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mªque°‹
;

888 
Atom
 
	m£À˘i⁄
;

889 
Atom
 
	mèrgë
;

890 
Atom
 
	m¥›îty
;

891 
Time
 
	mtime
;

892 } 
	tXSñe˘i⁄Evít
;

895 
	mty≥
;

896 
	m£rül
;

897 
Boﬁ
 
	m£nd_evít
;

898 
Di•œy
 *
	mdi•œy
;

899 
Wödow
 
	mwödow
;

900 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

901 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

902 
Boﬁ
 
	mc_√w
;

904 
Boﬁ
 
	m√w
;

906 
	m°©e
;

907 } 
	tXCﬁ‹m≠Evít
;

910 
	mty≥
;

911 
	m£rül
;

912 
Boﬁ
 
	m£nd_evít
;

913 
Di•œy
 *
	mdi•œy
;

914 
Wödow
 
	mwödow
;

915 
Atom
 
	mmesßge_ty≥
;

916 
	mf‹m©
;

918 
	mb
[20];

919 
	ms
[10];

920 
	ml
[5];

921 } 
	md©a
;

922 } 
	tXClõ¡MesßgeEvít
;

925 
	mty≥
;

926 
	m£rül
;

927 
Boﬁ
 
	m£nd_evít
;

928 
Di•œy
 *
	mdi•œy
;

929 
Wödow
 
	mwödow
;

930 
	mªque°
;

932 
	mfú°_keycode
;

933 
	mcou¡
;

934 } 
	tXM≠pögEvít
;

937 
	mty≥
;

938 
Di•œy
 *
	mdi•œy
;

939 
XID
 
	mªsour˚id
;

940 
	m£rül
;

941 
	mîr‹_code
;

942 
	mªque°_code
;

943 
	mmö‹_code
;

944 } 
	tXEº‹Evít
;

947 
	mty≥
;

948 
	m£rül
;

949 
Boﬁ
 
	m£nd_evít
;

950 
Di•œy
 *
	mdi•œy
;

951 
Wödow
 
	mwödow
;

952 } 
	tXAnyEvít
;

962 
	mty≥
;

963 
	m£rül
;

964 
Boﬁ
 
	m£nd_evít
;

965 
Di•œy
 *
	mdi•œy
;

966 
	mexãnsi⁄
;

967 
	mevty≥
;

968 } 
	tXGíîicEvít
;

971 
	mty≥
;

972 
	m£rül
;

973 
Boﬁ
 
	m£nd_evít
;

974 
Di•œy
 *
	mdi•œy
;

975 
	mexãnsi⁄
;

976 
	mevty≥
;

977 
	mcookõ
;

978 *
	md©a
;

979 } 
	tXGíîicEvítCookõ
;

985 
	u_XEvít
 {

986 
	mty≥
;

987 
XAnyEvít
 
	mx™y
;

988 
XKeyEvít
 
	mxkey
;

989 
XBuâ⁄Evít
 
	mxbuâ⁄
;

990 
XMŸi⁄Evít
 
	mxmŸi⁄
;

991 
XCrossögEvít
 
	mx¸ossög
;

992 
XFocusCh™geEvít
 
	mxfocus
;

993 
XExpo£Evít
 
	mxexpo£
;

994 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

995 
XNoExpo£Evít
 
	mxn€xpo£
;

996 
XVisibûôyEvít
 
	mxvisibûôy
;

997 
XCª©eWödowEvít
 
	mx¸óãwödow
;

998 
XDe°royWödowEvít
 
	mxde°roywödow
;

999 
XUnm≠Evít
 
	mxunm≠
;

1000 
XM≠Evít
 
	mxm≠
;

1001 
XM≠Reque°Evít
 
	mxm≠ªque°
;

1002 
XRï¨ítEvít
 
	mxª∑ª¡
;

1003 
XC⁄figuªEvít
 
	mxc⁄figuª
;

1004 
XGøvôyEvít
 
	mxgøvôy
;

1005 
XResizeReque°Evít
 
	mxªsizîeque°
;

1006 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

1007 
XCúcuœãEvít
 
	mxcúcuœã
;

1008 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

1009 
XPr›îtyEvít
 
	mx¥›îty
;

1010 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

1011 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1012 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1013 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1014 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1015 
XM≠pögEvít
 
	mxm≠pög
;

1016 
XEº‹Evít
 
	mxîr‹
;

1017 
XKeym≠Evít
 
	mxkeym≠
;

1018 
XGíîicEvít
 
	mxgíîic
;

1019 
XGíîicEvítCookõ
 
	mxcookõ
;

1020 
	m∑d
[24];

1021 } 
	tXEvít
;

1024 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1030 
	mlbórög
;

1031 
	mrbórög
;

1032 
	mwidth
;

1033 
	mas˚¡
;

1034 
	mdes˚¡
;

1035 
	m©åibuãs
;

1036 } 
	tXCh¨Såu˘
;

1043 
Atom
 
	m«me
;

1044 
	mˇrd32
;

1045 } 
	tXF⁄tPr›
;

1048 
XExtD©a
 *
	mext_d©a
;

1049 
F⁄t
 
	mfid
;

1050 
	mdúe˘i⁄
;

1051 
	mmö_ch¨_‹_byã2
;

1052 
	mmax_ch¨_‹_byã2
;

1053 
	mmö_byã1
;

1054 
	mmax_byã1
;

1055 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1056 
	mdeÁu…_ch¨
;

1057 
	mn_¥›îtõs
;

1058 
XF⁄tPr›
 *
	m¥›îtõs
;

1059 
XCh¨Såu˘
 
	mmö_bounds
;

1060 
XCh¨Såu˘
 
	mmax_bounds
;

1061 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1062 
	mas˚¡
;

1063 
	mdes˚¡
;

1064 } 
	tXF⁄tSåu˘
;

1070 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm
;

1077 
	mbyã1
;

1078 
	mbyã2
;

1079 } 
	tXCh¨2b
;

1082 
XCh¨2b
 *
	mch¨s
;

1083 
	mnch¨s
;

1084 
	mdñè
;

1085 
F⁄t
 
	mf⁄t
;

1086 } 
	tXTextIãm16
;

1089 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1090 
GC
 
	mgc
;

1091 
VisuÆ
 *
	mvisuÆ
;

1092 
S¸ìn
 *
	ms¸ìn
;

1093 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1094 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1097 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1098 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1099 } 
	tXF⁄tSëExã¡s
;

1105 
_XOM
 *
	tXOM
;

1106 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1109 *
	mch¨s
;

1110 
	mnch¨s
;

1111 
	mdñè
;

1112 
XF⁄tSë
 
	mf⁄t_£t
;

1113 } 
	tXmbTextIãm
;

1116 
wch¨_t
 *
	mch¨s
;

1117 
	mnch¨s
;

1118 
	mdñè
;

1119 
XF⁄tSë
 
	mf⁄t_£t
;

1120 } 
	tXwcTextIãm
;

1122 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1123 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1124 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1125 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1126 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1127 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1128 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1129 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1130 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1131 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1134 
	mch¨£t_cou¡
;

1135 **
	mch¨£t_li°
;

1136 } 
	tXOMCh¨SëLi°
;

1139 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1140 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1141 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1142 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1143 
	mXOMOrõ¡©i⁄_C⁄ãxt


1144 } 
	tXOrõ¡©i⁄
;

1147 
	mnum_‹õ¡©i⁄
;

1148 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1149 } 
	tXOMOrõ¡©i⁄
;

1152 
	mnum_f⁄t
;

1153 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1154 **
	mf⁄t_«me_li°
;

1155 } 
	tXOMF⁄tInfo
;

1157 
_XIM
 *
	tXIM
;

1158 
_XIC
 *
	tXIC
;

1160 (*
	tXIMProc
)(

1161 
	tXIM
,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	$Boﬁ
 (*
	tXICProc
)(

1167 
	tXIC
,

1168 
	tXPoöãr
,

1169 
	tXPoöãr


1172 (*
	tXIDProc
)(

1173 
	tDi•œy
*,

1174 
	tXPoöãr
,

1175 
	tXPoöãr


1178 
	tXIMStyÀ
;

1181 
cou¡_°yÀs
;

1182 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1183 } 
	tXIMStyÀs
;

1185 
	#XIMPªedôAªa
 0x0001L

	)

1186 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1187 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1188 
	#XIMPªedôNŸhög
 0x0008L

	)

1189 
	#XIMPªedôN⁄e
 0x0010L

	)

1190 
	#XIMSètusAªa
 0x0100L

	)

1191 
	#XIMSètusCÆlbacks
 0x0200L

	)

1192 
	#XIMSètusNŸhög
 0x0400L

	)

1193 
	#XIMSètusN⁄e
 0x0800L

	)

1195 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1196 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1197 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1198 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1199 
	#XNFocusWödow
 "focusWödow"

	)

1200 
	#XNResour˚Name
 "ªsour˚Name"

	)

1201 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1202 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1203 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1204 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1205 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1206 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1207 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1208 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1209 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1210 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1211 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1212 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1213 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1214 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1215 
	#XNAªa
 "¨ó"

	)

1216 
	#XNAªaNìded
 "¨óNìded"

	)

1217 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1218 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1219 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1220 
	#XNF‹eground
 "f‹eground"

	)

1221 
	#XNBackground
 "background"

	)

1222 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1223 
	#XNF⁄tSë
 "f⁄tSë"

	)

1224 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1225 
	#XNCurs‹
 "curs‹"

	)

1227 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1228 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1229 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1230 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1231 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1232 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1233 
	#XNRe£tSèã
 "ª£tSèã"

	)

1234 
	#XNHŸKey
 "hŸKey"

	)

1235 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1236 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1237 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1239 
	#XBuf„rOvîÊow
 -1

	)

1240 
	#XLookupN⁄e
 1

	)

1241 
	#XLookupCh¨s
 2

	)

1242 
	#XLookupKeySym
 3

	)

1243 
	#XLookupBŸh
 4

	)

1245 *
	tXVaNe°edLi°
;

1248 
XPoöãr
 
˛õ¡_d©a
;

1249 
XIMProc
 
ˇŒback
;

1250 } 
	tXIMCÆlback
;

1253 
XPoöãr
 
˛õ¡_d©a
;

1254 
XICProc
 
ˇŒback
;

1255 } 
	tXICCÆlback
;

1257 
	tXIMFìdback
;

1259 
	#XIMRevî£
 1L

	)

1260 
	#XIMUndîlöe
 (1L<<1)

	)

1261 
	#XIMHighlight
 (1L<<2)

	)

1262 
	#XIMPrim¨y
 (1L<<5)

	)

1263 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1264 
	#XIMTîtüry
 (1L<<7)

	)

1265 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1266 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1267 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1269 
	s_XIMText
 {

1270 
Àngth
;

1271 
XIMFìdback
 *
„edback
;

1272 
Boﬁ
 
ícodög_is_wch¨
;

1274 *
mu…i_byã
;

1275 
wch¨_t
 *
wide_ch¨
;

1276 } 
°rög
;

1277 } 
	tXIMText
;

1279 
	tXIMPªedôSèã
;

1281 
	#XIMPªedôUnKnown
 0L

	)

1282 
	#XIMPªedôE«bÀ
 1L

	)

1283 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1285 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1286 
XIMPªedôSèã
 
°©e
;

1287 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1289 
	tXIMRe£tSèã
;

1291 
	#XIMInôülSèã
 1L

	)

1292 
	#XIMPª£rveSèã
 (1L<<1)

	)

1294 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1296 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1297 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1298 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1299 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1300 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1301 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1303 
	s_XIMSåögC⁄vîsi⁄Text
 {

1304 
Àngth
;

1305 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1306 
Boﬁ
 
ícodög_is_wch¨
;

1308 *
mbs
;

1309 
wch¨_t
 *
wcs
;

1310 } 
°rög
;

1311 } 
	tXIMSåögC⁄vîsi⁄Text
;

1313 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1315 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1317 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1318 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1319 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1320 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1322 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1324 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1325 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1328 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1329 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1330 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1331 
XIMNextLöe
, 
XIMPªviousLöe
,

1332 
XIMLöeSèπ
, 
XIMLöeEnd
,

1333 
XIMAbsﬁuãPosôi⁄
,

1334 
XIMD⁄tCh™ge


1335 } 
	tXIMC¨ëDúe˘i⁄
;

1337 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1338 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1339 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1340 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1341 
Á˘‹
;

1342 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1343 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1345 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1346 
ˇªt
;

1347 
chg_fú°
;

1348 
chg_Àngth
;

1349 
XIMText
 *
ãxt
;

1350 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1353 
XIMIsInvisibÀ
,

1354 
XIMIsPrim¨y
,

1355 
XIMIsSec⁄d¨y


1356 } 
	tXIMC¨ëStyÀ
;

1358 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1359 
posôi⁄
;

1360 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1361 
XIMC¨ëStyÀ
 
°yÀ
;

1362 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1365 
XIMTextTy≥
,

1366 
XIMBôm≠Ty≥


1367 } 
	tXIMSètusD©aTy≥
;

1369 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1370 
XIMSètusD©aTy≥
 
ty≥
;

1372 
XIMText
 *
ãxt
;

1373 
Pixm≠
 
bôm≠
;

1374 } 
d©a
;

1375 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1377 
	s_XIMHŸKeyTriggî
 {

1378 
KeySym
 
keysym
;

1379 
modifõr
;

1380 
modifõr_mask
;

1381 } 
	tXIMHŸKeyTriggî
;

1383 
	s_XIMHŸKeyTriggîs
 {

1384 
num_hŸ_key
;

1385 
XIMHŸKeyTriggî
 *
key
;

1386 } 
	tXIMHŸKeyTriggîs
;

1388 
	tXIMHŸKeySèã
;

1390 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1391 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1394 
cou¡_vÆues
;

1395 **
suµ‹ãd_vÆues
;

1396 } 
	tXIMVÆuesLi°
;

1398 
_XFUNCPROTOBEGIN


1400 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1401 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1404 
_Xdebug
;

1406 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1407 
Di•œy
* ,

1408 
_Xc⁄°
 *

1411 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1412 
Di•œy
* ,

1413 
XID


1417 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1418 
Di•œy
* ,

1419 
Wödow
 ,

1420 
Time
 ,

1421 
Time
 ,

1425 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1426 
XModifõrKeym≠
* ,

1427 #i‡
NìdWidePrŸŸy≥s


1430 
KeyCode
 ,

1435 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1436 
Di•œy
*

1439 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1440 
XModifõrKeym≠
* ,

1441 #i‡
NìdWidePrŸŸy≥s


1444 
KeyCode
 ,

1449 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1453 
XImage
 *
	`XCª©eImage
(

1454 
Di•œy
* ,

1455 
VisuÆ
* ,

1465 
Sètus
 
	`XInôImage
(

1466 
XImage
*

1468 
XImage
 *
	`XGëImage
(

1469 
Di•œy
* ,

1470 
DøwabÀ
 ,

1478 
XImage
 *
	`XGëSubImage
(

1479 
Di•œy
* ,

1480 
DøwabÀ
 ,

1487 
XImage
* ,

1495 
Di•œy
 *
	`XO≥nDi•œy
(

1496 
_Xc⁄°
 *

1499 
	`XrmInôülize
(

1503 *
	`XFëchByãs
(

1504 
Di•œy
* ,

1507 *
	`XFëchBuf„r
(

1508 
Di•œy
* ,

1512 *
	`XGëAtomName
(

1513 
Di•œy
* ,

1514 
Atom


1516 
Sètus
 
	`XGëAtomNames
(

1517 
Di•œy
* ,

1518 
Atom
* ,

1522 *
	`XGëDeÁu…
(

1523 
Di•œy
* ,

1524 
_Xc⁄°
 * ,

1525 
_Xc⁄°
 *

1527 *
	`XDi•œyName
(

1528 
_Xc⁄°
 *

1530 *
	`XKeysymToSåög
(

1531 
KeySym


1534 (*
	$XSynchr⁄ize
(

1535 
Di•œy
* ,

1536 
Boﬁ


1538 
Di•œy
*

1540 (*
	`XSëA·îFun˘i⁄
(

1541 
Di•œy
* ,

1543 
Di•œy
*

1546 
Di•œy
*

1548 
Atom
 
	`XI¡înAtom
(

1549 
Di•œy
* ,

1550 
_Xc⁄°
 * ,

1551 
Boﬁ


1553 
Sètus
 
	`XI¡înAtoms
(

1554 
Di•œy
* ,

1557 
Boﬁ
 ,

1558 
Atom
*

1560 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1561 
Di•œy
* ,

1562 
Cﬁ‹m≠


1564 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1565 
Di•œy
* ,

1566 
Wödow
 ,

1567 
VisuÆ
* ,

1570 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1571 
Di•œy
* ,

1572 
Pixm≠
 ,

1573 
Pixm≠
 ,

1574 
XCﬁ‹
* ,

1575 
XCﬁ‹
* ,

1579 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1580 
Di•œy
* ,

1581 
F⁄t
 ,

1582 
F⁄t
 ,

1585 
XCﬁ‹
 
_Xc⁄°
 * ,

1586 
XCﬁ‹
 
_Xc⁄°
 *

1588 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1589 
Di•œy
* ,

1592 
F⁄t
 
	`XLﬂdF⁄t
(

1593 
Di•œy
* ,

1594 
_Xc⁄°
 *

1596 
GC
 
	`XCª©eGC
(

1597 
Di•œy
* ,

1598 
DøwabÀ
 ,

1600 
XGCVÆues
*

1602 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1603 
GC


1605 
	`XFlushGC
(

1606 
Di•œy
* ,

1607 
GC


1609 
Pixm≠
 
	`XCª©ePixm≠
(

1610 
Di•œy
* ,

1611 
DøwabÀ
 ,

1616 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1617 
Di•œy
* ,

1618 
DøwabÀ
 ,

1619 
_Xc⁄°
 * ,

1623 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1624 
Di•œy
* ,

1625 
DøwabÀ
 ,

1633 
Wödow
 
	`XCª©eSim∂eWödow
(

1634 
Di•œy
* ,

1635 
Wödow
 ,

1644 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1645 
Di•œy
* ,

1646 
Atom


1648 
Wödow
 
	`XCª©eWödow
(

1649 
Di•œy
* ,

1650 
Wödow
 ,

1658 
VisuÆ
* ,

1660 
XSëWödowAâribuãs
*

1662 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1663 
Di•œy
* ,

1664 
Wödow
 ,

1667 **
	`XLi°F⁄ts
(

1668 
Di•œy
* ,

1669 
_Xc⁄°
 * ,

1673 **
	`XLi°F⁄tsWôhInfo
(

1674 
Di•œy
* ,

1675 
_Xc⁄°
 * ,

1678 
XF⁄tSåu˘
**

1680 **
	`XGëF⁄tP©h
(

1681 
Di•œy
* ,

1684 **
	`XLi°Exãnsi⁄s
(

1685 
Di•œy
* ,

1688 
Atom
 *
	`XLi°Pr›îtõs
(

1689 
Di•œy
* ,

1690 
Wödow
 ,

1693 
XHo°Addªss
 *
	`XLi°Ho°s
(

1694 
Di•œy
* ,

1696 
Boﬁ
*

1698 
_X_DEPRECATED


1699 
KeySym
 
	`XKeycodeToKeysym
(

1700 
Di•œy
* ,

1701 #i‡
NìdWidePrŸŸy≥s


1704 
KeyCode
 ,

1708 
KeySym
 
	`XLookupKeysym
(

1709 
XKeyEvít
* ,

1712 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1713 
Di•œy
* ,

1714 #i‡
NìdWidePrŸŸy≥s


1717 
KeyCode
 ,

1722 
KeySym
 
	`XSåögToKeysym
(

1723 
_Xc⁄°
 *

1725 
	`XMaxReque°Size
(

1726 
Di•œy
*

1728 
	`XExãndedMaxReque°Size
(

1729 
Di•œy
*

1731 *
	`XResour˚M™agîSåög
(

1732 
Di•œy
*

1734 *
	`XS¸ìnResour˚Såög
(

1735 
S¸ìn
*

1737 
	`XDi•œyMŸi⁄Buf„rSize
(

1738 
Di•œy
*

1740 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1741 
VisuÆ
*

1746 
Sètus
 
	`XInôThªads
(

1750 
	`XLockDi•œy
(

1751 
Di•œy
*

1754 
	`XU∆ockDi•œy
(

1755 
Di•œy
*

1760 
XExtCodes
 *
	`XInôExãnsi⁄
(

1761 
Di•œy
* ,

1762 
_Xc⁄°
 *

1765 
XExtCodes
 *
	`XAddExãnsi⁄
(

1766 
Di•œy
*

1768 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1769 
XExtD©a
** ,

1772 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1773 
XED©aObje˘


1777 
Wödow
 
	`XRoŸWödow
(

1778 
Di•œy
* ,

1781 
Wödow
 
	`XDeÁu…RoŸWödow
(

1782 
Di•œy
*

1784 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1785 
S¸ìn
*

1787 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1788 
Di•œy
* ,

1791 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1792 
S¸ìn
*

1794 
GC
 
	`XDeÁu…GC
(

1795 
Di•œy
* ,

1798 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1799 
S¸ìn
*

1801 
	`XBœckPixñ
(

1802 
Di•œy
* ,

1805 
	`XWhôePixñ
(

1806 
Di•œy
* ,

1809 
	`XAŒPœ√s
(

1812 
	`XBœckPixñOfS¸ìn
(

1813 
S¸ìn
*

1815 
	`XWhôePixñOfS¸ìn
(

1816 
S¸ìn
*

1818 
	`XNextReque°
(

1819 
Di•œy
*

1821 
	`XLa°KnownReque°Pro˚s£d
(

1822 
Di•œy
*

1824 *
	`XSîvîVíd‹
(

1825 
Di•œy
*

1827 *
	`XDi•œySåög
(

1828 
Di•œy
*

1830 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1831 
Di•œy
* ,

1834 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1835 
S¸ìn
*

1837 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1838 
S¸ìn
*

1840 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1841 
Di•œy
* ,

1844 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1845 
Di•œy
*

1847 
	`XEvítMaskOfS¸ìn
(

1848 
S¸ìn
*

1851 
	`XS¸ìnNumbîOfS¸ìn
(

1852 
S¸ìn
*

1855 (*
	tXEº‹H™dÀr
) (

1856 
	tDi•œy
* ,

1857 
	tXEº‹Evít
*

1860 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1861 
XEº‹H™dÀr


1865 (*
	tXIOEº‹H™dÀr
) (

1866 
	tDi•œy
*

1869 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1870 
XIOEº‹H™dÀr


1874 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1875 
Di•œy
* ,

1878 *
	`XLi°Dïths
(

1879 
Di•œy
* ,

1886 
Sètus
 
	`XRec⁄figuªWMWödow
(

1887 
Di•œy
* ,

1888 
Wödow
 ,

1891 
XWödowCh™ges
*

1894 
Sètus
 
	`XGëWMPrŸocﬁs
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1897 
Atom
** ,

1900 
Sètus
 
	`XSëWMPrŸocﬁs
(

1901 
Di•œy
* ,

1902 
Wödow
 ,

1903 
Atom
* ,

1906 
Sètus
 
	`XIc⁄ifyWödow
(

1907 
Di•œy
* ,

1908 
Wödow
 ,

1911 
Sètus
 
	`XWôhdøwWödow
(

1912 
Di•œy
* ,

1913 
Wödow
 ,

1916 
Sètus
 
	`XGëComm™d
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1922 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1923 
Di•œy
* ,

1924 
Wödow
 ,

1925 
Wödow
** ,

1928 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1929 
Di•œy
* ,

1930 
Wödow
 ,

1931 
Wödow
* ,

1934 
	`XFªeSåögLi°
(

1937 
	`XSëTønsõ¡F‹Höt
(

1938 
Di•œy
* ,

1939 
Wödow
 ,

1940 
Wödow


1945 
	`XA˘iv©eS¸ìnSavî
(

1946 
Di•œy
*

1949 
	`XAddHo°
(

1950 
Di•œy
* ,

1951 
XHo°Addªss
*

1954 
	`XAddHo°s
(

1955 
Di•œy
* ,

1956 
XHo°Addªss
* ,

1960 
	`XAddToExãnsi⁄Li°
(

1961 
_XExtD©a
** ,

1962 
XExtD©a
*

1965 
	`XAddToSaveSë
(

1966 
Di•œy
* ,

1967 
Wödow


1970 
Sètus
 
	`XAŒocCﬁ‹
(

1971 
Di•œy
* ,

1972 
Cﬁ‹m≠
 ,

1973 
XCﬁ‹
*

1976 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1977 
Di•œy
* ,

1978 
Cﬁ‹m≠
 ,

1979 
Boﬁ
 ,

1986 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1987 
Di•œy
* ,

1988 
Cﬁ‹m≠
 ,

1989 
Boﬁ
 ,

2000 
Sètus
 
	`XAŒocNamedCﬁ‹
(

2001 
Di•œy
* ,

2002 
Cﬁ‹m≠
 ,

2003 
_Xc⁄°
 * ,

2004 
XCﬁ‹
* ,

2005 
XCﬁ‹
*

2008 
	`XAŒowEvíts
(

2009 
Di•œy
* ,

2011 
Time


2014 
	`XAutoRïótOff
(

2015 
Di•œy
*

2018 
	`XAutoRïótOn
(

2019 
Di•œy
*

2022 
	`XBñl
(

2023 
Di•œy
* ,

2027 
	`XBôm≠BôOrdî
(

2028 
Di•œy
*

2031 
	`XBôm≠Pad
(

2032 
Di•œy
*

2035 
	`XBôm≠Unô
(

2036 
Di•œy
*

2039 
	`XCñlsOfS¸ìn
(

2040 
S¸ìn
*

2043 
	`XCh™geA˘ivePoöãrGøb
(

2044 
Di•œy
* ,

2046 
Curs‹
 ,

2047 
Time


2050 
	`XCh™geGC
(

2051 
Di•œy
* ,

2052 
GC
 ,

2054 
XGCVÆues
*

2057 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2058 
Di•œy
* ,

2060 
XKeybﬂrdC⁄åﬁ
*

2063 
	`XCh™geKeybﬂrdM≠pög
(

2064 
Di•œy
* ,

2067 
KeySym
* ,

2071 
	`XCh™gePoöãrC⁄åﬁ
(

2072 
Di•œy
* ,

2073 
Boﬁ
 ,

2074 
Boﬁ
 ,

2080 
	`XCh™gePr›îty
(

2081 
Di•œy
* ,

2082 
Wödow
 ,

2083 
Atom
 ,

2084 
Atom
 ,

2087 
_Xc⁄°
 * ,

2091 
	`XCh™geSaveSë
(

2092 
Di•œy
* ,

2093 
Wödow
 ,

2097 
	`XCh™geWödowAâribuãs
(

2098 
Di•œy
* ,

2099 
Wödow
 ,

2101 
XSëWödowAâribuãs
*

2104 
Boﬁ
 
	`XCheckIfEvít
(

2105 
Di•œy
* ,

2106 
XEvít
* ,

2107 
	$Boﬁ
 (*) (

2108 
Di•œy
* ,

2109 
XEvít
* ,

2110 
XPoöãr


2112 
XPoöãr


2115 
Boﬁ
 
	`XCheckMaskEvít
(

2116 
Di•œy
* ,

2118 
XEvít
*

2121 
Boﬁ
 
	`XCheckTy≥dEvít
(

2122 
Di•œy
* ,

2124 
XEvít
*

2127 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2128 
Di•œy
* ,

2129 
Wödow
 ,

2131 
XEvít
*

2134 
Boﬁ
 
	`XCheckWödowEvít
(

2135 
Di•œy
* ,

2136 
Wödow
 ,

2138 
XEvít
*

2141 
	`XCúcuœãSubwödows
(

2142 
Di•œy
* ,

2143 
Wödow
 ,

2147 
	`XCúcuœãSubwödowsDown
(

2148 
Di•œy
* ,

2149 
Wödow


2152 
	`XCúcuœãSubwödowsUp
(

2153 
Di•œy
* ,

2154 
Wödow


2157 
	`XCÀ¨Aªa
(

2158 
Di•œy
* ,

2159 
Wödow
 ,

2164 
Boﬁ


2167 
	`XCÀ¨Wödow
(

2168 
Di•œy
* ,

2169 
Wödow


2172 
	`XClo£Di•œy
(

2173 
Di•œy
*

2176 
	`XC⁄figuªWödow
(

2177 
Di•œy
* ,

2178 
Wödow
 ,

2180 
XWödowCh™ges
*

2183 
	`XC⁄√˘i⁄Numbî
(

2184 
Di•œy
*

2187 
	`XC⁄vîtSñe˘i⁄
(

2188 
Di•œy
* ,

2189 
Atom
 ,

2190 
Atom
 ,

2191 
Atom
 ,

2192 
Wödow
 ,

2193 
Time


2196 
	`XC›yAªa
(

2197 
Di•œy
* ,

2198 
DøwabÀ
 ,

2199 
DøwabÀ
 ,

2200 
GC
 ,

2209 
	`XC›yGC
(

2210 
Di•œy
* ,

2211 
GC
 ,

2213 
GC


2216 
	`XC›yPœ√
(

2217 
Di•œy
* ,

2218 
DøwabÀ
 ,

2219 
DøwabÀ
 ,

2220 
GC
 ,

2230 
	`XDeÁu…Dïth
(

2231 
Di•œy
* ,

2235 
	`XDeÁu…DïthOfS¸ìn
(

2236 
S¸ìn
*

2239 
	`XDeÁu…S¸ìn
(

2240 
Di•œy
*

2243 
	`XDeföeCurs‹
(

2244 
Di•œy
* ,

2245 
Wödow
 ,

2246 
Curs‹


2249 
	`XDñëePr›îty
(

2250 
Di•œy
* ,

2251 
Wödow
 ,

2252 
Atom


2255 
	`XDe°royWödow
(

2256 
Di•œy
* ,

2257 
Wödow


2260 
	`XDe°roySubwödows
(

2261 
Di•œy
* ,

2262 
Wödow


2265 
	`XD€sBackögSt‹e
(

2266 
S¸ìn
*

2269 
Boﬁ
 
	`XD€sSaveUndîs
(

2270 
S¸ìn
*

2273 
	`XDißbÀAc˚ssC⁄åﬁ
(

2274 
Di•œy
*

2278 
	`XDi•œyCñls
(

2279 
Di•œy
* ,

2283 
	`XDi•œyHeight
(

2284 
Di•œy
* ,

2288 
	`XDi•œyHeightMM
(

2289 
Di•œy
* ,

2293 
	`XDi•œyKeycodes
(

2294 
Di•œy
* ,

2299 
	`XDi•œyPœ√s
(

2300 
Di•œy
* ,

2304 
	`XDi•œyWidth
(

2305 
Di•œy
* ,

2309 
	`XDi•œyWidthMM
(

2310 
Di•œy
* ,

2314 
	`XDøwArc
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2326 
	`XDøwArcs
(

2327 
Di•œy
* ,

2328 
DøwabÀ
 ,

2329 
GC
 ,

2330 
XArc
* ,

2334 
	`XDøwImageSåög
(

2335 
Di•œy
* ,

2336 
DøwabÀ
 ,

2337 
GC
 ,

2340 
_Xc⁄°
 * ,

2344 
	`XDøwImageSåög16
(

2345 
Di•œy
* ,

2346 
DøwabÀ
 ,

2347 
GC
 ,

2350 
_Xc⁄°
 
XCh¨2b
* ,

2354 
	`XDøwLöe
(

2355 
Di•œy
* ,

2356 
DøwabÀ
 ,

2357 
GC
 ,

2364 
	`XDøwLöes
(

2365 
Di•œy
* ,

2366 
DøwabÀ
 ,

2367 
GC
 ,

2368 
XPoöt
* ,

2373 
	`XDøwPoöt
(

2374 
Di•œy
* ,

2375 
DøwabÀ
 ,

2376 
GC
 ,

2381 
	`XDøwPoöts
(

2382 
Di•œy
* ,

2383 
DøwabÀ
 ,

2384 
GC
 ,

2385 
XPoöt
* ,

2390 
	`XDøwRe˘™gÀ
(

2391 
Di•œy
* ,

2392 
DøwabÀ
 ,

2393 
GC
 ,

2400 
	`XDøwRe˘™gÀs
(

2401 
Di•œy
* ,

2402 
DøwabÀ
 ,

2403 
GC
 ,

2404 
XRe˘™gÀ
* ,

2408 
	`XDøwSegmíts
(

2409 
Di•œy
* ,

2410 
DøwabÀ
 ,

2411 
GC
 ,

2412 
XSegmít
* ,

2416 
	`XDøwSåög
(

2417 
Di•œy
* ,

2418 
DøwabÀ
 ,

2419 
GC
 ,

2422 
_Xc⁄°
 * ,

2426 
	`XDøwSåög16
(

2427 
Di•œy
* ,

2428 
DøwabÀ
 ,

2429 
GC
 ,

2432 
_Xc⁄°
 
XCh¨2b
* ,

2436 
	`XDøwText
(

2437 
Di•œy
* ,

2438 
DøwabÀ
 ,

2439 
GC
 ,

2442 
XTextIãm
* ,

2446 
	`XDøwText16
(

2447 
Di•œy
* ,

2448 
DøwabÀ
 ,

2449 
GC
 ,

2452 
XTextIãm16
* ,

2456 
	`XE«bÀAc˚ssC⁄åﬁ
(

2457 
Di•œy
*

2460 
	`XEvítsQueued
(

2461 
Di•œy
* ,

2465 
Sètus
 
	`XFëchName
(

2466 
Di•œy
* ,

2467 
Wödow
 ,

2471 
	`XFûlArc
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2483 
	`XFûlArcs
(

2484 
Di•œy
* ,

2485 
DøwabÀ
 ,

2486 
GC
 ,

2487 
XArc
* ,

2491 
	`XFûlPﬁyg⁄
(

2492 
Di•œy
* ,

2493 
DøwabÀ
 ,

2494 
GC
 ,

2495 
XPoöt
* ,

2501 
	`XFûlRe˘™gÀ
(

2502 
Di•œy
* ,

2503 
DøwabÀ
 ,

2504 
GC
 ,

2511 
	`XFûlRe˘™gÀs
(

2512 
Di•œy
* ,

2513 
DøwabÀ
 ,

2514 
GC
 ,

2515 
XRe˘™gÀ
* ,

2519 
	`XFlush
(

2520 
Di•œy
*

2523 
	`XF‹˚S¸ìnSavî
(

2524 
Di•œy
* ,

2528 
	`XFªe
(

2532 
	`XFªeCﬁ‹m≠
(

2533 
Di•œy
* ,

2534 
Cﬁ‹m≠


2537 
	`XFªeCﬁ‹s
(

2538 
Di•œy
* ,

2539 
Cﬁ‹m≠
 ,

2545 
	`XFªeCurs‹
(

2546 
Di•œy
* ,

2547 
Curs‹


2550 
	`XFªeExãnsi⁄Li°
(

2554 
	`XFªeF⁄t
(

2555 
Di•œy
* ,

2556 
XF⁄tSåu˘
*

2559 
	`XFªeF⁄tInfo
(

2561 
XF⁄tSåu˘
* ,

2565 
	`XFªeF⁄tNames
(

2569 
	`XFªeF⁄tP©h
(

2573 
	`XFªeGC
(

2574 
Di•œy
* ,

2575 
GC


2578 
	`XFªeModifõrm≠
(

2579 
XModifõrKeym≠
*

2582 
	`XFªePixm≠
(

2583 
Di•œy
* ,

2584 
Pixm≠


2587 
	`XGeomëry
(

2588 
Di•œy
* ,

2590 
_Xc⁄°
 * ,

2591 
_Xc⁄°
 * ,

2603 
	`XGëEº‹D©aba£Text
(

2604 
Di•œy
* ,

2605 
_Xc⁄°
 * ,

2606 
_Xc⁄°
 * ,

2607 
_Xc⁄°
 * ,

2612 
	`XGëEº‹Text
(

2613 
Di•œy
* ,

2619 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2620 
XF⁄tSåu˘
* ,

2621 
Atom
 ,

2625 
Sètus
 
	`XGëGCVÆues
(

2626 
Di•œy
* ,

2627 
GC
 ,

2629 
XGCVÆues
*

2632 
Sètus
 
	`XGëGeomëry
(

2633 
Di•œy
* ,

2634 
DøwabÀ
 ,

2635 
Wödow
* ,

2644 
Sètus
 
	`XGëIc⁄Name
(

2645 
Di•œy
* ,

2646 
Wödow
 ,

2650 
	`XGëI≈utFocus
(

2651 
Di•œy
* ,

2652 
Wödow
* ,

2656 
	`XGëKeybﬂrdC⁄åﬁ
(

2657 
Di•œy
* ,

2658 
XKeybﬂrdSèã
*

2661 
	`XGëPoöãrC⁄åﬁ
(

2662 
Di•œy
* ,

2668 
	`XGëPoöãrM≠pög
(

2669 
Di•œy
* ,

2674 
	`XGëS¸ìnSavî
(

2675 
Di•œy
* ,

2682 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2683 
Di•œy
* ,

2684 
Wödow
 ,

2685 
Wödow
*

2688 
	`XGëWödowPr›îty
(

2689 
Di•œy
* ,

2690 
Wödow
 ,

2691 
Atom
 ,

2694 
Boﬁ
 ,

2695 
Atom
 ,

2696 
Atom
* ,

2703 
Sètus
 
	`XGëWödowAâribuãs
(

2704 
Di•œy
* ,

2705 
Wödow
 ,

2706 
XWödowAâribuãs
*

2709 
	`XGøbBuâ⁄
(

2710 
Di•œy
* ,

2713 
Wödow
 ,

2714 
Boﬁ
 ,

2718 
Wödow
 ,

2719 
Curs‹


2722 
	`XGøbKey
(

2723 
Di•œy
* ,

2726 
Wödow
 ,

2727 
Boﬁ
 ,

2732 
	`XGøbKeybﬂrd
(

2733 
Di•œy
* ,

2734 
Wödow
 ,

2735 
Boﬁ
 ,

2738 
Time


2741 
	`XGøbPoöãr
(

2742 
Di•œy
* ,

2743 
Wödow
 ,

2744 
Boﬁ
 ,

2748 
Wödow
 ,

2749 
Curs‹
 ,

2750 
Time


2753 
	`XGøbSîvî
(

2754 
Di•œy
*

2757 
	`XHeightMMOfS¸ìn
(

2758 
S¸ìn
*

2761 
	`XHeightOfS¸ìn
(

2762 
S¸ìn
*

2765 
	`XIfEvít
(

2766 
Di•œy
* ,

2767 
XEvít
* ,

2768 
	$Boﬁ
 (*) (

2769 
Di•œy
* ,

2770 
XEvít
* ,

2771 
XPoöãr


2773 
XPoöãr


2776 
	`XImageByãOrdî
(

2777 
Di•œy
*

2780 
	`XIn°ÆlCﬁ‹m≠
(

2781 
Di•œy
* ,

2782 
Cﬁ‹m≠


2785 
KeyCode
 
	`XKeysymToKeycode
(

2786 
Di•œy
* ,

2787 
KeySym


2790 
	`XKûlClõ¡
(

2791 
Di•œy
* ,

2792 
XID


2795 
Sètus
 
	`XLookupCﬁ‹
(

2796 
Di•œy
* ,

2797 
Cﬁ‹m≠
 ,

2798 
_Xc⁄°
 * ,

2799 
XCﬁ‹
* ,

2800 
XCﬁ‹
*

2803 
	`XLowîWödow
(

2804 
Di•œy
* ,

2805 
Wödow


2808 
	`XM≠Rai£d
(

2809 
Di•œy
* ,

2810 
Wödow


2813 
	`XM≠Subwödows
(

2814 
Di•œy
* ,

2815 
Wödow


2818 
	`XM≠Wödow
(

2819 
Di•œy
* ,

2820 
Wödow


2823 
	`XMaskEvít
(

2824 
Di•œy
* ,

2826 
XEvít
*

2829 
	`XMaxCm≠sOfS¸ìn
(

2830 
S¸ìn
*

2833 
	`XMöCm≠sOfS¸ìn
(

2834 
S¸ìn
*

2837 
	`XMoveResizeWödow
(

2838 
Di•œy
* ,

2839 
Wödow
 ,

2846 
	`XMoveWödow
(

2847 
Di•œy
* ,

2848 
Wödow
 ,

2853 
	`XNextEvít
(

2854 
Di•œy
* ,

2855 
XEvít
*

2858 
	`XNoOp
(

2859 
Di•œy
*

2862 
Sètus
 
	`XP¨£Cﬁ‹
(

2863 
Di•œy
* ,

2864 
Cﬁ‹m≠
 ,

2865 
_Xc⁄°
 * ,

2866 
XCﬁ‹
*

2869 
	`XP¨£Geomëry
(

2870 
_Xc⁄°
 * ,

2877 
	`XPìkEvít
(

2878 
Di•œy
* ,

2879 
XEvít
*

2882 
	`XPìkIfEvít
(

2883 
Di•œy
* ,

2884 
XEvít
* ,

2885 
	$Boﬁ
 (*) (

2886 
Di•œy
* ,

2887 
XEvít
* ,

2888 
XPoöãr


2890 
XPoöãr


2893 
	`XPídög
(

2894 
Di•œy
*

2897 
	`XPœ√sOfS¸ìn
(

2898 
S¸ìn
*

2901 
	`XPrŸocﬁRevisi⁄
(

2902 
Di•œy
*

2905 
	`XPrŸocﬁVîsi⁄
(

2906 
Di•œy
*

2910 
	`XPutBackEvít
(

2911 
Di•œy
* ,

2912 
XEvít
*

2915 
	`XPutImage
(

2916 
Di•œy
* ,

2917 
DøwabÀ
 ,

2918 
GC
 ,

2919 
XImage
* ,

2928 
	`XQLígth
(

2929 
Di•œy
*

2932 
Sètus
 
	`XQuîyBe°Curs‹
(

2933 
Di•œy
* ,

2934 
DøwabÀ
 ,

2941 
Sètus
 
	`XQuîyBe°Size
(

2942 
Di•œy
* ,

2944 
DøwabÀ
 ,

2951 
Sètus
 
	`XQuîyBe°Stù∂e
(

2952 
Di•œy
* ,

2953 
DøwabÀ
 ,

2960 
Sètus
 
	`XQuîyBe°Tûe
(

2961 
Di•œy
* ,

2962 
DøwabÀ
 ,

2969 
	`XQuîyCﬁ‹
(

2970 
Di•œy
* ,

2971 
Cﬁ‹m≠
 ,

2972 
XCﬁ‹
*

2975 
	`XQuîyCﬁ‹s
(

2976 
Di•œy
* ,

2977 
Cﬁ‹m≠
 ,

2978 
XCﬁ‹
* ,

2982 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2983 
Di•œy
* ,

2984 
_Xc⁄°
 * ,

2990 
	`XQuîyKeym≠
(

2991 
Di•œy
* ,

2995 
Boﬁ
 
	`XQuîyPoöãr
(

2996 
Di•œy
* ,

2997 
Wödow
 ,

2998 
Wödow
* ,

2999 
Wödow
* ,

3007 
	`XQuîyTextExã¡s
(

3008 
Di•œy
* ,

3009 
XID
 ,

3010 
_Xc⁄°
 * ,

3015 
XCh¨Såu˘
*

3018 
	`XQuîyTextExã¡s16
(

3019 
Di•œy
* ,

3020 
XID
 ,

3021 
_Xc⁄°
 
XCh¨2b
* ,

3026 
XCh¨Såu˘
*

3029 
Sètus
 
	`XQuîyTªe
(

3030 
Di•œy
* ,

3031 
Wödow
 ,

3032 
Wödow
* ,

3033 
Wödow
* ,

3034 
Wödow
** ,

3038 
	`XRai£Wödow
(

3039 
Di•œy
* ,

3040 
Wödow


3043 
	`XRódBôm≠Fûe
(

3044 
Di•œy
* ,

3045 
DøwabÀ
 ,

3046 
_Xc⁄°
 * ,

3049 
Pixm≠
* ,

3054 
	`XRódBôm≠FûeD©a
(

3055 
_Xc⁄°
 * ,

3063 
	`XRebödKeysym
(

3064 
Di•œy
* ,

3065 
KeySym
 ,

3066 
KeySym
* ,

3068 
_Xc⁄°
 * ,

3072 
	`XRecﬁ‹Curs‹
(

3073 
Di•œy
* ,

3074 
Curs‹
 ,

3075 
XCﬁ‹
* ,

3076 
XCﬁ‹
*

3079 
	`XRe‰eshKeybﬂrdM≠pög
(

3080 
XM≠pögEvít
*

3083 
	`XRemoveFromSaveSë
(

3084 
Di•œy
* ,

3085 
Wödow


3088 
	`XRemoveHo°
(

3089 
Di•œy
* ,

3090 
XHo°Addªss
*

3093 
	`XRemoveHo°s
(

3094 
Di•œy
* ,

3095 
XHo°Addªss
* ,

3099 
	`XRï¨ítWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3102 
Wödow
 ,

3107 
	`XRe£tS¸ìnSavî
(

3108 
Di•œy
*

3111 
	`XResizeWödow
(

3112 
Di•œy
* ,

3113 
Wödow
 ,

3118 
	`XRe°ackWödows
(

3119 
Di•œy
* ,

3120 
Wödow
* ,

3124 
	`XRŸ©eBuf„rs
(

3125 
Di•œy
* ,

3129 
	`XRŸ©eWödowPr›îtõs
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3132 
Atom
* ,

3137 
	`XS¸ìnCou¡
(

3138 
Di•œy
*

3141 
	`XSñe˘I≈ut
(

3142 
Di•œy
* ,

3143 
Wödow
 ,

3147 
Sètus
 
	`XSídEvít
(

3148 
Di•œy
* ,

3149 
Wödow
 ,

3150 
Boﬁ
 ,

3152 
XEvít
*

3155 
	`XSëAc˚ssC⁄åﬁ
(

3156 
Di•œy
* ,

3160 
	`XSëArcMode
(

3161 
Di•œy
* ,

3162 
GC
 ,

3166 
	`XSëBackground
(

3167 
Di•œy
* ,

3168 
GC
 ,

3172 
	`XSëClùMask
(

3173 
Di•œy
* ,

3174 
GC
 ,

3175 
Pixm≠


3178 
	`XSëClùOrigö
(

3179 
Di•œy
* ,

3180 
GC
 ,

3185 
	`XSëClùRe˘™gÀs
(

3186 
Di•œy
* ,

3187 
GC
 ,

3190 
XRe˘™gÀ
* ,

3195 
	`XSëClo£DownMode
(

3196 
Di•œy
* ,

3200 
	`XSëComm™d
(

3201 
Di•œy
* ,

3202 
Wödow
 ,

3207 
	`XSëDashes
(

3208 
Di•œy
* ,

3209 
GC
 ,

3211 
_Xc⁄°
 * ,

3215 
	`XSëFûlRuÀ
(

3216 
Di•œy
* ,

3217 
GC
 ,

3221 
	`XSëFûlStyÀ
(

3222 
Di•œy
* ,

3223 
GC
 ,

3227 
	`XSëF⁄t
(

3228 
Di•œy
* ,

3229 
GC
 ,

3230 
F⁄t


3233 
	`XSëF⁄tP©h
(

3234 
Di•œy
* ,

3239 
	`XSëF‹eground
(

3240 
Di•œy
* ,

3241 
GC
 ,

3245 
	`XSëFun˘i⁄
(

3246 
Di•œy
* ,

3247 
GC
 ,

3251 
	`XSëGøphicsExposuªs
(

3252 
Di•œy
* ,

3253 
GC
 ,

3254 
Boﬁ


3257 
	`XSëIc⁄Name
(

3258 
Di•œy
* ,

3259 
Wödow
 ,

3260 
_Xc⁄°
 *

3263 
	`XSëI≈utFocus
(

3264 
Di•œy
* ,

3265 
Wödow
 ,

3267 
Time


3270 
	`XSëLöeAâribuãs
(

3271 
Di•œy
* ,

3272 
GC
 ,

3279 
	`XSëModifõrM≠pög
(

3280 
Di•œy
* ,

3281 
XModifõrKeym≠
*

3284 
	`XSëPœ√Mask
(

3285 
Di•œy
* ,

3286 
GC
 ,

3290 
	`XSëPoöãrM≠pög
(

3291 
Di•œy
* ,

3292 
_Xc⁄°
 * ,

3296 
	`XSëS¸ìnSavî
(

3297 
Di•œy
* ,

3304 
	`XSëSñe˘i⁄Ow√r
(

3305 
Di•œy
* ,

3306 
Atom
 ,

3307 
Wödow
 ,

3308 
Time


3311 
	`XSëSèã
(

3312 
Di•œy
* ,

3313 
GC
 ,

3320 
	`XSëStù∂e
(

3321 
Di•œy
* ,

3322 
GC
 ,

3323 
Pixm≠


3326 
	`XSëSubwödowMode
(

3327 
Di•œy
* ,

3328 
GC
 ,

3332 
	`XSëTSOrigö
(

3333 
Di•œy
* ,

3334 
GC
 ,

3339 
	`XSëTûe
(

3340 
Di•œy
* ,

3341 
GC
 ,

3342 
Pixm≠


3345 
	`XSëWödowBackground
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowBackgroundPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dî
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowB‹dîPixm≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Pixm≠


3369 
	`XSëWödowB‹dîWidth
(

3370 
Di•œy
* ,

3371 
Wödow
 ,

3375 
	`XSëWödowCﬁ‹m≠
(

3376 
Di•œy
* ,

3377 
Wödow
 ,

3378 
Cﬁ‹m≠


3381 
	`XSt‹eBuf„r
(

3382 
Di•œy
* ,

3383 
_Xc⁄°
 * ,

3388 
	`XSt‹eByãs
(

3389 
Di•œy
* ,

3390 
_Xc⁄°
 * ,

3394 
	`XSt‹eCﬁ‹
(

3395 
Di•œy
* ,

3396 
Cﬁ‹m≠
 ,

3397 
XCﬁ‹
*

3400 
	`XSt‹eCﬁ‹s
(

3401 
Di•œy
* ,

3402 
Cﬁ‹m≠
 ,

3403 
XCﬁ‹
* ,

3407 
	`XSt‹eName
(

3408 
Di•œy
* ,

3409 
Wödow
 ,

3410 
_Xc⁄°
 *

3413 
	`XSt‹eNamedCﬁ‹
(

3414 
Di•œy
* ,

3415 
Cﬁ‹m≠
 ,

3416 
_Xc⁄°
 * ,

3421 
	`XSync
(

3422 
Di•œy
* ,

3423 
Boﬁ


3426 
	`XTextExã¡s
(

3427 
XF⁄tSåu˘
* ,

3428 
_Xc⁄°
 * ,

3433 
XCh¨Såu˘
*

3436 
	`XTextExã¡s16
(

3437 
XF⁄tSåu˘
* ,

3438 
_Xc⁄°
 
XCh¨2b
* ,

3443 
XCh¨Såu˘
*

3446 
	`XTextWidth
(

3447 
XF⁄tSåu˘
* ,

3448 
_Xc⁄°
 * ,

3452 
	`XTextWidth16
(

3453 
XF⁄tSåu˘
* ,

3454 
_Xc⁄°
 
XCh¨2b
* ,

3458 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3459 
Di•œy
* ,

3460 
Wödow
 ,

3461 
Wödow
 ,

3466 
Wödow
*

3469 
	`XUndeföeCurs‹
(

3470 
Di•œy
* ,

3471 
Wödow


3474 
	`XUngøbBuâ⁄
(

3475 
Di•œy
* ,

3478 
Wödow


3481 
	`XUngøbKey
(

3482 
Di•œy
* ,

3485 
Wödow


3488 
	`XUngøbKeybﬂrd
(

3489 
Di•œy
* ,

3490 
Time


3493 
	`XUngøbPoöãr
(

3494 
Di•œy
* ,

3495 
Time


3498 
	`XUngøbSîvî
(

3499 
Di•œy
*

3502 
	`XUnö°ÆlCﬁ‹m≠
(

3503 
Di•œy
* ,

3504 
Cﬁ‹m≠


3507 
	`XU∆ﬂdF⁄t
(

3508 
Di•œy
* ,

3509 
F⁄t


3512 
	`XUnm≠Subwödows
(

3513 
Di•œy
* ,

3514 
Wödow


3517 
	`XUnm≠Wödow
(

3518 
Di•œy
* ,

3519 
Wödow


3522 
	`XVíd‹Rñó£
(

3523 
Di•œy
*

3526 
	`XW¨pPoöãr
(

3527 
Di•œy
* ,

3528 
Wödow
 ,

3529 
Wödow
 ,

3538 
	`XWidthMMOfS¸ìn
(

3539 
S¸ìn
*

3542 
	`XWidthOfS¸ìn
(

3543 
S¸ìn
*

3546 
	`XWödowEvít
(

3547 
Di•œy
* ,

3548 
Wödow
 ,

3550 
XEvít
*

3553 
	`XWrôeBôm≠Fûe
(

3554 
Di•œy
* ,

3555 
_Xc⁄°
 * ,

3556 
Pixm≠
 ,

3563 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3565 *
	`XSëLoˇÀModifõrs
(

3569 
XOM
 
	`XO≥nOM
(

3570 
Di•œy
* ,

3571 
_XrmHashBuckëRec
* ,

3572 
_Xc⁄°
 * ,

3573 
_Xc⁄°
 *

3576 
Sètus
 
	`XClo£OM
(

3577 
XOM


3580 *
	$XSëOMVÆues
(

3581 
XOM
 ,

3583 Ë
	`_X_SENTINEL
(0);

3585 *
	$XGëOMVÆues
(

3586 
XOM
 ,

3588 Ë
	`_X_SENTINEL
(0);

3590 
Di•œy
 *
	`XDi•œyOfOM
(

3591 
XOM


3594 *
	`XLoˇÀOfOM
(

3595 
XOM


3598 
XOC
 
	$XCª©eOC
(

3599 
XOM
 ,

3601 Ë
	`_X_SENTINEL
(0);

3603 
	`XDe°royOC
(

3604 
XOC


3607 
XOM
 
	`XOMOfOC
(

3608 
XOC


3611 *
	$XSëOCVÆues
(

3612 
XOC
 ,

3614 Ë
	`_X_SENTINEL
(0);

3616 *
	$XGëOCVÆues
(

3617 
XOC
 ,

3619 Ë
	`_X_SENTINEL
(0);

3621 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3622 
Di•œy
* ,

3623 
_Xc⁄°
 * ,

3629 
	`XFªeF⁄tSë
(

3630 
Di•œy
* ,

3631 
XF⁄tSë


3634 
	`XF⁄tsOfF⁄tSë
(

3635 
XF⁄tSë
 ,

3636 
XF⁄tSåu˘
*** ,

3640 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3641 
XF⁄tSë


3644 *
	`XLoˇÀOfF⁄tSë
(

3645 
XF⁄tSë


3648 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3649 
XF⁄tSë


3652 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3653 
XF⁄tSë


3656 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3657 
XF⁄tSë


3660 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3661 
XF⁄tSë


3664 
	`XmbTextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XwcTextEsˇ≥mít
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 
wch¨_t
* ,

3676 
	`Xutf8TextEsˇ≥mít
(

3677 
XF⁄tSë
 ,

3678 
_Xc⁄°
 * ,

3682 
	`XmbTextExã¡s
(

3683 
XF⁄tSë
 ,

3684 
_Xc⁄°
 * ,

3686 
XRe˘™gÀ
* ,

3687 
XRe˘™gÀ
*

3690 
	`XwcTextExã¡s
(

3691 
XF⁄tSë
 ,

3692 
_Xc⁄°
 
wch¨_t
* ,

3694 
XRe˘™gÀ
* ,

3695 
XRe˘™gÀ
*

3698 
	`Xutf8TextExã¡s
(

3699 
XF⁄tSë
 ,

3700 
_Xc⁄°
 * ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 * ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 
wch¨_t
* ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3731 
XF⁄tSë
 ,

3732 
_Xc⁄°
 * ,

3734 
XRe˘™gÀ
* ,

3735 
XRe˘™gÀ
* ,

3738 
XRe˘™gÀ
* ,

3739 
XRe˘™gÀ
*

3742 
	`XmbDøwText
(

3743 
Di•œy
* ,

3744 
DøwabÀ
 ,

3745 
GC
 ,

3748 
XmbTextIãm
* ,

3752 
	`XwcDøwText
(

3753 
Di•œy
* ,

3754 
DøwabÀ
 ,

3755 
GC
 ,

3758 
XwcTextIãm
* ,

3762 
	`Xutf8DøwText
(

3763 
Di•œy
* ,

3764 
DøwabÀ
 ,

3765 
GC
 ,

3768 
XmbTextIãm
* ,

3772 
	`XmbDøwSåög
(

3773 
Di•œy
* ,

3774 
DøwabÀ
 ,

3775 
XF⁄tSë
 ,

3776 
GC
 ,

3779 
_Xc⁄°
 * ,

3783 
	`XwcDøwSåög
(

3784 
Di•œy
* ,

3785 
DøwabÀ
 ,

3786 
XF⁄tSë
 ,

3787 
GC
 ,

3790 
_Xc⁄°
 
wch¨_t
* ,

3794 
	`Xutf8DøwSåög
(

3795 
Di•œy
* ,

3796 
DøwabÀ
 ,

3797 
XF⁄tSë
 ,

3798 
GC
 ,

3801 
_Xc⁄°
 * ,

3805 
	`XmbDøwImageSåög
(

3806 
Di•œy
* ,

3807 
DøwabÀ
 ,

3808 
XF⁄tSë
 ,

3809 
GC
 ,

3812 
_Xc⁄°
 * ,

3816 
	`XwcDøwImageSåög
(

3817 
Di•œy
* ,

3818 
DøwabÀ
 ,

3819 
XF⁄tSë
 ,

3820 
GC
 ,

3823 
_Xc⁄°
 
wch¨_t
* ,

3827 
	`Xutf8DøwImageSåög
(

3828 
Di•œy
* ,

3829 
DøwabÀ
 ,

3830 
XF⁄tSë
 ,

3831 
GC
 ,

3834 
_Xc⁄°
 * ,

3838 
XIM
 
	`XO≥nIM
(

3839 
Di•œy
* ,

3840 
_XrmHashBuckëRec
* ,

3845 
Sètus
 
	`XClo£IM
(

3846 
XIM


3849 *
	$XGëIMVÆues
(

3850 
XIM
 , ...

3851 Ë
	`_X_SENTINEL
(0);

3853 *
	$XSëIMVÆues
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
Di•œy
 *
	`XDi•œyOfIM
(

3858 
XIM


3861 *
	`XLoˇÀOfIM
(

3862 
XIM


3865 
XIC
 
	$XCª©eIC
(

3866 
XIM
 , ...

3867 Ë
	`_X_SENTINEL
(0);

3869 
	`XDe°royIC
(

3870 
XIC


3873 
	`XSëICFocus
(

3874 
XIC


3877 
	`XUn£tICFocus
(

3878 
XIC


3881 
wch¨_t
 *
	`XwcRe£tIC
(

3882 
XIC


3885 *
	`XmbRe£tIC
(

3886 
XIC


3889 *
	`Xutf8Re£tIC
(

3890 
XIC


3893 *
	$XSëICVÆues
(

3894 
XIC
 , ...

3895 Ë
	`_X_SENTINEL
(0);

3897 *
	$XGëICVÆues
(

3898 
XIC
 , ...

3899 Ë
	`_X_SENTINEL
(0);

3901 
XIM
 
	`XIMOfIC
(

3902 
XIC


3905 
Boﬁ
 
	`XFûãrEvít
(

3906 
XEvít
* ,

3907 
Wödow


3910 
	`XmbLookupSåög
(

3911 
XIC
 ,

3912 
XKeyPªs£dEvít
* ,

3915 
KeySym
* ,

3916 
Sètus
*

3919 
	`XwcLookupSåög
(

3920 
XIC
 ,

3921 
XKeyPªs£dEvít
* ,

3922 
wch¨_t
* ,

3924 
KeySym
* ,

3925 
Sètus
*

3928 
	`Xutf8LookupSåög
(

3929 
XIC
 ,

3930 
XKeyPªs£dEvít
* ,

3933 
KeySym
* ,

3934 
Sètus
*

3937 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3939 Ë
	`_X_SENTINEL
(0);

3943 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3944 
Di•œy
* ,

3945 
_XrmHashBuckëRec
* ,

3948 
XIDProc
 ,

3949 
XPoöãr


3952 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3953 
Di•œy
* ,

3954 
_XrmHashBuckëRec
* ,

3957 
XIDProc
 ,

3958 
XPoöãr


3961 (*
	tXC⁄√˘i⁄W©chProc
)(

3962 
	tDi•œy
* ,

3963 
	tXPoöãr
 ,

3965 
	tBoﬁ
 ,

3966 
	tXPoöãr
*

3970 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3971 
Di•œy
* ,

3976 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3977 
Di•œy
* ,

3981 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3982 
Di•œy
* ,

3983 
XC⁄√˘i⁄W©chProc
 ,

3984 
XPoöãr


3987 
	`XRemoveC⁄√˘i⁄W©ch
(

3988 
Di•œy
* ,

3989 
XC⁄√˘i⁄W©chProc
 ,

3990 
XPoöãr


3993 
	`XSëAuth‹iz©i⁄
(

4000 
	`_Xmbtowc
(

4001 
wch¨_t
 * ,

4002 #ifde‡
ISC


4004 
size_t


4011 
	`_Xw˘omb
(

4013 
wch¨_t


4016 
Boﬁ
 
	`XGëEvítD©a
(

4017 
Di•œy
* ,

4018 
XGíîicEvítCookõ
*

4021 
	`XFªeEvítD©a
(

4022 
Di•œy
* ,

4023 
XGíîicEvítCookõ
*

4026 #ifde‡
__˛™g__


4027 #¥agm®
˛™g
 
dügno°ic
 
p›


4030 
_XFUNCPROTOEND


	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_WAIT
 1

	)

64 
	#_G_NEED_STDARG_H
 1

	)

65 
	#_G_va_li°
 
__gnuc_va_li°


	)

67 
	#_G_HAVE_PRINTF_FP
 1

	)

68 
	#_G_HAVE_MMAP
 1

	)

69 
	#_G_HAVE_MREMAP
 1

	)

70 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

71 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

72 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

74 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

76 
	#_G_OPEN64
 
__›í64


	)

77 
	#_G_LSEEK64
 
__l£ek64


	)

78 
	#_G_MMAP64
 
__mm≠64


	)

79 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

82 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

84 
	#_G_BUFSIZ
 8192

	)

87 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

88 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

89 
	#_G_USING_THUNKS
 1

	)

90 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

91 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 2)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 2)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__SWBLK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

77 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3) \

146 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

147 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

148 && 
__GNUC_RH_RELEASE__
 >= 31)

149 
	#__w¨nde˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

151 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

152 
	#__îr‹de˛
(
«me
, 
msg
) \

153 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

155 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

156 
	#__w¨«âr
(
msg
)

	)

157 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

161 #i‡
__GNUC_PREREQ
 (2,97)

163 
	#__Êex¨r
 []

	)

165 #ifde‡
__GNUC__


166 
	#__Êex¨r
 [0]

	)

168 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

169 
	#__Êex¨r
 []

	)

172 
	#__Êex¨r
 [1]

	)

188 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

190 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 #ifde‡
__˝lu•lus


192 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

193 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

197 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

198 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

199 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

200 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

202 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

203 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

216 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

217 
	#__©åibuã__
(
xyz
Ë

	)

223 #i‡
__GNUC_PREREQ
 (2,96)

224 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

226 
	#__©åibuã_mÆloc__


	)

232 #i‡
__GNUC_PREREQ
 (2,96)

233 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

235 
	#__©åibuã_puª__


	)

239 #i‡
__GNUC_PREREQ
 (2,5)

240 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

242 
	#__©åibuã_c⁄°__


	)

248 #i‡
__GNUC_PREREQ
 (3,1)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

250 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

252 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

253 
	#__©åibuã_noölöe__


	)

257 #i‡
__GNUC_PREREQ
 (3,2)

258 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

260 
	#__©åibuã_dïªˇãd__


	)

269 #i‡
__GNUC_PREREQ
 (2,8)

270 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

272 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

279 #i‡
__GNUC_PREREQ
 (2,97)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

281 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

283 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

288 #i‡
__GNUC_PREREQ
 (3,3)

289 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

291 
	#__n⁄nuŒ
(
∑øms
)

	)

296 #i‡
__GNUC_PREREQ
 (3,4)

297 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

298 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

299 #i‡
__USE_FORTIFY_LEVEL
 > 0

300 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

303 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

305 #i‚de‡
__wur


306 
	#__wur


	)

310 #i‡
__GNUC_PREREQ
 (3,2)

311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 
	#__Æways_ölöe
 
__ölöe


	)

318 #i‡
__GNUC_PREREQ
 (4,3)

319 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

321 
	#__©åibuã_¨tificül__


	)

326 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


331 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

335 
	#__exã∫_ölöe
 
__ölöe


	)

336 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

344 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

345 && 
__GNUC_RH_RELEASE__
 >= 31)

346 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

347 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

354 #i‡!
__GNUC_PREREQ
 (2,8)

355 
	#__exãnsi⁄__


	)

359 #i‡!
__GNUC_PREREQ
 (2,92)

360 
	#__ª°ri˘


	)

366 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


367 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

369 #ifde‡
__GNUC__


370 
	#__ª°ri˘_¨r


	)

372 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

373 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

376 
	#__ª°ri˘_¨r


	)

381 #i‡
__GNUC__
 >= 3

382 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

384 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

387 
	~<bôs/w‹dsize.h
>

389 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


390 
	#__LDBL_COMPAT
 1

	)

391 #ifde‡
__REDIRECT


392 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

393 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

395 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

396 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

397 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

398 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

400 
	#__LDBL_REDIR_DECL
(
«me
) \

401 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

402 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

404 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

405 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

408 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


409 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

410 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

411 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

412 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

413 
	#__LDBL_REDIR_DECL
(
«me
)

	)

414 #ifde‡
__REDIRECT


415 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

417 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/home/lixing/include/FL/Fl_PostScript.H

23 #i‚de‡
Fl_Po°S¸ùt_H


24 
	#Fl_Po°S¸ùt_H


	)

26 
	~<FL/Fl_Paged_Devi˚.H
>

27 
	~<FL/Ê_døw.H
>

28 
	~<°d¨g.h
>

59 (
Fl_Po°S¸ùt_Clo£_Comm™d
)(
	tFILE
 *);

62 ˛as†
	cFL_EXPORT
 
Fl_Po°S¸ùt_Gøphics_Drivî
 : 
public
 
Fl_Gøphics_Drivî
 {

63 
public
:

64 c⁄° *
˛ass_id
;

65 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

66 
	`Fl_Po°S¸ùt_Gøphics_Drivî
();

67 #i‚de‡
FL_DOXYGEN


68 
	eSHAPE
{
NONE
=0, 
LINE
, 
LOOP
, 
POLYGON
, 
POINTS
};

70 ˛as†
	cClù
 {

71 
public
:

72 
x
, 
y
, 
w
, 
h
;

73 
Clù
 *
¥ev
;

75 
Clù
 * 
˛ù_
;

77 
œng_Àvñ_
;

78 
g≠_
;

79 
∑ges_
;

81 
width_
;

82 
height_
;

84 
sh≠e_
;

85 
löewidth_
;

86 
löe°yÀ_
;

87 
öãΩﬁ©e_
;

88 
¸_
,
cg_
,
cb_
;

89 
löedash_
[256];

90 
c⁄ˇt
();

91 
ªc⁄ˇt
();

92 
ªcovî
();

93 
ª£t
();

95 
uch¨
 * 
mask
;

96 
mx
;

97 
my
;

99 
Fl_Po°S¸ùt_Clo£_Comm™d
* 
˛o£_cmd_
;

100 
∑ge_pﬁicy_
;

101 
nPages
;

102 
‹õ¡©i⁄_
;

104 
sˇÀ_x
;

105 
sˇÀ_y
;

106 
™gÀ
;

107 
À·_m¨gö
;

108 
t›_m¨gö
;

110 
FILE
 *
ouçut
;

111 
pw_
, 
ph_
;

113 
uch¨
 
bg_r
, 
bg_g
, 
bg_b
;

114 
°¨t_po°s¸ùt
 (
∑gecou¡
, 
Fl_Paged_Devi˚
::
Page_F‹m©
 
f‹m©
, Fl_Paged_Devi˚::
Page_Layout
 
œyout
);

117 
å™sf‹med_døw
(c⁄° * 
s
, 
n
, 
x
, 
y
);

118 
å™sf‹med_døw
(c⁄° * 
s
, 
x
, 
y
);

119 
Æpha_mask
(c⁄° 
uch¨
 * 
d©a
, 
w
, 
h
, 
D
, 
LD
=0);

121 
Fl_Paged_Devi˚
::
Page_F‹m©
 
∑ge_f‹m©_
;

122 *
ps_fûíame_
;

124 
∑ge_pﬁicy
(
p
);

125 
	$∑ge_pﬁicy
(){ 
∑ge_pﬁicy_
;
	}
};

126 
	$˛o£_comm™d
(
Fl_Po°S¸ùt_Clo£_Comm™d
* 
cmd
){
˛o£_cmd_
=cmd;
	}
};

127 
FILE
 * 
	$fûe
(Ë{ 
ouçut
;
	}
};

131 
	$öãΩﬁ©e
(
i
){
öãΩﬁ©e_
=i;
	}
};

132 
	$öãΩﬁ©e
(){ 
öãΩﬁ©e_
;
	}
}

134 
∑ge
(
pw
, 
ph
, 
medü
 = 0);

135 
∑ge
(
f‹m©
);

139 
cﬁ‹
(
Fl_Cﬁ‹
 
c
);

140 
cﬁ‹
(
uch¨
 
r
, uch¨ 
g
, uch¨ 
b
);

142 
push_˛ù
(
x
, 
y
, 
w
, 
h
);

143 
˛ù_box
(
x
, 
y
, 
w
, 
h
, &
X
, &
Y
, &
W
, &
H
);

144 
nŸ_˛ù≥d
(
x
, 
y
, 
w
, 
h
);

145 
push_no_˛ù
();

146 
p›_˛ù
();

148 
löe_°yÀ
(
°yÀ
, 
width
=0, * 
dashes
=0);

150 
ª˘
(
x
, 
y
, 
w
, 
h
);

151 
ª˘f
(
x
, 
y
, 
w
, 
h
);

153 
xylöe
(
x
, 
y
, 
x1
);

154 
xylöe
(
x
, 
y
, 
x1
, 
y2
);

155 
xylöe
(
x
, 
y
, 
x1
, 
y2
, 
x3
);

157 
yxlöe
(
x
, 
y
, 
y1
);

158 
yxlöe
(
x
, 
y
, 
y1
, 
x2
);

159 
yxlöe
(
x
, 
y
, 
y1
, 
x2
, 
y3
);

161 
löe
(
x1
, 
y1
, 
x2
, 
y2
);

162 
löe
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

164 
lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

165 
lo›
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

166 
pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
);

167 
pﬁyg⁄
(
x0
, 
y0
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

168 
poöt
(
x
, 
y
);

170 
begö_poöts
();

171 
begö_löe
();

172 
begö_lo›
();

173 
begö_pﬁyg⁄
();

174 
vîãx
(
x
, 
y
);

175 
curve
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
);

176 
cú˛e
(
x
, 
y
, 
r
);

177 
¨c
(
x
, 
y
, 
r
, 
°¨t
, 
a
);

178 
¨c
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

179 
põ
(
x
, 
y
, 
w
, 
h
, 
a1
, 
a2
);

180 
íd_poöts
();

181 
íd_löe
();

182 
íd_lo›
();

183 
íd_pﬁyg⁄
();

184 
	$begö_com∂ex_pﬁyg⁄
(){
	`begö_pﬁyg⁄
();
	}
};

185 
	$g≠
(){
g≠_
=1;
	}
};

186 
	$íd_com∂ex_pﬁyg⁄
(){
	`íd_pﬁyg⁄
();
	}
};

187 
å™sf‹med_vîãx
(
x
, 
y
);

189 
døw_image
(c⁄° 
uch¨
* 
d
, 
x
,
y
,
w
,
h
, 
dñè
=3, 
ldñè
=0);

190 
døw_image_m⁄o
(c⁄° 
uch¨
* 
d
, 
x
,
y
,
w
,
h
, 
dñè
=1, 
ld
=0);

191 
døw_image
(
Fl_Døw_Image_Cb
 
ˇŒ
, * 
d©a
, 
x
,
y
, 
w
, 
h
, 
dñè
=3);

192 
døw_image_m⁄o
(
Fl_Døw_Image_Cb
 
ˇŒ
, * 
d©a
, 
x
,
y
, 
w
, 
h
, 
dñè
=1);

194 
	$døw
(c⁄° * 
s
, 
nByãs
, 
x
, 
y
Ë{
	`å™sf‹med_døw
(s,nByãs,x,y); 
	}
};

195 #ifde‡
__APPLE__


196 
	$døw
(c⁄° * 
s
, 
nByãs
, 
x
, 
y
Ë{
	`å™sf‹med_døw
(s,nByãs,x,y); 
	}
};

198 
døw
(
™gÀ
, c⁄° *
°r
, 
n
, 
x
, 
y
);

199 
πl_døw
(c⁄° * 
s
, 
n
, 
x
, 
y
);

200 
f⁄t
(
Á˚
, 
size
);

201 
width
(const *, );

202 
width
(
u
);

203 
ãxt_exã¡s
(c⁄° *
c
, 
n
, &
dx
, &
dy
, &
w
, &
h
);

204 
height
();

205 
des˚¡
();

206 
døw
(
Fl_Pixm≠
 * 
pxm
,
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

207 
døw
(
Fl_Bôm≠
 * 
bôm≠
,
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

208 
døw
(
Fl_RGB_Image
 * 
rgb
,
XP
, 
YP
, 
WP
, 
HP
, 
cx
, 
cy
);

209 
˛oˇÀ_¥ötf
(c⁄° *
f‹m©
, ...);

210 ~
Fl_Po°S¸ùt_Gøphics_Drivî
();

216 ˛as†
	cFL_EXPORT
 
	mFl_Po°S¸ùt_Fûe_Devi˚
 : 
public
 
Fl_Paged_Devi˚
 {

217 #ifde‡
__APPLE__


218 
CGC⁄ãxtRef
 
gc
;

220 
	m¥Ÿe˘ed
:

221 
Fl_Po°S¸ùt_Gøphics_Drivî
 *
drivî
();

222 
	mpublic
:

223 c⁄° *
˛ass_id
;

224 c⁄° *
	$˛ass_«me
(Ë{ 
˛ass_id
;};

225 
	`Fl_Po°S¸ùt_Fûe_Devi˚
();

226 ~
	`Fl_Po°S¸ùt_Fûe_Devi˚
();

227 
	`°¨t_job
(
∑gecou¡
, * 
‰om
, * 
to
);

228 
	`°¨t_job
(
∑gecou¡
, 
Fl_Paged_Devi˚
::
Page_F‹m©
 
f‹m©
 = Fl_Paged_Devi˚::
A4
,

229 
Fl_Paged_Devi˚
::
Page_Layout
 
œyout
 = Fl_Paged_Devi˚::
PORTRAIT
);

230 
	`°¨t_job
(
FILE
 *
ps_ouçut
, 
∑gecou¡
, 
Fl_Paged_Devi˚
::
Page_F‹m©
 
f‹m©
 = Fl_Paged_Devi˚::
A4
,

231 
Fl_Paged_Devi˚
::
Page_Layout
 
œyout
 = Fl_Paged_Devi˚::
PORTRAIT
);

232 
	`°¨t_∑ge
 ();

233 
	`¥öèbÀ_ª˘
(*
w
, *
h
);

234 
	`m¨gös
(*
À·
, *
t›
, *
right
, *
bŸtom
);

235 
	`‹igö
(*
x
, *
y
);

236 
	`‹igö
(
x
, 
y
);

237 
	`sˇÀ
 (
sˇÀ_x
, 
sˇÀ_y
 = 0.);

238 
	`rŸ©e
(
™gÀ
);

239 
	`å™¶©e
(
x
, 
y
);

240 
	`u¡øn¶©e
();

241 
	`íd_∑ge
 ();

242 
	`íd_job
();

243 #ifde‡
__APPLE__


244 
	$£t_cuºít
(Ë{ 
Ê_gc
 = 
gc
; 
Fl_Paged_Devi˚
::
	`£t_cuºít
(); 
	}
}

247 c⁄° *
	gfûe_choo£r_tôÀ
;

	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

81 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

83 
	#_X_SENTINEL
(
x
)

	)

87 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& !deföed(
__CYGWIN__
)

88 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

89 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

90 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

91 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

92 
	#_X_EXPORT
 
__globÆ


	)

93 
	#_X_HIDDEN
 
__hiddí


	)

94 
	#_X_INTERNAL
 
__hiddí


	)

96 
	#_X_EXPORT


	)

97 
	#_X_HIDDEN


	)

98 
	#_X_INTERNAL


	)

102 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

103 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

104 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

106 
	#_X_LIKELY
(
x
Ë(x)

	)

107 
	#_X_UNLIKELY
(
x
Ë(x)

	)

111 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)

112 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

114 
	#_X_DEPRECATED


	)

118 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

119 || (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

120 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

122 
	#_X_NORETURN


	)

126 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

127 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

129 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

135 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

136 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

137 #ñi‡
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

138 
	#_X_NONNULL
(...Ë

	)

142 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

143 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

145 
	#_X_UNUSED


	)

151 #i‡
deföed
(
ölöe
) || \

152 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

153 (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

154 
	#_X_INLINE
 
ölöe


	)

155 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

156 
	#_X_INLINE
 
__ölöe__


	)

158 
	#_X_INLINE


	)

163 #i‚de‡
_X_RESTRICT_KYWD


164 #i‡
deföed
(
ª°ri˘
) || \

165 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L))

166 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

167 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

168 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

170 
	#_X_RESTRICT_KYWD


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 
	#_POSIX_TZNAME_MAX
 6

	)

139 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


141 
	#_POSIX_QLIMIT
 1

	)

145 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

148 
	#_POSIX_UIO_MAXIOV
 16

	)

152 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

156 
	~<bôs/loˇl_lim.h
>

159 #i‚def 
SSIZE_MAX


160 
	#SSIZE_MAX
 
LONG_MAX


	)

167 #i‚def 
NGROUPS_MAX


168 
	#NGROUPS_MAX
 8

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 
	#LONG64


	)

74 #ifde‡
WORD64


75 
	#MUSTCOPY


	)

93 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

94 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

101 #ifde‡
WORD64


102 
	tINT64
;

103 
	tCARD64
;

104 
	#B32
 :32

	)

105 
	#B16
 :16

	)

106 #ifde‡
UNSIGNEDBITFIELDS


107 
	tINT32
;

108 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tINT16
;

114 
	#B32


	)

115 
	#B16


	)

116 #ifde‡
LONG64


117 
	tINT64
;

118 
	tINT32
;

120 
	tINT32
;

122 
	tINT16
;

125 sig√d 
	tINT8
;

127 #ifde‡
LONG64


128 
	tCARD64
;

129 
	tCARD32
;

131 
	tCARD32
;

133 #i‡!
	`deföed
(
WORD64
Ë&& !deföed(
LONG64
)

134 
	tCARD64
;

136 
	tCARD16
;

137 
	tCARD8
;

139 
CARD32
 
	tBITS32
;

140 
CARD16
 
	tBITS16
;

142 
CARD8
 
	tBYTE
;

143 
CARD8
 
	tBOOL
;

148 #i‡
	`deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

149 
	#cvtINT8toI¡
(
vÆ
Ë(((vÆË& 0x00000080Ë? ((vÆË| 0xffffffffffffff00Ë: (vÆ))

	)

150 
	#cvtINT16toI¡
(
vÆ
Ë(((vÆË& 0x00008000Ë? ((vÆË| 0xffffffffffff0000Ë: (vÆ))

	)

151 
	#cvtINT32toI¡
(
vÆ
Ë(((vÆË& 0x80000000Ë? ((vÆË| 0xffffffff00000000Ë: (vÆ))

	)

152 
	#cvtINT8toSh‹t
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

153 
	#cvtINT16toSh‹t
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

154 
	#cvtINT32toSh‹t
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

155 
	#cvtINT8toL⁄g
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

156 
	#cvtINT16toL⁄g
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

157 
	#cvtINT32toL⁄g
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

159 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

160 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

161 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

162 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

163 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

164 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

165 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

166 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

167 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

172 #ifde‡
MUSTCOPY


176 
	#NEXTPTR
(
p
,
t
Ë(((*ËpË+ 
	`SIZEOF
—))

	)

182 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_a
 0x„80

	)

419 
	#XK_dód_A
 0x„81

	)

420 
	#XK_dód_e
 0x„82

	)

421 
	#XK_dód_E
 0x„83

	)

422 
	#XK_dód_i
 0x„84

	)

423 
	#XK_dód_I
 0x„85

	)

424 
	#XK_dód_o
 0x„86

	)

425 
	#XK_dód_O
 0x„87

	)

426 
	#XK_dód_u
 0x„88

	)

427 
	#XK_dód_U
 0x„89

	)

428 
	#XK_dód_smÆl_schwa
 0x„8a

	)

429 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

431 
	#XK_dód_gªek
 0x„8c

	)

433 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

434 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

435 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

436 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

437 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

439 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

440 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

441 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

442 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

443 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

444 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

445 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

446 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

447 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

448 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

449 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

451 
	#XK_Poöãr_Le·
 0x„e0

	)

452 
	#XK_Poöãr_Right
 0x„e1

	)

453 
	#XK_Poöãr_Up
 0x„e2

	)

454 
	#XK_Poöãr_Down
 0x„e3

	)

455 
	#XK_Poöãr_UpLe·
 0x„e4

	)

456 
	#XK_Poöãr_UpRight
 0x„e5

	)

457 
	#XK_Poöãr_DownLe·
 0x„e6

	)

458 
	#XK_Poöãr_DownRight
 0x„e7

	)

459 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

460 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

461 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

462 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

463 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

464 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

465 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

466 
	#XK_Poöãr_DblClick1
 0x„ef

	)

467 
	#XK_Poöãr_DblClick2
 0x„f0

	)

468 
	#XK_Poöãr_DblClick3
 0x„f1

	)

469 
	#XK_Poöãr_DblClick4
 0x„f2

	)

470 
	#XK_Poöãr_DblClick5
 0x„f3

	)

471 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

472 
	#XK_Poöãr_Døg1
 0x„f5

	)

473 
	#XK_Poöãr_Døg2
 0x„f6

	)

474 
	#XK_Poöãr_Døg3
 0x„f7

	)

475 
	#XK_Poöãr_Døg4
 0x„f8

	)

476 
	#XK_Poöãr_Døg5
 0x„fd

	)

478 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

479 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

480 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

481 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

485 
	#XK_ch
 0x„a0

	)

486 
	#XK_Ch
 0x„a1

	)

487 
	#XK_CH
 0x„a2

	)

488 
	#XK_c_h
 0x„a3

	)

489 
	#XK_C_h
 0x„a4

	)

490 
	#XK_C_H
 0x„a5

	)

499 #ifde‡
XK_3270


500 
	#XK_3270_Du∂iˇã
 0xfd01

	)

501 
	#XK_3270_FõldM¨k
 0xfd02

	)

502 
	#XK_3270_Right2
 0xfd03

	)

503 
	#XK_3270_Le·2
 0xfd04

	)

504 
	#XK_3270_BackTab
 0xfd05

	)

505 
	#XK_3270_Eø£EOF
 0xfd06

	)

506 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

507 
	#XK_3270_Re£t
 0xfd08

	)

508 
	#XK_3270_Quô
 0xfd09

	)

509 
	#XK_3270_PA1
 0xfd0a

	)

510 
	#XK_3270_PA2
 0xfd0b

	)

511 
	#XK_3270_PA3
 0xfd0c

	)

512 
	#XK_3270_Te°
 0xfd0d

	)

513 
	#XK_3270_Aân
 0xfd0e

	)

514 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

515 
	#XK_3270_A…Curs‹
 0xfd10

	)

516 
	#XK_3270_KeyClick
 0xfd11

	)

517 
	#XK_3270_Jump
 0xfd12

	)

518 
	#XK_3270_Idít
 0xfd13

	)

519 
	#XK_3270_RuÀ
 0xfd14

	)

520 
	#XK_3270_C›y
 0xfd15

	)

521 
	#XK_3270_Pœy
 0xfd16

	)

522 
	#XK_3270_Sëup
 0xfd17

	)

523 
	#XK_3270_Rec‹d
 0xfd18

	)

524 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

525 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

526 
	#XK_3270_ExSñe˘
 0xfd1b

	)

527 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

528 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

529 
	#XK_3270_E¡î
 0xfd1e

	)

537 #ifde‡
XK_LATIN1


538 
	#XK_•a˚
 0x0020

	)

539 
	#XK_ex˛am
 0x0021

	)

540 
	#XK_quŸedbl
 0x0022

	)

541 
	#XK_numbîsign
 0x0023

	)

542 
	#XK_dﬁœr
 0x0024

	)

543 
	#XK_≥r˚¡
 0x0025

	)

544 
	#XK_am≥rßnd
 0x0026

	)

545 
	#XK_≠o°r›he
 0x0027

	)

546 
	#XK_quŸîight
 0x0027

	)

547 
	#XK_∑ª∆e·
 0x0028

	)

548 
	#XK_∑ªƒight
 0x0029

	)

549 
	#XK_a°îisk
 0x002®

	)

550 
	#XK_∂us
 0x002b

	)

551 
	#XK_comma
 0x002¯

	)

552 
	#XK_möus
 0x002d

	)

553 
	#XK_≥riod
 0x002ê

	)

554 
	#XK_¶ash
 0x002‡

	)

555 
	#XK_0
 0x0030

	)

556 
	#XK_1
 0x0031

	)

557 
	#XK_2
 0x0032

	)

558 
	#XK_3
 0x0033

	)

559 
	#XK_4
 0x0034

	)

560 
	#XK_5
 0x0035

	)

561 
	#XK_6
 0x0036

	)

562 
	#XK_7
 0x0037

	)

563 
	#XK_8
 0x0038

	)

564 
	#XK_9
 0x0039

	)

565 
	#XK_cﬁ⁄
 0x003®

	)

566 
	#XK_£micﬁ⁄
 0x003b

	)

567 
	#XK_Àss
 0x003¯

	)

568 
	#XK_equÆ
 0x003d

	)

569 
	#XK_gª©î
 0x003ê

	)

570 
	#XK_que°i⁄
 0x003‡

	)

571 
	#XK_©
 0x0040

	)

572 
	#XK_A
 0x0041

	)

573 
	#XK_B
 0x0042

	)

574 
	#XK_C
 0x0043

	)

575 
	#XK_D
 0x0044

	)

576 
	#XK_E
 0x0045

	)

577 
	#XK_F
 0x0046

	)

578 
	#XK_G
 0x0047

	)

579 
	#XK_H
 0x0048

	)

580 
	#XK_I
 0x0049

	)

581 
	#XK_J
 0x004®

	)

582 
	#XK_K
 0x004b

	)

583 
	#XK_L
 0x004¯

	)

584 
	#XK_M
 0x004d

	)

585 
	#XK_N
 0x004ê

	)

586 
	#XK_O
 0x004‡

	)

587 
	#XK_P
 0x0050

	)

588 
	#XK_Q
 0x0051

	)

589 
	#XK_R
 0x0052

	)

590 
	#XK_S
 0x0053

	)

591 
	#XK_T
 0x0054

	)

592 
	#XK_U
 0x0055

	)

593 
	#XK_V
 0x0056

	)

594 
	#XK_W
 0x0057

	)

595 
	#XK_X
 0x0058

	)

596 
	#XK_Y
 0x0059

	)

597 
	#XK_Z
 0x005®

	)

598 
	#XK_bøckëÀ·
 0x005b

	)

599 
	#XK_back¶ash
 0x005¯

	)

600 
	#XK_bøckëright
 0x005d

	)

601 
	#XK_asciicúcum
 0x005ê

	)

602 
	#XK_undîsc‹e
 0x005‡

	)

603 
	#XK_gøve
 0x0060

	)

604 
	#XK_quŸñe·
 0x0060

	)

605 
	#XK_a
 0x0061

	)

606 
	#XK_b
 0x0062

	)

607 
	#XK_c
 0x0063

	)

608 
	#XK_d
 0x0064

	)

609 
	#XK_e
 0x0065

	)

610 
	#XK_f
 0x0066

	)

611 
	#XK_g
 0x0067

	)

612 
	#XK_h
 0x0068

	)

613 
	#XK_i
 0x0069

	)

614 
	#XK_j
 0x006®

	)

615 
	#XK_k
 0x006b

	)

616 
	#XK_l
 0x006¯

	)

617 
	#XK_m
 0x006d

	)

618 
	#XK_n
 0x006ê

	)

619 
	#XK_o
 0x006‡

	)

620 
	#XK_p
 0x0070

	)

621 
	#XK_q
 0x0071

	)

622 
	#XK_r
 0x0072

	)

623 
	#XK_s
 0x0073

	)

624 
	#XK_t
 0x0074

	)

625 
	#XK_u
 0x0075

	)

626 
	#XK_v
 0x0076

	)

627 
	#XK_w
 0x0077

	)

628 
	#XK_x
 0x0078

	)

629 
	#XK_y
 0x0079

	)

630 
	#XK_z
 0x007®

	)

631 
	#XK_bø˚À·
 0x007b

	)

632 
	#XK_b¨
 0x007¯

	)

633 
	#XK_bø˚right
 0x007d

	)

634 
	#XK_asciôûde
 0x007ê

	)

636 
	#XK_nobªak•a˚
 0x00a0

	)

637 
	#XK_ex˛amdown
 0x00a1

	)

638 
	#XK_˚¡
 0x00a2

	)

639 
	#XK_°îlög
 0x00a3

	)

640 
	#XK_cuºícy
 0x00a4

	)

641 
	#XK_yí
 0x00a5

	)

642 
	#XK_brokíb¨
 0x00a6

	)

643 
	#XK_£˘i⁄
 0x00a7

	)

644 
	#XK_düîesis
 0x00a8

	)

645 
	#XK_c›yright
 0x00a9

	)

646 
	#XK_‹d„mööe
 0x00Ø

	)

647 
	#XK_guûÀmŸÀ·
 0x00ab

	)

648 
	#XK_nŸsign
 0x00a¯

	)

649 
	#XK_hyphí
 0x00ad

	)

650 
	#XK_ªgi°îed
 0x00´

	)

651 
	#XK_ma¸⁄
 0x00a‡

	)

652 
	#XK_degªe
 0x00b0

	)

653 
	#XK_∂usmöus
 0x00b1

	)

654 
	#XK_twosu≥ri‹
 0x00b2

	)

655 
	#XK_thªesu≥ri‹
 0x00b3

	)

656 
	#XK_acuã
 0x00b4

	)

657 
	#XK_mu
 0x00b5

	)

658 
	#XK_∑øgøph
 0x00b6

	)

659 
	#XK_≥riod˚¡îed
 0x00b7

	)

660 
	#XK_˚dûœ
 0x00b8

	)

661 
	#XK_⁄esu≥ri‹
 0x00b9

	)

662 
	#XK_masculöe
 0x00b®

	)

663 
	#XK_guûÀmŸright
 0x00bb

	)

664 
	#XK_⁄equ¨ãr
 0x00b¯

	)

665 
	#XK_⁄ehÆf
 0x00bd

	)

666 
	#XK_thªequ¨ãrs
 0x00bê

	)

667 
	#XK_que°i⁄down
 0x00b‡

	)

668 
	#XK_Agøve
 0x00c0

	)

669 
	#XK_Aacuã
 0x00c1

	)

670 
	#XK_AcúcumÊex
 0x00c2

	)

671 
	#XK_Atûde
 0x00c3

	)

672 
	#XK_Adüîesis
 0x00c4

	)

673 
	#XK_Arög
 0x00c5

	)

674 
	#XK_AE
 0x00c6

	)

675 
	#XK_C˚dûœ
 0x00c7

	)

676 
	#XK_Egøve
 0x00c8

	)

677 
	#XK_Eacuã
 0x00c9

	)

678 
	#XK_EcúcumÊex
 0x00ˇ

	)

679 
	#XK_Edüîesis
 0x00cb

	)

680 
	#XK_Igøve
 0x00c¯

	)

681 
	#XK_Iacuã
 0x00cd

	)

682 
	#XK_IcúcumÊex
 0x00˚

	)

683 
	#XK_Idüîesis
 0x00c‡

	)

684 
	#XK_ETH
 0x00d0

	)

685 
	#XK_Eth
 0x00d0

	)

686 
	#XK_Ntûde
 0x00d1

	)

687 
	#XK_Ogøve
 0x00d2

	)

688 
	#XK_Oacuã
 0x00d3

	)

689 
	#XK_OcúcumÊex
 0x00d4

	)

690 
	#XK_Otûde
 0x00d5

	)

691 
	#XK_Odüîesis
 0x00d6

	)

692 
	#XK_mu…ùly
 0x00d7

	)

693 
	#XK_O¶ash
 0x00d8

	)

694 
	#XK_Ooblique
 0x00d8

	)

695 
	#XK_Ugøve
 0x00d9

	)

696 
	#XK_Uacuã
 0x00d®

	)

697 
	#XK_UcúcumÊex
 0x00db

	)

698 
	#XK_Udüîesis
 0x00d¯

	)

699 
	#XK_Yacuã
 0x00dd

	)

700 
	#XK_THORN
 0x00dê

	)

701 
	#XK_Th‹n
 0x00dê

	)

702 
	#XK_ssh¨p
 0x00d‡

	)

703 
	#XK_agøve
 0x00e0

	)

704 
	#XK_Øcuã
 0x00e1

	)

705 
	#XK_acúcumÊex
 0x00e2

	)

706 
	#XK_©ûde
 0x00e3

	)

707 
	#XK_adüîesis
 0x00e4

	)

708 
	#XK_¨ög
 0x00e5

	)

709 
	#XK_´
 0x00e6

	)

710 
	#XK_c˚dûœ
 0x00e7

	)

711 
	#XK_egøve
 0x00e8

	)

712 
	#XK_ócuã
 0x00e9

	)

713 
	#XK_ecúcumÊex
 0x00ó

	)

714 
	#XK_edüîesis
 0x00eb

	)

715 
	#XK_igøve
 0x00e¯

	)

716 
	#XK_ücuã
 0x00ed

	)

717 
	#XK_icúcumÊex
 0x00ì

	)

718 
	#XK_idüîesis
 0x00e‡

	)

719 
	#XK_ëh
 0x00f0

	)

720 
	#XK_¡ûde
 0x00f1

	)

721 
	#XK_ogøve
 0x00f2

	)

722 
	#XK_ﬂcuã
 0x00f3

	)

723 
	#XK_ocúcumÊex
 0x00f4

	)

724 
	#XK_Ÿûde
 0x00f5

	)

725 
	#XK_odüîesis
 0x00f6

	)

726 
	#XK_divisi⁄
 0x00f7

	)

727 
	#XK_o¶ash
 0x00f8

	)

728 
	#XK_ooblique
 0x00f8

	)

729 
	#XK_ugøve
 0x00f9

	)

730 
	#XK_uacuã
 0x00Á

	)

731 
	#XK_ucúcumÊex
 0x00fb

	)

732 
	#XK_udüîesis
 0x00f¯

	)

733 
	#XK_yacuã
 0x00fd

	)

734 
	#XK_th‹n
 0x00„

	)

735 
	#XK_ydüîesis
 0x00f‡

	)

743 #ifde‡
XK_LATIN2


744 
	#XK_Aog⁄ek
 0x01a1

	)

745 
	#XK_bªve
 0x01a2

	)

746 
	#XK_L°roke
 0x01a3

	)

747 
	#XK_Lˇr⁄
 0x01a5

	)

748 
	#XK_Sacuã
 0x01a6

	)

749 
	#XK_Sˇr⁄
 0x01a9

	)

750 
	#XK_S˚dûœ
 0x01Ø

	)

751 
	#XK_Tˇr⁄
 0x01ab

	)

752 
	#XK_Zacuã
 0x01a¯

	)

753 
	#XK_Zˇr⁄
 0x01´

	)

754 
	#XK_ZabovedŸ
 0x01a‡

	)

755 
	#XK_aog⁄ek
 0x01b1

	)

756 
	#XK_og⁄ek
 0x01b2

	)

757 
	#XK_l°roke
 0x01b3

	)

758 
	#XK_lˇr⁄
 0x01b5

	)

759 
	#XK_ßcuã
 0x01b6

	)

760 
	#XK_ˇr⁄
 0x01b7

	)

761 
	#XK_sˇr⁄
 0x01b9

	)

762 
	#XK_s˚dûœ
 0x01b®

	)

763 
	#XK_tˇr⁄
 0x01bb

	)

764 
	#XK_zacuã
 0x01b¯

	)

765 
	#XK_doubÀacuã
 0x01bd

	)

766 
	#XK_zˇr⁄
 0x01bê

	)

767 
	#XK_zabovedŸ
 0x01b‡

	)

768 
	#XK_Racuã
 0x01c0

	)

769 
	#XK_Abªve
 0x01c3

	)

770 
	#XK_Lacuã
 0x01c5

	)

771 
	#XK_Cacuã
 0x01c6

	)

772 
	#XK_Cˇr⁄
 0x01c8

	)

773 
	#XK_Eog⁄ek
 0x01ˇ

	)

774 
	#XK_Eˇr⁄
 0x01c¯

	)

775 
	#XK_Dˇr⁄
 0x01c‡

	)

776 
	#XK_D°roke
 0x01d0

	)

777 
	#XK_Nacuã
 0x01d1

	)

778 
	#XK_Nˇr⁄
 0x01d2

	)

779 
	#XK_OdoubÀacuã
 0x01d5

	)

780 
	#XK_Rˇr⁄
 0x01d8

	)

781 
	#XK_Urög
 0x01d9

	)

782 
	#XK_UdoubÀacuã
 0x01db

	)

783 
	#XK_T˚dûœ
 0x01dê

	)

784 
	#XK_øcuã
 0x01e0

	)

785 
	#XK_abªve
 0x01e3

	)

786 
	#XK_œcuã
 0x01e5

	)

787 
	#XK_ˇcuã
 0x01e6

	)

788 
	#XK_cˇr⁄
 0x01e8

	)

789 
	#XK_eog⁄ek
 0x01ó

	)

790 
	#XK_eˇr⁄
 0x01e¯

	)

791 
	#XK_dˇr⁄
 0x01e‡

	)

792 
	#XK_d°roke
 0x01f0

	)

793 
	#XK_«cuã
 0x01f1

	)

794 
	#XK_nˇr⁄
 0x01f2

	)

795 
	#XK_odoubÀacuã
 0x01f5

	)

796 
	#XK_rˇr⁄
 0x01f8

	)

797 
	#XK_urög
 0x01f9

	)

798 
	#XK_udoubÀacuã
 0x01fb

	)

799 
	#XK_t˚dûœ
 0x01„

	)

800 
	#XK_abovedŸ
 0x01f‡

	)

808 #ifde‡
XK_LATIN3


809 
	#XK_H°roke
 0x02a1

	)

810 
	#XK_HcúcumÊex
 0x02a6

	)

811 
	#XK_IabovedŸ
 0x02a9

	)

812 
	#XK_Gbªve
 0x02ab

	)

813 
	#XK_JcúcumÊex
 0x02a¯

	)

814 
	#XK_h°roke
 0x02b1

	)

815 
	#XK_hcúcumÊex
 0x02b6

	)

816 
	#XK_idŸÀss
 0x02b9

	)

817 
	#XK_gbªve
 0x02bb

	)

818 
	#XK_jcúcumÊex
 0x02b¯

	)

819 
	#XK_CabovedŸ
 0x02c5

	)

820 
	#XK_CcúcumÊex
 0x02c6

	)

821 
	#XK_GabovedŸ
 0x02d5

	)

822 
	#XK_GcúcumÊex
 0x02d8

	)

823 
	#XK_Ubªve
 0x02dd

	)

824 
	#XK_ScúcumÊex
 0x02dê

	)

825 
	#XK_ˇbovedŸ
 0x02e5

	)

826 
	#XK_ccúcumÊex
 0x02e6

	)

827 
	#XK_gabovedŸ
 0x02f5

	)

828 
	#XK_gcúcumÊex
 0x02f8

	)

829 
	#XK_ubªve
 0x02fd

	)

830 
	#XK_scúcumÊex
 0x02„

	)

839 #ifde‡
XK_LATIN4


840 
	#XK_kø
 0x03a2

	)

841 
	#XK_k≠∑
 0x03a2

	)

842 
	#XK_R˚dûœ
 0x03a3

	)

843 
	#XK_Itûde
 0x03a5

	)

844 
	#XK_L˚dûœ
 0x03a6

	)

845 
	#XK_Ema¸⁄
 0x03Ø

	)

846 
	#XK_G˚dûœ
 0x03ab

	)

847 
	#XK_T¶ash
 0x03a¯

	)

848 
	#XK_r˚dûœ
 0x03b3

	)

849 
	#XK_ôûde
 0x03b5

	)

850 
	#XK_l˚dûœ
 0x03b6

	)

851 
	#XK_ema¸⁄
 0x03b®

	)

852 
	#XK_g˚dûœ
 0x03bb

	)

853 
	#XK_t¶ash
 0x03b¯

	)

854 
	#XK_ENG
 0x03bd

	)

855 
	#XK_íg
 0x03b‡

	)

856 
	#XK_Ama¸⁄
 0x03c0

	)

857 
	#XK_Iog⁄ek
 0x03c7

	)

858 
	#XK_EabovedŸ
 0x03c¯

	)

859 
	#XK_Ima¸⁄
 0x03c‡

	)

860 
	#XK_N˚dûœ
 0x03d1

	)

861 
	#XK_Oma¸⁄
 0x03d2

	)

862 
	#XK_K˚dûœ
 0x03d3

	)

863 
	#XK_Uog⁄ek
 0x03d9

	)

864 
	#XK_Utûde
 0x03dd

	)

865 
	#XK_Uma¸⁄
 0x03dê

	)

866 
	#XK_ama¸⁄
 0x03e0

	)

867 
	#XK_iog⁄ek
 0x03e7

	)

868 
	#XK_óbovedŸ
 0x03e¯

	)

869 
	#XK_ima¸⁄
 0x03e‡

	)

870 
	#XK_n˚dûœ
 0x03f1

	)

871 
	#XK_oma¸⁄
 0x03f2

	)

872 
	#XK_k˚dûœ
 0x03f3

	)

873 
	#XK_uog⁄ek
 0x03f9

	)

874 
	#XK_utûde
 0x03fd

	)

875 
	#XK_uma¸⁄
 0x03„

	)

881 #ifde‡
XK_LATIN8


882 
	#XK_WcúcumÊex
 0x1000174

	)

883 
	#XK_wcúcumÊex
 0x1000175

	)

884 
	#XK_YcúcumÊex
 0x1000176

	)

885 
	#XK_ycúcumÊex
 0x1000177

	)

886 
	#XK_BabovedŸ
 0x1001e02

	)

887 
	#XK_babovedŸ
 0x1001e03

	)

888 
	#XK_DabovedŸ
 0x1001e0®

	)

889 
	#XK_dabovedŸ
 0x1001e0b

	)

890 
	#XK_FabovedŸ
 0x1001e1ê

	)

891 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

892 
	#XK_MabovedŸ
 0x1001e40

	)

893 
	#XK_mabovedŸ
 0x1001e41

	)

894 
	#XK_PabovedŸ
 0x1001e56

	)

895 
	#XK_∑bovedŸ
 0x1001e57

	)

896 
	#XK_SabovedŸ
 0x1001e60

	)

897 
	#XK_ßbovedŸ
 0x1001e61

	)

898 
	#XK_TabovedŸ
 0x1001e6®

	)

899 
	#XK_èbovedŸ
 0x1001e6b

	)

900 
	#XK_Wgøve
 0x1001e80

	)

901 
	#XK_wgøve
 0x1001e81

	)

902 
	#XK_Wacuã
 0x1001e82

	)

903 
	#XK_wacuã
 0x1001e83

	)

904 
	#XK_Wdüîesis
 0x1001e84

	)

905 
	#XK_wdüîesis
 0x1001e85

	)

906 
	#XK_Ygøve
 0x1001ef2

	)

907 
	#XK_ygøve
 0x1001ef3

	)

915 #ifde‡
XK_LATIN9


916 
	#XK_OE
 0x13b¯

	)

917 
	#XK_€
 0x13bd

	)

918 
	#XK_Ydüîesis
 0x13bê

	)

926 #ifde‡
XK_KATAKANA


927 
	#XK_ovîlöe
 0x047ê

	)

928 
	#XK_k™a_fuŒ°›
 0x04a1

	)

929 
	#XK_k™a_›íögbøckë
 0x04a2

	)

930 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

931 
	#XK_k™a_comma
 0x04a4

	)

932 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

933 
	#XK_k™a_middÀdŸ
 0x04a5

	)

934 
	#XK_k™a_WO
 0x04a6

	)

935 
	#XK_k™a_a
 0x04a7

	)

936 
	#XK_k™a_i
 0x04a8

	)

937 
	#XK_k™a_u
 0x04a9

	)

938 
	#XK_k™a_e
 0x04Ø

	)

939 
	#XK_k™a_o
 0x04ab

	)

940 
	#XK_k™a_ya
 0x04a¯

	)

941 
	#XK_k™a_yu
 0x04ad

	)

942 
	#XK_k™a_yo
 0x04´

	)

943 
	#XK_k™a_tsu
 0x04a‡

	)

944 
	#XK_k™a_tu
 0x04a‡

	)

945 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

946 
	#XK_k™a_A
 0x04b1

	)

947 
	#XK_k™a_I
 0x04b2

	)

948 
	#XK_k™a_U
 0x04b3

	)

949 
	#XK_k™a_E
 0x04b4

	)

950 
	#XK_k™a_O
 0x04b5

	)

951 
	#XK_k™a_KA
 0x04b6

	)

952 
	#XK_k™a_KI
 0x04b7

	)

953 
	#XK_k™a_KU
 0x04b8

	)

954 
	#XK_k™a_KE
 0x04b9

	)

955 
	#XK_k™a_KO
 0x04b®

	)

956 
	#XK_k™a_SA
 0x04bb

	)

957 
	#XK_k™a_SHI
 0x04b¯

	)

958 
	#XK_k™a_SU
 0x04bd

	)

959 
	#XK_k™a_SE
 0x04bê

	)

960 
	#XK_k™a_SO
 0x04b‡

	)

961 
	#XK_k™a_TA
 0x04c0

	)

962 
	#XK_k™a_CHI
 0x04c1

	)

963 
	#XK_k™a_TI
 0x04c1

	)

964 
	#XK_k™a_TSU
 0x04c2

	)

965 
	#XK_k™a_TU
 0x04c2

	)

966 
	#XK_k™a_TE
 0x04c3

	)

967 
	#XK_k™a_TO
 0x04c4

	)

968 
	#XK_k™a_NA
 0x04c5

	)

969 
	#XK_k™a_NI
 0x04c6

	)

970 
	#XK_k™a_NU
 0x04c7

	)

971 
	#XK_k™a_NE
 0x04c8

	)

972 
	#XK_k™a_NO
 0x04c9

	)

973 
	#XK_k™a_HA
 0x04ˇ

	)

974 
	#XK_k™a_HI
 0x04cb

	)

975 
	#XK_k™a_FU
 0x04c¯

	)

976 
	#XK_k™a_HU
 0x04c¯

	)

977 
	#XK_k™a_HE
 0x04cd

	)

978 
	#XK_k™a_HO
 0x04˚

	)

979 
	#XK_k™a_MA
 0x04c‡

	)

980 
	#XK_k™a_MI
 0x04d0

	)

981 
	#XK_k™a_MU
 0x04d1

	)

982 
	#XK_k™a_ME
 0x04d2

	)

983 
	#XK_k™a_MO
 0x04d3

	)

984 
	#XK_k™a_YA
 0x04d4

	)

985 
	#XK_k™a_YU
 0x04d5

	)

986 
	#XK_k™a_YO
 0x04d6

	)

987 
	#XK_k™a_RA
 0x04d7

	)

988 
	#XK_k™a_RI
 0x04d8

	)

989 
	#XK_k™a_RU
 0x04d9

	)

990 
	#XK_k™a_RE
 0x04d®

	)

991 
	#XK_k™a_RO
 0x04db

	)

992 
	#XK_k™a_WA
 0x04d¯

	)

993 
	#XK_k™a_N
 0x04dd

	)

994 
	#XK_voi˚dsound
 0x04dê

	)

995 
	#XK_£mivoi˚dsound
 0x04d‡

	)

996 
	#XK_k™a_swôch
 0xff7ê

	)

1004 #ifde‡
XK_ARABIC


1005 
	#XK_F¨si_0
 0x10006f0

	)

1006 
	#XK_F¨si_1
 0x10006f1

	)

1007 
	#XK_F¨si_2
 0x10006f2

	)

1008 
	#XK_F¨si_3
 0x10006f3

	)

1009 
	#XK_F¨si_4
 0x10006f4

	)

1010 
	#XK_F¨si_5
 0x10006f5

	)

1011 
	#XK_F¨si_6
 0x10006f6

	)

1012 
	#XK_F¨si_7
 0x10006f7

	)

1013 
	#XK_F¨si_8
 0x10006f8

	)

1014 
	#XK_F¨si_9
 0x10006f9

	)

1015 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1016 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1017 
	#XK_Aøbic_âeh
 0x1000679

	)

1018 
	#XK_Aøbic_≥h
 0x100067ê

	)

1019 
	#XK_Aøbic_tcheh
 0x1000686

	)

1020 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1021 
	#XK_Aøbic_ºeh
 0x1000691

	)

1022 
	#XK_Aøbic_comma
 0x05a¯

	)

1023 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1024 
	#XK_Aøbic_0
 0x1000660

	)

1025 
	#XK_Aøbic_1
 0x1000661

	)

1026 
	#XK_Aøbic_2
 0x1000662

	)

1027 
	#XK_Aøbic_3
 0x1000663

	)

1028 
	#XK_Aøbic_4
 0x1000664

	)

1029 
	#XK_Aøbic_5
 0x1000665

	)

1030 
	#XK_Aøbic_6
 0x1000666

	)

1031 
	#XK_Aøbic_7
 0x1000667

	)

1032 
	#XK_Aøbic_8
 0x1000668

	)

1033 
	#XK_Aøbic_9
 0x1000669

	)

1034 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1035 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1036 
	#XK_Aøbic_hamza
 0x05c1

	)

1037 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1038 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1039 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1040 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1041 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1042 
	#XK_Aøbic_Æef
 0x05c7

	)

1043 
	#XK_Aøbic_beh
 0x05c8

	)

1044 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1045 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1046 
	#XK_Aøbic_theh
 0x05cb

	)

1047 
	#XK_Aøbic_jìm
 0x05c¯

	)

1048 
	#XK_Aøbic_hah
 0x05cd

	)

1049 
	#XK_Aøbic_khah
 0x05˚

	)

1050 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1051 
	#XK_Aøbic_thÆ
 0x05d0

	)

1052 
	#XK_Aøbic_ø
 0x05d1

	)

1053 
	#XK_Aøbic_zaö
 0x05d2

	)

1054 
	#XK_Aøbic_£í
 0x05d3

	)

1055 
	#XK_Aøbic_shìn
 0x05d4

	)

1056 
	#XK_Aøbic_ßd
 0x05d5

	)

1057 
	#XK_Aøbic_dad
 0x05d6

	)

1058 
	#XK_Aøbic_èh
 0x05d7

	)

1059 
	#XK_Aøbic_zah
 0x05d8

	)

1060 
	#XK_Aøbic_aö
 0x05d9

	)

1061 
	#XK_Aøbic_ghaö
 0x05d®

	)

1062 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1063 
	#XK_Aøbic_„h
 0x05e1

	)

1064 
	#XK_Aøbic_qaf
 0x05e2

	)

1065 
	#XK_Aøbic_kaf
 0x05e3

	)

1066 
	#XK_Aøbic_œm
 0x05e4

	)

1067 
	#XK_Aøbic_mìm
 0x05e5

	)

1068 
	#XK_Aøbic_no⁄
 0x05e6

	)

1069 
	#XK_Aøbic_ha
 0x05e7

	)

1070 
	#XK_Aøbic_heh
 0x05e7

	)

1071 
	#XK_Aøbic_waw
 0x05e8

	)

1072 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1073 
	#XK_Aøbic_yeh
 0x05ó

	)

1074 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1075 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1076 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1077 
	#XK_Aøbic_Átha
 0x05ì

	)

1078 
	#XK_Aøbic_damma
 0x05e‡

	)

1079 
	#XK_Aøbic_ka§a
 0x05f0

	)

1080 
	#XK_Aøbic_shadda
 0x05f1

	)

1081 
	#XK_Aøbic_sukun
 0x05f2

	)

1082 
	#XK_Aøbic_madda_above
 0x1000653

	)

1083 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1084 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1085 
	#XK_Aøbic_jeh
 0x1000698

	)

1086 
	#XK_Aøbic_veh
 0x10006a4

	)

1087 
	#XK_Aøbic_keheh
 0x10006a9

	)

1088 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1089 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1090 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1091 
	#XK_F¨si_yeh
 0x10006c¯

	)

1092 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1093 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1094 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1095 
	#XK_Aøbic_swôch
 0xff7ê

	)

1102 #ifde‡
XK_CYRILLIC


1103 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1104 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1105 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1106 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1107 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1108 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1109 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1110 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1111 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1112 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1113 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1114 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1115 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1116 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1117 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1118 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1119 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1120 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1121 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1122 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1123 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1124 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1126 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1127 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1128 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1129 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1130 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1131 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1132 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1133 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1135 
	#XK_Sîbün_dje
 0x06a1

	)

1136 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1137 
	#XK_Cyrûlic_io
 0x06a3

	)

1138 
	#XK_Ukøöün_õ
 0x06a4

	)

1139 
	#XK_Ukønün_je
 0x06a4

	)

1140 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1141 
	#XK_Ukøöün_i
 0x06a6

	)

1142 
	#XK_Ukønün_i
 0x06a6

	)

1143 
	#XK_Ukøöün_yi
 0x06a7

	)

1144 
	#XK_Ukønün_yi
 0x06a7

	)

1145 
	#XK_Cyrûlic_je
 0x06a8

	)

1146 
	#XK_Sîbün_je
 0x06a8

	)

1147 
	#XK_Cyrûlic_lje
 0x06a9

	)

1148 
	#XK_Sîbün_lje
 0x06a9

	)

1149 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1150 
	#XK_Sîbün_nje
 0x06Ø

	)

1151 
	#XK_Sîbün_tshe
 0x06ab

	)

1152 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1153 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1154 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1155 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1156 
	#XK_Sîbün_dze
 0x06a‡

	)

1157 
	#XK_numîosign
 0x06b0

	)

1158 
	#XK_Sîbün_DJE
 0x06b1

	)

1159 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1160 
	#XK_Cyrûlic_IO
 0x06b3

	)

1161 
	#XK_Ukøöün_IE
 0x06b4

	)

1162 
	#XK_Ukønün_JE
 0x06b4

	)

1163 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1164 
	#XK_Ukøöün_I
 0x06b6

	)

1165 
	#XK_Ukønün_I
 0x06b6

	)

1166 
	#XK_Ukøöün_YI
 0x06b7

	)

1167 
	#XK_Ukønün_YI
 0x06b7

	)

1168 
	#XK_Cyrûlic_JE
 0x06b8

	)

1169 
	#XK_Sîbün_JE
 0x06b8

	)

1170 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1171 
	#XK_Sîbün_LJE
 0x06b9

	)

1172 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1173 
	#XK_Sîbün_NJE
 0x06b®

	)

1174 
	#XK_Sîbün_TSHE
 0x06bb

	)

1175 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1176 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1177 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1178 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1179 
	#XK_Sîbün_DZE
 0x06b‡

	)

1180 
	#XK_Cyrûlic_yu
 0x06c0

	)

1181 
	#XK_Cyrûlic_a
 0x06c1

	)

1182 
	#XK_Cyrûlic_be
 0x06c2

	)

1183 
	#XK_Cyrûlic_t£
 0x06c3

	)

1184 
	#XK_Cyrûlic_de
 0x06c4

	)

1185 
	#XK_Cyrûlic_õ
 0x06c5

	)

1186 
	#XK_Cyrûlic_ef
 0x06c6

	)

1187 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1188 
	#XK_Cyrûlic_ha
 0x06c8

	)

1189 
	#XK_Cyrûlic_i
 0x06c9

	)

1190 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1191 
	#XK_Cyrûlic_ka
 0x06cb

	)

1192 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1193 
	#XK_Cyrûlic_em
 0x06cd

	)

1194 
	#XK_Cyrûlic_í
 0x06˚

	)

1195 
	#XK_Cyrûlic_o
 0x06c‡

	)

1196 
	#XK_Cyrûlic_≥
 0x06d0

	)

1197 
	#XK_Cyrûlic_ya
 0x06d1

	)

1198 
	#XK_Cyrûlic_î
 0x06d2

	)

1199 
	#XK_Cyrûlic_es
 0x06d3

	)

1200 
	#XK_Cyrûlic_ã
 0x06d4

	)

1201 
	#XK_Cyrûlic_u
 0x06d5

	)

1202 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1203 
	#XK_Cyrûlic_ve
 0x06d7

	)

1204 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1205 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1206 
	#XK_Cyrûlic_ze
 0x06d®

	)

1207 
	#XK_Cyrûlic_sha
 0x06db

	)

1208 
	#XK_Cyrûlic_e
 0x06d¯

	)

1209 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1210 
	#XK_Cyrûlic_che
 0x06dê

	)

1211 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1212 
	#XK_Cyrûlic_YU
 0x06e0

	)

1213 
	#XK_Cyrûlic_A
 0x06e1

	)

1214 
	#XK_Cyrûlic_BE
 0x06e2

	)

1215 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1216 
	#XK_Cyrûlic_DE
 0x06e4

	)

1217 
	#XK_Cyrûlic_IE
 0x06e5

	)

1218 
	#XK_Cyrûlic_EF
 0x06e6

	)

1219 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1220 
	#XK_Cyrûlic_HA
 0x06e8

	)

1221 
	#XK_Cyrûlic_I
 0x06e9

	)

1222 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1223 
	#XK_Cyrûlic_KA
 0x06eb

	)

1224 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1225 
	#XK_Cyrûlic_EM
 0x06ed

	)

1226 
	#XK_Cyrûlic_EN
 0x06ì

	)

1227 
	#XK_Cyrûlic_O
 0x06e‡

	)

1228 
	#XK_Cyrûlic_PE
 0x06f0

	)

1229 
	#XK_Cyrûlic_YA
 0x06f1

	)

1230 
	#XK_Cyrûlic_ER
 0x06f2

	)

1231 
	#XK_Cyrûlic_ES
 0x06f3

	)

1232 
	#XK_Cyrûlic_TE
 0x06f4

	)

1233 
	#XK_Cyrûlic_U
 0x06f5

	)

1234 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1235 
	#XK_Cyrûlic_VE
 0x06f7

	)

1236 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1237 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1238 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1239 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1240 
	#XK_Cyrûlic_E
 0x06f¯

	)

1241 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1242 
	#XK_Cyrûlic_CHE
 0x06„

	)

1243 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1252 #ifde‡
XK_GREEK


1253 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1254 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1255 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1256 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1257 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1258 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1259 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1260 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1261 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1262 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1263 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1264 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1265 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1266 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1267 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1268 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1269 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1270 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1271 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1272 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1273 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1274 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1275 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1276 
	#XK_Gªek_ALPHA
 0x07c1

	)

1277 
	#XK_Gªek_BETA
 0x07c2

	)

1278 
	#XK_Gªek_GAMMA
 0x07c3

	)

1279 
	#XK_Gªek_DELTA
 0x07c4

	)

1280 
	#XK_Gªek_EPSILON
 0x07c5

	)

1281 
	#XK_Gªek_ZETA
 0x07c6

	)

1282 
	#XK_Gªek_ETA
 0x07c7

	)

1283 
	#XK_Gªek_THETA
 0x07c8

	)

1284 
	#XK_Gªek_IOTA
 0x07c9

	)

1285 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1286 
	#XK_Gªek_LAMDA
 0x07cb

	)

1287 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1288 
	#XK_Gªek_MU
 0x07c¯

	)

1289 
	#XK_Gªek_NU
 0x07cd

	)

1290 
	#XK_Gªek_XI
 0x07˚

	)

1291 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1292 
	#XK_Gªek_PI
 0x07d0

	)

1293 
	#XK_Gªek_RHO
 0x07d1

	)

1294 
	#XK_Gªek_SIGMA
 0x07d2

	)

1295 
	#XK_Gªek_TAU
 0x07d4

	)

1296 
	#XK_Gªek_UPSILON
 0x07d5

	)

1297 
	#XK_Gªek_PHI
 0x07d6

	)

1298 
	#XK_Gªek_CHI
 0x07d7

	)

1299 
	#XK_Gªek_PSI
 0x07d8

	)

1300 
	#XK_Gªek_OMEGA
 0x07d9

	)

1301 
	#XK_Gªek_Æpha
 0x07e1

	)

1302 
	#XK_Gªek_bëa
 0x07e2

	)

1303 
	#XK_Gªek_gamma
 0x07e3

	)

1304 
	#XK_Gªek_dñè
 0x07e4

	)

1305 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1306 
	#XK_Gªek_zëa
 0x07e6

	)

1307 
	#XK_Gªek_ëa
 0x07e7

	)

1308 
	#XK_Gªek_thëa
 0x07e8

	)

1309 
	#XK_Gªek_iŸa
 0x07e9

	)

1310 
	#XK_Gªek_k≠∑
 0x07ó

	)

1311 
	#XK_Gªek_œmda
 0x07eb

	)

1312 
	#XK_Gªek_œmbda
 0x07eb

	)

1313 
	#XK_Gªek_mu
 0x07e¯

	)

1314 
	#XK_Gªek_nu
 0x07ed

	)

1315 
	#XK_Gªek_xi
 0x07ì

	)

1316 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1317 
	#XK_Gªek_pi
 0x07f0

	)

1318 
	#XK_Gªek_rho
 0x07f1

	)

1319 
	#XK_Gªek_sigma
 0x07f2

	)

1320 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1321 
	#XK_Gªek_èu
 0x07f4

	)

1322 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1323 
	#XK_Gªek_phi
 0x07f6

	)

1324 
	#XK_Gªek_chi
 0x07f7

	)

1325 
	#XK_Gªek_psi
 0x07f8

	)

1326 
	#XK_Gªek_omega
 0x07f9

	)

1327 
	#XK_Gªek_swôch
 0xff7ê

	)

1336 #ifde‡
XK_TECHNICAL


1337 
	#XK_À·ødiˇl
 0x08a1

	)

1338 
	#XK_t›À·ødiˇl
 0x08a2

	)

1339 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1340 
	#XK_t›öãgøl
 0x08a4

	)

1341 
	#XK_bŸöãgøl
 0x08a5

	)

1342 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1343 
	#XK_t›À·sqbøckë
 0x08a7

	)

1344 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1345 
	#XK_t›rightsqbøckë
 0x08a9

	)

1346 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1347 
	#XK_t›À·∑ªns
 0x08ab

	)

1348 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1349 
	#XK_t›righç¨ís
 0x08ad

	)

1350 
	#XK_bŸrighç¨ís
 0x08´

	)

1351 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1352 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1353 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1354 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1355 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1356 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1357 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1358 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1359 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1360 
	#XK_Às°h™equÆ
 0x08b¯

	)

1361 
	#XK_nŸequÆ
 0x08bd

	)

1362 
	#XK_gª©îth™equÆ
 0x08bê

	)

1363 
	#XK_öãgøl
 0x08b‡

	)

1364 
	#XK_thîef‹e
 0x08c0

	)

1365 
	#XK_v¨üti⁄
 0x08c1

	)

1366 
	#XK_öföôy
 0x08c2

	)

1367 
	#XK_«bœ
 0x08c5

	)

1368 
	#XK_≠¥oxim©e
 0x08c8

	)

1369 
	#XK_simû¨equÆ
 0x08c9

	)

1370 
	#XK_if⁄lyif
 0x08cd

	)

1371 
	#XK_im∂õs
 0x08˚

	)

1372 
	#XK_idítiˇl
 0x08c‡

	)

1373 
	#XK_ødiˇl
 0x08d6

	)

1374 
	#XK_ö˛udedö
 0x08d®

	)

1375 
	#XK_ö˛udes
 0x08db

	)

1376 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1377 
	#XK_uni⁄
 0x08dd

	)

1378 
	#XK_logiˇœnd
 0x08dê

	)

1379 
	#XK_logiˇl‹
 0x08d‡

	)

1380 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1381 
	#XK_fun˘i⁄
 0x08f6

	)

1382 
	#XK_À·¨row
 0x08fb

	)

1383 
	#XK_u∑ºow
 0x08f¯

	)

1384 
	#XK_righèºow
 0x08fd

	)

1385 
	#XK_dow«ºow
 0x08„

	)

1394 #ifde‡
XK_SPECIAL


1395 
	#XK_bœnk
 0x09df

	)

1396 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1397 
	#XK_checkîbﬂrd
 0x09e1

	)

1398 
	#XK_ht
 0x09e2

	)

1399 
	#XK_ff
 0x09e3

	)

1400 
	#XK_¸
 0x09e4

	)

1401 
	#XK_lf
 0x09e5

	)

1402 
	#XK_∆
 0x09e8

	)

1403 
	#XK_vt
 0x09e9

	)

1404 
	#XK_lowrightc‹√r
 0x09ó

	)

1405 
	#XK_u¥ightc‹√r
 0x09eb

	)

1406 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1407 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1408 
	#XK_¸ossöglöes
 0x09ì

	)

1409 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1410 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1411 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1412 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1413 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1414 
	#XK_À·t
 0x09f4

	)

1415 
	#XK_righâ
 0x09f5

	)

1416 
	#XK_bŸt
 0x09f6

	)

1417 
	#XK_t›t
 0x09f7

	)

1418 
	#XK_vîtb¨
 0x09f8

	)

1428 #ifde‡
XK_PUBLISHING


1429 
	#XK_em•a˚
 0x0Ø1

	)

1430 
	#XK_í•a˚
 0x0Ø2

	)

1431 
	#XK_em3•a˚
 0x0Ø3

	)

1432 
	#XK_em4•a˚
 0x0Ø4

	)

1433 
	#XK_digô•a˚
 0x0Ø5

	)

1434 
	#XK_pun˘•a˚
 0x0Ø6

	)

1435 
	#XK_thö•a˚
 0x0Ø7

	)

1436 
	#XK_haú•a˚
 0x0Ø8

	)

1437 
	#XK_emdash
 0x0Ø9

	)

1438 
	#XK_ídash
 0x0Ø®

	)

1439 
	#XK_signifbœnk
 0x0Ø¯

	)

1440 
	#XK_ñlùsis
 0x0Øê

	)

1441 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1442 
	#XK_⁄ëhúd
 0x0ab0

	)

1443 
	#XK_twŸhúds
 0x0ab1

	)

1444 
	#XK_⁄efi·h
 0x0ab2

	)

1445 
	#XK_twofi·hs
 0x0ab3

	)

1446 
	#XK_thªefi·hs
 0x0ab4

	)

1447 
	#XK_fourfi·hs
 0x0ab5

	)

1448 
	#XK_⁄esixth
 0x0ab6

	)

1449 
	#XK_fivesixths
 0x0ab7

	)

1450 
	#XK_ˇªof
 0x0ab8

	)

1451 
	#XK_figdash
 0x0abb

	)

1452 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1453 
	#XK_decimÆpoöt
 0x0abd

	)

1454 
	#XK_righèngÀbøckë
 0x0abê

	)

1455 
	#XK_m¨kî
 0x0abf

	)

1456 
	#XK_⁄ìighth
 0x0ac3

	)

1457 
	#XK_thªìighths
 0x0ac4

	)

1458 
	#XK_fivìighths
 0x0ac5

	)

1459 
	#XK_£víeighths
 0x0ac6

	)

1460 
	#XK_åadem¨k
 0x0ac9

	)

1461 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1462 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1463 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1464 
	#XK_right›íåüngÀ
 0x0acd

	)

1465 
	#XK_em›ícú˛e
 0x0a˚

	)

1466 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1467 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1468 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1469 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1470 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1471 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1472 
	#XK_≥rmûÀ
 0x0ad5

	)

1473 
	#XK_möuãs
 0x0ad6

	)

1474 
	#XK_£c⁄ds
 0x0ad7

	)

1475 
	#XK_œtö¸oss
 0x0ad9

	)

1476 
	#XK_hexagøm
 0x0ada

	)

1477 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1478 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1479 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1480 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1481 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1482 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1483 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1484 
	#XK_›íª˘buŒë
 0x0´2

	)

1485 
	#XK_›íåibuŒëup
 0x0´3

	)

1486 
	#XK_›íåibuŒëdown
 0x0´4

	)

1487 
	#XK_›í°¨
 0x0´5

	)

1488 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1489 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1490 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1491 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1492 
	#XK_À·poöãr
 0x0´®

	)

1493 
	#XK_righçoöãr
 0x0´b

	)

1494 
	#XK_˛ub
 0x0´¯

	)

1495 
	#XK_düm⁄d
 0x0´d

	)

1496 
	#XK_hóπ
 0x0´ê

	)

1497 
	#XK_mÆã£¸oss
 0x0af0

	)

1498 
	#XK_daggî
 0x0af1

	)

1499 
	#XK_doubÀdaggî
 0x0af2

	)

1500 
	#XK_checkm¨k
 0x0af3

	)

1501 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1502 
	#XK_musiˇlsh¨p
 0x0af5

	)

1503 
	#XK_musiˇlÊ©
 0x0af6

	)

1504 
	#XK_mÆesymbﬁ
 0x0af7

	)

1505 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1506 
	#XK_ãÀph⁄e
 0x0af9

	)

1507 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1508 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1509 
	#XK_ˇªt
 0x0af¯

	)

1510 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1511 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1512 
	#XK_curs‹
 0x0aff

	)

1520 #ifde‡
XK_APL


1521 
	#XK_À·ˇªt
 0x0ba3

	)

1522 
	#XK_rightˇªt
 0x0ba6

	)

1523 
	#XK_downˇªt
 0x0ba8

	)

1524 
	#XK_upˇªt
 0x0ba9

	)

1525 
	#XK_ovîb¨
 0x0bc0

	)

1526 
	#XK_dow¡ack
 0x0bc2

	)

1527 
	#XK_upsh€
 0x0bc3

	)

1528 
	#XK_down°ûe
 0x0bc4

	)

1529 
	#XK_undîb¨
 0x0bc6

	)

1530 
	#XK_jŸ
 0x0bˇ

	)

1531 
	#XK_quad
 0x0bc¯

	)

1532 
	#XK_u±ack
 0x0b˚

	)

1533 
	#XK_cú˛e
 0x0bc‡

	)

1534 
	#XK_up°ûe
 0x0bd3

	)

1535 
	#XK_downsh€
 0x0bd6

	)

1536 
	#XK_rightsh€
 0x0bd8

	)

1537 
	#XK_À·sh€
 0x0bd®

	)

1538 
	#XK_À·èck
 0x0bd¯

	)

1539 
	#XK_righâack
 0x0bf¯

	)

1547 #ifde‡
XK_HEBREW


1548 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1549 
	#XK_hebªw_Æïh
 0x0˚0

	)

1550 
	#XK_hebªw_bë
 0x0˚1

	)

1551 
	#XK_hebªw_bëh
 0x0˚1

	)

1552 
	#XK_hebªw_gimñ
 0x0˚2

	)

1553 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1554 
	#XK_hebªw_dÆë
 0x0˚3

	)

1555 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1556 
	#XK_hebªw_he
 0x0˚4

	)

1557 
	#XK_hebªw_waw
 0x0˚5

	)

1558 
	#XK_hebªw_zaö
 0x0˚6

	)

1559 
	#XK_hebªw_zayö
 0x0˚6

	)

1560 
	#XK_hebªw_chë
 0x0˚7

	)

1561 
	#XK_hebªw_hë
 0x0˚7

	)

1562 
	#XK_hebªw_ãt
 0x0˚8

	)

1563 
	#XK_hebªw_ãth
 0x0˚8

	)

1564 
	#XK_hebªw_yod
 0x0˚9

	)

1565 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1566 
	#XK_hebªw_k≠h
 0x0˚b

	)

1567 
	#XK_hebªw_œmed
 0x0˚¯

	)

1568 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1569 
	#XK_hebªw_mem
 0x0˚ê

	)

1570 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1571 
	#XK_hebªw_nun
 0x0cf0

	)

1572 
	#XK_hebªw_ßmech
 0x0cf1

	)

1573 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1574 
	#XK_hebªw_ayö
 0x0cf2

	)

1575 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1576 
	#XK_hebªw_≥
 0x0cf4

	)

1577 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1578 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1579 
	#XK_hebªw_zade
 0x0cf6

	)

1580 
	#XK_hebªw_zadi
 0x0cf6

	)

1581 
	#XK_hebªw_q›h
 0x0cf7

	)

1582 
	#XK_hebªw_kuf
 0x0cf7

	)

1583 
	#XK_hebªw_ªsh
 0x0cf8

	)

1584 
	#XK_hebªw_shö
 0x0cf9

	)

1585 
	#XK_hebªw_èw
 0x0cÁ

	)

1586 
	#XK_hebªw_èf
 0x0cÁ

	)

1587 
	#XK_Hebªw_swôch
 0xff7ê

	)

1595 #ifde‡
XK_THAI


1596 
	#XK_Thai_kokai
 0x0da1

	)

1597 
	#XK_Thai_khokhai
 0x0da2

	)

1598 
	#XK_Thai_khokhu©
 0x0da3

	)

1599 
	#XK_Thai_khokhwai
 0x0da4

	)

1600 
	#XK_Thai_khokh⁄
 0x0da5

	)

1601 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1602 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1603 
	#XK_Thai_choch™
 0x0da8

	)

1604 
	#XK_Thai_chochög
 0x0da9

	)

1605 
	#XK_Thai_choch™g
 0x0dØ

	)

1606 
	#XK_Thai_soso
 0x0dab

	)

1607 
	#XK_Thai_choch€
 0x0da¯

	)

1608 
	#XK_Thai_yoyög
 0x0dad

	)

1609 
	#XK_Thai_dochada
 0x0d´

	)

1610 
	#XK_Thai_t›©ak
 0x0da‡

	)

1611 
	#XK_Thai_thŸh™
 0x0db0

	)

1612 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1613 
	#XK_Thai_th›huthao
 0x0db2

	)

1614 
	#XK_Thai_n⁄í
 0x0db3

	)

1615 
	#XK_Thai_dodek
 0x0db4

	)

1616 
	#XK_Thai_tŸao
 0x0db5

	)

1617 
	#XK_Thai_thŸhung
 0x0db6

	)

1618 
	#XK_Thai_thŸhah™
 0x0db7

	)

1619 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1620 
	#XK_Thai_n⁄u
 0x0db9

	)

1621 
	#XK_Thai_bobaimai
 0x0db®

	)

1622 
	#XK_Thai_p›œ
 0x0dbb

	)

1623 
	#XK_Thai_ph›hung
 0x0db¯

	)

1624 
	#XK_Thai_foÁ
 0x0dbd

	)

1625 
	#XK_Thai_ph›h™
 0x0dbê

	)

1626 
	#XK_Thai_foÁn
 0x0db‡

	)

1627 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1628 
	#XK_Thai_moma
 0x0dc1

	)

1629 
	#XK_Thai_yoyak
 0x0dc2

	)

1630 
	#XK_Thai_r‹ua
 0x0dc3

	)

1631 
	#XK_Thai_ru
 0x0dc4

	)

1632 
	#XK_Thai_lﬁög
 0x0dc5

	)

1633 
	#XK_Thai_lu
 0x0dc6

	)

1634 
	#XK_Thai_wow´n
 0x0dc7

	)

1635 
	#XK_Thai_soßœ
 0x0dc8

	)

1636 
	#XK_Thai_s‹usi
 0x0dc9

	)

1637 
	#XK_Thai_sosua
 0x0dˇ

	)

1638 
	#XK_Thai_hohù
 0x0dcb

	)

1639 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1640 
	#XK_Thai_ﬂng
 0x0dcd

	)

1641 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1642 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1643 
	#XK_Thai_ßøa
 0x0dd0

	)

1644 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1645 
	#XK_Thai_ßøØ
 0x0dd2

	)

1646 
	#XK_Thai_ßøam
 0x0dd3

	)

1647 
	#XK_Thai_ßøi
 0x0dd4

	)

1648 
	#XK_Thai_ßøii
 0x0dd5

	)

1649 
	#XK_Thai_ßøue
 0x0dd6

	)

1650 
	#XK_Thai_ßøuì
 0x0dd7

	)

1651 
	#XK_Thai_ßøu
 0x0dd8

	)

1652 
	#XK_Thai_ßøuu
 0x0dd9

	)

1653 
	#XK_Thai_phöthu
 0x0dd®

	)

1654 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1655 
	#XK_Thai_baht
 0x0dd‡

	)

1656 
	#XK_Thai_ßøe
 0x0de0

	)

1657 
	#XK_Thai_ßø´
 0x0de1

	)

1658 
	#XK_Thai_ßøo
 0x0de2

	)

1659 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1660 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1661 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1662 
	#XK_Thai_maiyamok
 0x0de6

	)

1663 
	#XK_Thai_maôaikhu
 0x0de7

	)

1664 
	#XK_Thai_maõk
 0x0de8

	)

1665 
	#XK_Thai_maôho
 0x0de9

	)

1666 
	#XK_Thai_maôri
 0x0dó

	)

1667 
	#XK_Thai_maich©èwa
 0x0deb

	)

1668 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1669 
	#XK_Thai_nikhahô
 0x0ded

	)

1670 
	#XK_Thai_Àksun
 0x0df0

	)

1671 
	#XK_Thai_Àknung
 0x0df1

	)

1672 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1673 
	#XK_Thai_Àkßm
 0x0df3

	)

1674 
	#XK_Thai_Àksi
 0x0df4

	)

1675 
	#XK_Thai_Àkha
 0x0df5

	)

1676 
	#XK_Thai_Àkhok
 0x0df6

	)

1677 
	#XK_Thai_Àkchë
 0x0df7

	)

1678 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1679 
	#XK_Thai_Àkkao
 0x0df9

	)

1687 #ifde‡
XK_KOREAN


1689 
	#XK_H™gul
 0xff31

	)

1690 
	#XK_H™gul_Sèπ
 0xff32

	)

1691 
	#XK_H™gul_End
 0xff33

	)

1692 
	#XK_H™gul_H™ja
 0xff34

	)

1693 
	#XK_H™gul_Jamo
 0xff35

	)

1694 
	#XK_H™gul_Romaja
 0xff36

	)

1695 
	#XK_H™gul_Codeöput
 0xff37

	)

1696 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1697 
	#XK_H™gul_B™ja
 0xff39

	)

1698 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1699 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1700 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1701 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1702 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1703 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1704 
	#XK_H™gul_swôch
 0xff7ê

	)

1707 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1708 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1709 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1710 
	#XK_H™gul_Nõun
 0x0ó4

	)

1711 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1712 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1713 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1714 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1715 
	#XK_H™gul_Rõul
 0x0ó9

	)

1716 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1717 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1718 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1719 
	#XK_H™gul_RõulSios
 0x0ód

	)

1720 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1721 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1722 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1723 
	#XK_H™gul_Mõum
 0x0eb1

	)

1724 
	#XK_H™gul_Põub
 0x0eb2

	)

1725 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1726 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1727 
	#XK_H™gul_Sios
 0x0eb5

	)

1728 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1729 
	#XK_H™gul_Ieung
 0x0eb7

	)

1730 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1731 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1732 
	#XK_H™gul_Cõuc
 0x0eba

	)

1733 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1734 
	#XK_H™gul_Tõut
 0x0ebc

	)

1735 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1736 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1739 
	#XK_H™gul_A
 0x0ebf

	)

1740 
	#XK_H™gul_AE
 0x0ec0

	)

1741 
	#XK_H™gul_YA
 0x0ec1

	)

1742 
	#XK_H™gul_YAE
 0x0ec2

	)

1743 
	#XK_H™gul_EO
 0x0ec3

	)

1744 
	#XK_H™gul_E
 0x0ec4

	)

1745 
	#XK_H™gul_YEO
 0x0ec5

	)

1746 
	#XK_H™gul_YE
 0x0ec6

	)

1747 
	#XK_H™gul_O
 0x0ec7

	)

1748 
	#XK_H™gul_WA
 0x0ec8

	)

1749 
	#XK_H™gul_WAE
 0x0ec9

	)

1750 
	#XK_H™gul_OE
 0x0eˇ

	)

1751 
	#XK_H™gul_YO
 0x0ecb

	)

1752 
	#XK_H™gul_U
 0x0ecc

	)

1753 
	#XK_H™gul_WEO
 0x0ecd

	)

1754 
	#XK_H™gul_WE
 0x0e˚

	)

1755 
	#XK_H™gul_WI
 0x0ecf

	)

1756 
	#XK_H™gul_YU
 0x0ed0

	)

1757 
	#XK_H™gul_EU
 0x0ed1

	)

1758 
	#XK_H™gul_YI
 0x0ed2

	)

1759 
	#XK_H™gul_I
 0x0ed3

	)

1762 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1763 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1764 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1765 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1766 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1767 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1768 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1769 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1770 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1771 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1772 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1773 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1774 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1775 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1776 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1777 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1778 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1779 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1780 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1781 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1782 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1783 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1784 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1785 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1786 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1787 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1788 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1791 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1792 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1793 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1794 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1795 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1796 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1797 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1800 
	#XK_H™gul_AøeA
 0x0ef6

	)

1801 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1804 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1805 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1806 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1809 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1817 #ifde‡
XK_ARMENIAN


1818 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1819 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1820 
	#XK_Armíün_vîjakë
 0x1000589

	)

1821 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1822 
	#XK_Armíün_but
 0x100055d

	)

1823 
	#XK_Armíün_hyphí
 0x100058®

	)

1824 
	#XK_Armíün_yíèm«
 0x100058®

	)

1825 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1826 
	#XK_Armíün_am™ak
 0x100055¯

	)

1827 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1828 
	#XK_Armíün_shesht
 0x100055b

	)

1829 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1830 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1831 
	#XK_Armíün_AYB
 0x1000531

	)

1832 
	#XK_Armíün_ayb
 0x1000561

	)

1833 
	#XK_Armíün_BEN
 0x1000532

	)

1834 
	#XK_Armíün_bí
 0x1000562

	)

1835 
	#XK_Armíün_GIM
 0x1000533

	)

1836 
	#XK_Armíün_gim
 0x1000563

	)

1837 
	#XK_Armíün_DA
 0x1000534

	)

1838 
	#XK_Armíün_da
 0x1000564

	)

1839 
	#XK_Armíün_YECH
 0x1000535

	)

1840 
	#XK_Armíün_yech
 0x1000565

	)

1841 
	#XK_Armíün_ZA
 0x1000536

	)

1842 
	#XK_Armíün_za
 0x1000566

	)

1843 
	#XK_Armíün_E
 0x1000537

	)

1844 
	#XK_Armíün_e
 0x1000567

	)

1845 
	#XK_Armíün_AT
 0x1000538

	)

1846 
	#XK_Armíün_©
 0x1000568

	)

1847 
	#XK_Armíün_TO
 0x1000539

	)

1848 
	#XK_Armíün_to
 0x1000569

	)

1849 
	#XK_Armíün_ZHE
 0x100053®

	)

1850 
	#XK_Armíün_zhe
 0x100056®

	)

1851 
	#XK_Armíün_INI
 0x100053b

	)

1852 
	#XK_Armíün_öi
 0x100056b

	)

1853 
	#XK_Armíün_LYUN
 0x100053¯

	)

1854 
	#XK_Armíün_lyun
 0x100056¯

	)

1855 
	#XK_Armíün_KHE
 0x100053d

	)

1856 
	#XK_Armíün_khe
 0x100056d

	)

1857 
	#XK_Armíün_TSA
 0x100053ê

	)

1858 
	#XK_Armíün_tß
 0x100056ê

	)

1859 
	#XK_Armíün_KEN
 0x100053‡

	)

1860 
	#XK_Armíün_kí
 0x100056‡

	)

1861 
	#XK_Armíün_HO
 0x1000540

	)

1862 
	#XK_Armíün_ho
 0x1000570

	)

1863 
	#XK_Armíün_DZA
 0x1000541

	)

1864 
	#XK_Armíün_dza
 0x1000571

	)

1865 
	#XK_Armíün_GHAT
 0x1000542

	)

1866 
	#XK_Armíün_gh©
 0x1000572

	)

1867 
	#XK_Armíün_TCHE
 0x1000543

	)

1868 
	#XK_Armíün_tche
 0x1000573

	)

1869 
	#XK_Armíün_MEN
 0x1000544

	)

1870 
	#XK_Armíün_mí
 0x1000574

	)

1871 
	#XK_Armíün_HI
 0x1000545

	)

1872 
	#XK_Armíün_hi
 0x1000575

	)

1873 
	#XK_Armíün_NU
 0x1000546

	)

1874 
	#XK_Armíün_nu
 0x1000576

	)

1875 
	#XK_Armíün_SHA
 0x1000547

	)

1876 
	#XK_Armíün_sha
 0x1000577

	)

1877 
	#XK_Armíün_VO
 0x1000548

	)

1878 
	#XK_Armíün_vo
 0x1000578

	)

1879 
	#XK_Armíün_CHA
 0x1000549

	)

1880 
	#XK_Armíün_cha
 0x1000579

	)

1881 
	#XK_Armíün_PE
 0x100054®

	)

1882 
	#XK_Armíün_≥
 0x100057®

	)

1883 
	#XK_Armíün_JE
 0x100054b

	)

1884 
	#XK_Armíün_je
 0x100057b

	)

1885 
	#XK_Armíün_RA
 0x100054¯

	)

1886 
	#XK_Armíün_ø
 0x100057¯

	)

1887 
	#XK_Armíün_SE
 0x100054d

	)

1888 
	#XK_Armíün_£
 0x100057d

	)

1889 
	#XK_Armíün_VEV
 0x100054ê

	)

1890 
	#XK_Armíün_vev
 0x100057ê

	)

1891 
	#XK_Armíün_TYUN
 0x100054‡

	)

1892 
	#XK_Armíün_tyun
 0x100057‡

	)

1893 
	#XK_Armíün_RE
 0x1000550

	)

1894 
	#XK_Armíün_ª
 0x1000580

	)

1895 
	#XK_Armíün_TSO
 0x1000551

	)

1896 
	#XK_Armíün_tso
 0x1000581

	)

1897 
	#XK_Armíün_VYUN
 0x1000552

	)

1898 
	#XK_Armíün_vyun
 0x1000582

	)

1899 
	#XK_Armíün_PYUR
 0x1000553

	)

1900 
	#XK_Armíün_pyur
 0x1000583

	)

1901 
	#XK_Armíün_KE
 0x1000554

	)

1902 
	#XK_Armíün_ke
 0x1000584

	)

1903 
	#XK_Armíün_O
 0x1000555

	)

1904 
	#XK_Armíün_o
 0x1000585

	)

1905 
	#XK_Armíün_FE
 0x1000556

	)

1906 
	#XK_Armíün_„
 0x1000586

	)

1907 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1914 #ifde‡
XK_GEORGIAN


1915 
	#XK_Ge‹gün_™
 0x10010d0

	)

1916 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1917 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1918 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1919 
	#XK_Ge‹gün_í
 0x10010d4

	)

1920 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1921 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1922 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1923 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1924 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1925 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1926 
	#XK_Ge‹gün_m™
 0x10010db

	)

1927 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1928 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1929 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1930 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1931 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1932 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1933 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1934 
	#XK_Ge‹gün_un
 0x10010e3

	)

1935 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1936 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1937 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1938 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1939 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1940 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1941 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1942 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1943 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1944 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1945 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1946 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1947 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1948 
	#XK_Ge‹gün_he
 0x10010f1

	)

1949 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1950 
	#XK_Ge‹gün_we
 0x10010f3

	)

1951 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1952 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1953 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1960 #ifde‡
XK_CAUCASUS


1962 
	#XK_XabovedŸ
 0x1001e8®

	)

1963 
	#XK_Ibªve
 0x100012¯

	)

1964 
	#XK_Z°roke
 0x10001b5

	)

1965 
	#XK_Gˇr⁄
 0x10001e6

	)

1966 
	#XK_Oˇr⁄
 0x10001d1

	)

1967 
	#XK_Ob¨ªd
 0x100019‡

	)

1968 
	#XK_xabovedŸ
 0x1001e8b

	)

1969 
	#XK_ibªve
 0x100012d

	)

1970 
	#XK_z°roke
 0x10001b6

	)

1971 
	#XK_gˇr⁄
 0x10001e7

	)

1972 
	#XK_oˇr⁄
 0x10001d2

	)

1973 
	#XK_ob¨ªd
 0x1000275

	)

1974 
	#XK_SCHWA
 0x100018‡

	)

1975 
	#XK_schwa
 0x1000259

	)

1976 
	#XK_EZH
 0x10001b7

	)

1977 
	#XK_ezh
 0x1000292

	)

1980 
	#XK_LbñowdŸ
 0x1001e36

	)

1981 
	#XK_lbñowdŸ
 0x1001e37

	)

1988 #ifde‡
XK_VIETNAMESE


1989 
	#XK_AbñowdŸ
 0x1001ó0

	)

1990 
	#XK_abñowdŸ
 0x1001ó1

	)

1991 
	#XK_Ahook
 0x1001ó2

	)

1992 
	#XK_ahook
 0x1001ó3

	)

1993 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

1994 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

1995 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

1996 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

1997 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

1998 
	#XK_acúcumÊexhook
 0x1001ó9

	)

1999 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2000 
	#XK_acúcumÊextûde
 0x1001ób

	)

2001 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2002 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2003 
	#XK_Abªvócuã
 0x1001óê

	)

2004 
	#XK_abªvócuã
 0x1001ó‡

	)

2005 
	#XK_Abªvegøve
 0x1001eb0

	)

2006 
	#XK_abªvegøve
 0x1001eb1

	)

2007 
	#XK_Abªvehook
 0x1001eb2

	)

2008 
	#XK_abªvehook
 0x1001eb3

	)

2009 
	#XK_Abªvëûde
 0x1001eb4

	)

2010 
	#XK_abªvëûde
 0x1001eb5

	)

2011 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2012 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2013 
	#XK_EbñowdŸ
 0x1001eb8

	)

2014 
	#XK_ebñowdŸ
 0x1001eb9

	)

2015 
	#XK_Ehook
 0x1001eb®

	)

2016 
	#XK_ehook
 0x1001ebb

	)

2017 
	#XK_Etûde
 0x1001eb¯

	)

2018 
	#XK_ëûde
 0x1001ebd

	)

2019 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2020 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2021 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2022 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2023 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2024 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2025 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2026 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2027 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2028 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2029 
	#XK_Ihook
 0x1001ec8

	)

2030 
	#XK_ihook
 0x1001ec9

	)

2031 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2032 
	#XK_ibñowdŸ
 0x1001ecb

	)

2033 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2034 
	#XK_obñowdŸ
 0x1001ecd

	)

2035 
	#XK_Ohook
 0x1001e˚

	)

2036 
	#XK_ohook
 0x1001ec‡

	)

2037 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2038 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2039 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2040 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2041 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2042 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2043 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2044 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2045 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2046 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2047 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2048 
	#XK_oh‹«cuã
 0x1001edb

	)

2049 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2050 
	#XK_oh‹ngøve
 0x1001edd

	)

2051 
	#XK_Oh‹nhook
 0x1001edê

	)

2052 
	#XK_oh‹nhook
 0x1001ed‡

	)

2053 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2054 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2055 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2056 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2057 
	#XK_UbñowdŸ
 0x1001ì4

	)

2058 
	#XK_ubñowdŸ
 0x1001ì5

	)

2059 
	#XK_Uhook
 0x1001ì6

	)

2060 
	#XK_uhook
 0x1001ì7

	)

2061 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2062 
	#XK_uh‹«cuã
 0x1001ì9

	)

2063 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2064 
	#XK_uh‹ngøve
 0x1001ìb

	)

2065 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2066 
	#XK_uh‹nhook
 0x1001ìd

	)

2067 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2068 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2069 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2070 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2071 
	#XK_YbñowdŸ
 0x1001ef4

	)

2072 
	#XK_ybñowdŸ
 0x1001ef5

	)

2073 
	#XK_Yhook
 0x1001ef6

	)

2074 
	#XK_yhook
 0x1001ef7

	)

2075 
	#XK_Ytûde
 0x1001ef8

	)

2076 
	#XK_ytûde
 0x1001ef9

	)

2077 
	#XK_Oh‹n
 0x10001a0

	)

2078 
	#XK_oh‹n
 0x10001a1

	)

2079 
	#XK_Uh‹n
 0x10001a‡

	)

2080 
	#XK_uh‹n
 0x10001b0

	)

2084 #ifde‡
XK_CURRENCY


2085 
	#XK_EcuSign
 0x10020a0

	)

2086 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2087 
	#XK_CruzeúoSign
 0x10020a2

	)

2088 
	#XK_FFøncSign
 0x10020a3

	)

2089 
	#XK_LúaSign
 0x10020a4

	)

2090 
	#XK_MûlSign
 0x10020a5

	)

2091 
	#XK_NaúaSign
 0x10020a6

	)

2092 
	#XK_Pe£èSign
 0x10020a7

	)

2093 
	#XK_Ru≥eSign
 0x10020a8

	)

2094 
	#XK_W⁄Sign
 0x10020a9

	)

2095 
	#XK_NewSheqñSign
 0x10020Ø

	)

2096 
	#XK_D⁄gSign
 0x10020ab

	)

2097 
	#XK_EuroSign
 0x20a¯

	)

2100 #ifde‡
XK_MATHEMATICAL


2102 
	#XK_zîosu≥ri‹
 0x1002070

	)

2103 
	#XK_foursu≥ri‹
 0x1002074

	)

2104 
	#XK_fivesu≥ri‹
 0x1002075

	)

2105 
	#XK_sixsu≥ri‹
 0x1002076

	)

2106 
	#XK_£vísu≥ri‹
 0x1002077

	)

2107 
	#XK_eightsu≥ri‹
 0x1002078

	)

2108 
	#XK_nöesu≥ri‹
 0x1002079

	)

2109 
	#XK_zîosubs¸ùt
 0x1002080

	)

2110 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2111 
	#XK_twosubs¸ùt
 0x1002082

	)

2112 
	#XK_thªesubs¸ùt
 0x1002083

	)

2113 
	#XK_foursubs¸ùt
 0x1002084

	)

2114 
	#XK_fivesubs¸ùt
 0x1002085

	)

2115 
	#XK_sixsubs¸ùt
 0x1002086

	)

2116 
	#XK_£vísubs¸ùt
 0x1002087

	)

2117 
	#XK_eightsubs¸ùt
 0x1002088

	)

2118 
	#XK_nöesubs¸ùt
 0x1002089

	)

2119 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2120 
	#XK_em±y£t
 0x1002205

	)

2121 
	#XK_ñemítof
 0x1002208

	)

2122 
	#XK_nŸñemítof
 0x1002209

	)

2123 
	#XK_c⁄èößs
 0x100220B

	)

2124 
	#XK_squ¨îoŸ
 0x100221A

	)

2125 
	#XK_cubîoŸ
 0x100221B

	)

2126 
	#XK_fouπhroŸ
 0x100221C

	)

2127 
	#XK_döãgøl
 0x100222C

	)

2128 
	#XK_töãgøl
 0x100222D

	)

2129 
	#XK_beˇu£
 0x1002235

	)

2130 
	#XK_≠¥oxeq
 0x1002248

	)

2131 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2132 
	#XK_nŸidítiˇl
 0x1002262

	)

2133 
	#XK_°ri˘eq
 0x1002263

	)

2136 #ifde‡
XK_BRAILLE


2137 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2138 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2139 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2140 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2141 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2142 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2143 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2144 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2145 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2146 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2147 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2148 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2149 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2150 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2151 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2152 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2153 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2154 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2155 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2156 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2157 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2158 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2159 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2160 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2161 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2162 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2163 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2164 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2165 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2166 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2167 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2168 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2169 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2170 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2171 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2172 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2173 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2174 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2175 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2176 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2177 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2178 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2179 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2180 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2181 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2182 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2183 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2184 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2185 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2186 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2187 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2188 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2189 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2190 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2191 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2192 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2193 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2194 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2195 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2196 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2197 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2198 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2199 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2200 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2201 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2202 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2203 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2204 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2205 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2206 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2207 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2208 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2209 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2210 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2211 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2212 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2213 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2214 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2215 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2216 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2217 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2218 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2219 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2220 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2221 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2222 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2223 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2224 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2225 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2226 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2227 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2228 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2229 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2230 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2231 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2232 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2233 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2234 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2235 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2236 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2237 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2238 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2239 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2240 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2241 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2242 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2243 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2244 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2245 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2246 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2247 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2248 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2249 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2250 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2251 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2252 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2253 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2254 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2255 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2256 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2257 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2258 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2259 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2260 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2261 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2262 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2263 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2264 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2265 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2266 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2267 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2268 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2269 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2270 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2271 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2272 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2273 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2274 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2275 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2276 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2277 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2278 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2279 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2280 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2281 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2282 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2283 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2284 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2285 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2286 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2287 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2288 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2289 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2290 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2291 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2292 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2293 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2294 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2295 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2296 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2297 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2298 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2299 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2300 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2301 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2302 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2303 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2304 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2305 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2306 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2307 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2308 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2309 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2310 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2311 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2312 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2313 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2314 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2315 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2316 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2317 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2318 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2319 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2320 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2321 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2322 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2323 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2324 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2325 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2326 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2327 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2328 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2329 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2330 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2331 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2332 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2333 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2334 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2335 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2336 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2337 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2338 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2339 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2340 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2341 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2342 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2343 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2344 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2345 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2346 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2347 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2348 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2349 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2350 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2351 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2352 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2353 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2354 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2355 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2356 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2357 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2358 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2359 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2360 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2361 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2362 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2363 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2364 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2365 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2366 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2367 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2368 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2369 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2370 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2371 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2372 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2373 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2374 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2375 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2376 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2377 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2378 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2379 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2380 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2381 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2382 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2383 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2384 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2385 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2386 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2387 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2388 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2389 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2390 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2391 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2392 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2393 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2394 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2395 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2396 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2397 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2398 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2399 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2400 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2401 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2402 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2410 #ifde‡
XK_SINHALA


2411 
	#XK_Söh_ng
 0x1000d82

	)

2412 
	#XK_Söh_h2
 0x1000d83

	)

2413 
	#XK_Söh_a
 0x1000d85

	)

2414 
	#XK_Söh_Ø
 0x1000d86

	)

2415 
	#XK_Söh_´
 0x1000d87

	)

2416 
	#XK_Söh_´e
 0x1000d88

	)

2417 
	#XK_Söh_i
 0x1000d89

	)

2418 
	#XK_Söh_ii
 0x1000d8®

	)

2419 
	#XK_Söh_u
 0x1000d8b

	)

2420 
	#XK_Söh_uu
 0x1000d8¯

	)

2421 
	#XK_Söh_ri
 0x1000d8d

	)

2422 
	#XK_Söh_rii
 0x1000d8ê

	)

2423 
	#XK_Söh_lu
 0x1000d8‡

	)

2424 
	#XK_Söh_luu
 0x1000d90

	)

2425 
	#XK_Söh_e
 0x1000d91

	)

2426 
	#XK_Söh_ì
 0x1000d92

	)

2427 
	#XK_Söh_ai
 0x1000d93

	)

2428 
	#XK_Söh_o
 0x1000d94

	)

2429 
	#XK_Söh_oo
 0x1000d95

	)

2430 
	#XK_Söh_au
 0x1000d96

	)

2431 
	#XK_Söh_ka
 0x1000d9®

	)

2432 
	#XK_Söh_kha
 0x1000d9b

	)

2433 
	#XK_Söh_ga
 0x1000d9¯

	)

2434 
	#XK_Söh_gha
 0x1000d9d

	)

2435 
	#XK_Söh_ng2
 0x1000d9ê

	)

2436 
	#XK_Söh_nga
 0x1000d9‡

	)

2437 
	#XK_Söh_ˇ
 0x1000da0

	)

2438 
	#XK_Söh_cha
 0x1000da1

	)

2439 
	#XK_Söh_ja
 0x1000da2

	)

2440 
	#XK_Söh_jha
 0x1000da3

	)

2441 
	#XK_Söh_nya
 0x1000da4

	)

2442 
	#XK_Söh_jnya
 0x1000da5

	)

2443 
	#XK_Söh_nja
 0x1000da6

	)

2444 
	#XK_Söh_âa
 0x1000da7

	)

2445 
	#XK_Söh_âha
 0x1000da8

	)

2446 
	#XK_Söh_dda
 0x1000da9

	)

2447 
	#XK_Söh_ddha
 0x1000dØ

	)

2448 
	#XK_Söh_¬a
 0x1000dab

	)

2449 
	#XK_Söh_ndda
 0x1000da¯

	)

2450 
	#XK_Söh_tha
 0x1000dad

	)

2451 
	#XK_Söh_thha
 0x1000d´

	)

2452 
	#XK_Söh_dha
 0x1000da‡

	)

2453 
	#XK_Söh_dhha
 0x1000db0

	)

2454 
	#XK_Söh_«
 0x1000db1

	)

2455 
	#XK_Söh_ndha
 0x1000db3

	)

2456 
	#XK_Söh_∑
 0x1000db4

	)

2457 
	#XK_Söh_pha
 0x1000db5

	)

2458 
	#XK_Söh_ba
 0x1000db6

	)

2459 
	#XK_Söh_bha
 0x1000db7

	)

2460 
	#XK_Söh_ma
 0x1000db8

	)

2461 
	#XK_Söh_mba
 0x1000db9

	)

2462 
	#XK_Söh_ya
 0x1000db®

	)

2463 
	#XK_Söh_ø
 0x1000dbb

	)

2464 
	#XK_Söh_œ
 0x1000dbd

	)

2465 
	#XK_Söh_va
 0x1000dc0

	)

2466 
	#XK_Söh_sha
 0x1000dc1

	)

2467 
	#XK_Söh_ssha
 0x1000dc2

	)

2468 
	#XK_Söh_ß
 0x1000dc3

	)

2469 
	#XK_Söh_ha
 0x1000dc4

	)

2470 
	#XK_Söh_Œa
 0x1000dc5

	)

2471 
	#XK_Söh_Á
 0x1000dc6

	)

2472 
	#XK_Söh_Æ
 0x1000dˇ

	)

2473 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2474 
	#XK_Söh_´2
 0x1000dd0

	)

2475 
	#XK_Söh_´e2
 0x1000dd1

	)

2476 
	#XK_Söh_i2
 0x1000dd2

	)

2477 
	#XK_Söh_ii2
 0x1000dd3

	)

2478 
	#XK_Söh_u2
 0x1000dd4

	)

2479 
	#XK_Söh_uu2
 0x1000dd6

	)

2480 
	#XK_Söh_ru2
 0x1000dd8

	)

2481 
	#XK_Söh_e2
 0x1000dd9

	)

2482 
	#XK_Söh_ì2
 0x1000dd®

	)

2483 
	#XK_Söh_ai2
 0x1000ddb

	)

2484 
	#XK_Söh_o2
 0x1000dd¯

	)

2485 
	#XK_Söh_oo2
 0x1000ddd

	)

2486 
	#XK_Söh_au2
 0x1000ddê

	)

2487 
	#XK_Söh_lu2
 0x1000dd‡

	)

2488 
	#XK_Söh_ruu2
 0x1000df2

	)

2489 
	#XK_Söh_luu2
 0x1000df3

	)

2490 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #i‡
__WORDSIZE
 == 64

126 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifde‡
__USE_GNU


134 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

189 
	s_±hªad_˛ónup_buf„r


191 (*
	m__routöe
) (*);

192 *
	m__¨g
;

193 
	m__ˇn˚…y≥
;

194 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

216 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifde‡
__USE_XOPEN2K


223 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

233 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

234 *(*
__°¨t_routöe
) (*),

235 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

241 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

249 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

251 #ifde‡
__USE_GNU


254 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

262 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

263 c⁄° 
time•ec
 *
__ab°ime
);

270 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

274 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

277 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

278 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

286 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

293 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

294 *
__dëach°©e
)

295 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

298 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

299 
__dëach°©e
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

304 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

305 
size_t
 *
__gu¨dsize
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

310 
size_t
 
__gu¨dsize
)

311 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

321 c⁄° 
sched_∑øm
 *
__ª°ri˘


322 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


326 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

330 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


335 
__©å
, *
__ª°ri˘
 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

340 
__öhîô
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1));

345 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

346 *
__ª°ri˘
 
__sc›e
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

350 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


355 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

363 *
__°ackaddr
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

367 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


368 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

374 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

375 
size_t
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1));

378 #ifde‡
__USE_XOPEN2K


380 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

381 **
__ª°ri˘
 
__°ackaddr
,

382 
size_t
 *
__ª°ri˘
 
__°acksize
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

388 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

389 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_GNU


395 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 c⁄° 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

402 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

403 
size_t
 
__˝u£tsize
,

404 
˝u_£t_t
 *
__˝u£t
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

420 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

421 c⁄° 
sched_∑øm
 *
__∑øm
)

422 
__THROW
 
	`__n⁄nuŒ
 ((3));

425 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

426 *
__ª°ri˘
 
__pﬁicy
,

427 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

431 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

432 
__THROW
;

435 #ifde‡
__USE_GNU


437 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

438 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

442 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2));

447 #ifde‡
__USE_UNIX98


449 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

452 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

455 #ifde‡
__USE_GNU


460 
	$±hªad_yõld
 (Ë
__THROW
;

465 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

466 c⁄° 
˝u_£t_t
 *
__˝u£t
)

467 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

471 
˝u_£t_t
 *
__˝u£t
)

472 
__THROW
 
	`__n⁄nuŒ
 ((3));

485 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

486 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

497 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

501 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

504 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

509 
	`±hªad_ã°ˇn˚l
 ();

518 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

519 
__mask_was_ßved
;

520 } 
__ˇn˚l_jmp_buf
[1];

521 *
__∑d
[4];

522 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

525 #i‚de‡
__˛ónup_f˘_©åibuã


526 
	#__˛ónup_f˘_©åibuã


	)

531 
	s__±hªad_˛ónup_‰ame


533 (*
__ˇn˚l_routöe
) (*);

534 *
__ˇn˚l_¨g
;

535 
__do_ô
;

536 
__ˇn˚l_ty≥
;

539 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


540 #ifde‡
__˝lu•lus


542 ˛as†
	c__±hªad_˛ónup_˛ass


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

549 
public
:

550 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

551 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

552 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

553 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

554 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__ˇn˚l_ty≥
); 
	}
}

556 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

566 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

572 
	#±hªad_˛ónup_p›
(
execuã
) \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

576 #ifde‡
__USE_GNU


580 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

582 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

583 
__˛‰ame
.
	`__de„r
 ()

	)

588 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

589 
__˛‰ame
.
	`__ª°‹e
 (); \

590 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

591 } 0)

	)

598 
__exã∫_ölöe
 

599 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

601 i‡(
__‰ame
->
__do_ô
)

602 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

603 
	}
}

612 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 };

	)

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
__˛‰ame
.
__do_ô
 = (
execuã
); \

623 } 0)

	)

625 #ifde‡
__USE_GNU


629 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

631 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

632 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

633 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

634 .
__do_ô
 = 1 }; \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

641 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

642 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

643 
__˛‰ame
.
__do_ô
 = (
execuã
); \

644 } 0)

	)

655 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

657 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

658 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

659 *
__ˇn˚l_¨g
 = (
¨g
); \

660 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

661 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

662 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

669 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

670 dÿ{

	)

671 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

672 
__˛ónup_f˘_©åibuã
;

676 
	#±hªad_˛ónup_p›
(
execuã
) \

679 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 i‡(
execuã
) \

681 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

682 } 0)

	)

683 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

686 #ifde‡
__USE_GNU


690 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

692 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

693 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

694 *
__ˇn˚l_¨g
 = (
¨g
); \

695 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

696 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

697 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

699 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

700 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

704 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

705 dÿ{

	)

706 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

707 
__˛ónup_f˘_©åibuã
;

712 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

715 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

716 i‡(
execuã
) \

717 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

718 
	}
} 0)

	)

719 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

720 
__˛ónup_f˘_©åibuã
;

724 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

725 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

726 #i‚de‡
SHARED


727 
	`__©åibuã__
 ((
__wók__
))

733 
__jmp_buf_èg
;

734 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

740 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

741 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

742 
__THROW
 
	`__n⁄nuŒ
 ((1));

745 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

750 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

753 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

754 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 #ifde‡
__USE_XOPEN2K


758 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 c⁄° 
time•ec
 *
__ª°ri˘


760 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

764 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

770 
__ª°ri˘
 
__muãx
,

771 *
__ª°ri˘
 
__¥io˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

777 
__¥io˚ûög
,

778 *
__ª°ri˘
 
__ﬁd_˚ûög
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

782 #ifde‡
__USE_XOPEN2K8


784 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 #ifde‡
__USE_GNU


787 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__psh¨ed
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__psh¨ed
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


817 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


818 
__©å
, *
__ª°ri˘
 
__köd
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

824 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

830 
__ª°ri˘
 
__©å
,

831 *
__ª°ri˘
 
__¥Ÿocﬁ
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

837 
__¥Ÿocﬁ
)

838 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥io˚ûög
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥io˚ûög
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_XOPEN2K


853 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

854 *
__robu°√ss
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 #ifde‡
__USE_GNU


857 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

858 *
__robu°√ss
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

863 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

864 
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


881 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 c⁄° 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2K


912 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

913 c⁄° 
time•ec
 *
__ª°ri˘


914 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

918 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

934 
__ª°ri˘
 
__©å
,

935 *
__ª°ri˘
 
__psh¨ed
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

939 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

940 
__psh¨ed
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__¥ef
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

959 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

960 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

965 
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

969 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

973 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

981 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

982 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

994 
	`__n⁄nuŒ
 ((1, 2, 3));

999 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((1));

1003 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1008 
__ª°ri˘
 
__©å
,

1009 *
__ª°ri˘
 
__psh¨ed
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1013 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1014 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 #ifde‡
__USE_XOPEN2K


1018 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__˛ockid_t
 
__˛ock_id
)

1026 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1035 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1040 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1044 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1048 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1060 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1061 
__©å
, 
__cou¡
)

1062 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1066 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1070 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1083 
__ª°ri˘
 
__©å
,

1084 *
__ª°ri˘
 
__psh¨ed
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1088 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1089 
__psh¨ed
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1103 (*
__de°r_fun˘i⁄
) (*))

1104 
__THROW
 
	`__n⁄nuŒ
 ((1));

1107 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1110 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1114 c⁄° *
__poöãr
Ë
__THROW
 ;

1117 #ifde‡
__USE_XOPEN2K


1119 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1120 
__˛ockid_t
 *
__˛ock_id
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((2));

1136 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1137 (*
__∑ª¡
) (),

1138 (*
__chûd
Ë()Ë
__THROW
;

1141 #ifde‡
__USE_EXTERN_INLINES


1143 
__exã∫_ölöe
 

1144 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1146  
__thªad1
 =
__thªad2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
4
/home/lixing/include
.
/usr/include
/usr/include
193
5403
Fl_Drable_Window.cxx
Fl_Drable_Window.h
about_panel.cxx
about_panel.h
childframe.cxx
childframe.h
cubebox.cxx
cubebox.h
flstring.c
flstring.h
include/auto_tchar.h
include/macrodef.h
main.cxx
mainframe.cxx
mainframe.h
mainframe2.cxx
newtask_frame.cxx
newtask_frame.h
newtask_frame_cb.cpp
taskframe.cxx
taskframe.h
taskrow.cxx
taskrow.h
tasktable.cxx
tasktable.h
tasktable2.cxx
test/auto_tmain.h
test/main.cxx
test/prichar.h
test/tcharall.c
tsktimer/TskTimer.cxx
tsktimer/TskTimer.h
tsktimer/TskTimerMgr.h
ui/imgdata.h
ui/mainicon.cxx
ui/rowicon.cxx
utils/intvec.h
utils/utils.cxx
utils/utils.h
/home/lixing/include/FL/Fl.H
/home/lixing/include/FL/Fl_Box.H
/home/lixing/include/FL/Fl_Browser.H
/home/lixing/include/FL/Fl_Button.H
/home/lixing/include/FL/Fl_Choice.H
/home/lixing/include/FL/Fl_Color_Chooser.H
/home/lixing/include/FL/Fl_Double_Window.H
/home/lixing/include/FL/Fl_Export.H
/home/lixing/include/FL/Fl_Float_Input.H
/home/lixing/include/FL/Fl_Gl_Window.H
/home/lixing/include/FL/Fl_Group.H
/home/lixing/include/FL/Fl_Image.H
/home/lixing/include/FL/Fl_Image_Surface.H
/home/lixing/include/FL/Fl_Input.H
/home/lixing/include/FL/Fl_Int_Input.H
/home/lixing/include/FL/Fl_Light_Button.H
/home/lixing/include/FL/Fl_Menu_Bar.H
/home/lixing/include/FL/Fl_Multiline_Input.H
/home/lixing/include/FL/Fl_Native_File_Chooser.H
/home/lixing/include/FL/Fl_PNG_Image.H
/home/lixing/include/FL/Fl_Pixmap.H
/home/lixing/include/FL/Fl_RGB_Image.H
/home/lixing/include/FL/Fl_Radio_Button.H
/home/lixing/include/FL/Fl_Radio_Light_Button.H
/home/lixing/include/FL/Fl_Radio_Round_Button.H
/home/lixing/include/FL/Fl_Return_Button.H
/home/lixing/include/FL/Fl_Round_Button.H
/home/lixing/include/FL/Fl_Scroll.H
/home/lixing/include/FL/Fl_Secret_Input.H
/home/lixing/include/FL/Fl_Shared_Image.H
/home/lixing/include/FL/Fl_Slider.H
/home/lixing/include/FL/Fl_Sys_Menu_Bar.H
/home/lixing/include/FL/Fl_Table.H
/home/lixing/include/FL/Fl_Text_Display.H
/home/lixing/include/FL/Fl_Tile.H
/home/lixing/include/FL/Fl_Tiled_Image.H
/home/lixing/include/FL/Fl_Toggle_Button.H
/home/lixing/include/FL/Fl_Window.H
/home/lixing/include/FL/fl_ask.H
/home/lixing/include/FL/fl_draw.H
/home/lixing/include/FL/gl.h
/home/lixing/include/FL/glu.h
/home/lixing/include/FL/glut.H
/home/lixing/include/GL/gl.h
/home/lixing/include/GL/glu.h
/home/lixing/include/GL/glut.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/locale.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/wchar.h
/home/lixing/include/FL/Enumerations.H
/home/lixing/include/FL/Fl_Cairo.H
/home/lixing/include/FL/Fl_Copy_Surface.H
/home/lixing/include/FL/Fl_Device.H
/home/lixing/include/FL/Fl_File_Chooser.H
/home/lixing/include/FL/Fl_Scrollbar.H
/home/lixing/include/FL/Fl_Value_Input.H
/home/lixing/include/FL/filename.H
/home/lixing/include/FL/x.H
/home/lixing/include/GL/glext.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/locale.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/malloc.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/wctype.h
/usr/include/xlocale.h
/home/lixing/include/FL/Fl_Bitmap.H
/home/lixing/include/FL/Fl_Check_Button.H
/home/lixing/include/FL/Fl_File_Browser.H
/home/lixing/include/FL/Fl_File_Input.H
/home/lixing/include/FL/Fl_Menu_Button.H
/home/lixing/include/FL/Fl_Paged_Device.H
/home/lixing/include/FL/Fl_Plugin.H
/home/lixing/include/FL/Fl_Preferences.H
/home/lixing/include/FL/Fl_Printer.H
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/X11/Xutil.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wordsize.h
/usr/include/dirent.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/home/lixing/include/FL/Fl_PostScript.H
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/keysym.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/dirent.h
/usr/include/bits/libc-lock.h
/usr/include/bits/posix1_lim.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/X11/Xmd.h
/usr/include/X11/keysymdef.h
/usr/include/bits/local_lim.h
/usr/include/pthread.h
/usr/include/bits/setjmp.h
/usr/include/linux/limits.h
/usr/include/sched.h
/usr/include/bits/sched.h
